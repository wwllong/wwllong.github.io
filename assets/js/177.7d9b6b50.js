(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{826:function(t,s,a){"use strict";a.r(s);var _=a(58),e=Object(_.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"对象的实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的实例化"}},[t._v("#")]),t._v(" 对象的实例化")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_1.png",alt:"new_object_1"}})]),t._v(" "),a("h2",{attrs:{id:"对象实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象实例化"}},[t._v("#")]),t._v(" 对象实例化")]),t._v(" "),a("h3",{attrs:{id:"创建对象的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的方式"}},[t._v("#")]),t._v(" 创建对象的方式")]),t._v(" "),a("p",[t._v("创建对象的方式通常有以下几种方式：")]),t._v(" "),a("ol",[a("li",[t._v("new：最常见的方式。变形的有：Xxx的静态方法，XxxBuilder/XxxFactory的静态方法")]),t._v(" "),a("li",[t._v("Class的newInstance方法：反射的方式，只能调用空参的构造器，权限必须是public")]),t._v(" "),a("li",[t._v("Constructor的newInstance(XXX)：反射的方式，可以调用空参、带参的构造器，权限没有要求")]),t._v(" "),a("li",[t._v("使用clone()：不调用任何的构造器，要求当前的类需要实现Cloneable接口，实现clone()")]),t._v(" "),a("li",[t._v("使用序列化：从文件中、从网络中获取一个对象的二进制流")]),t._v(" "),a("li",[t._v("第三方库 Objenesis")])]),t._v(" "),a("h3",{attrs:{id:"创建对象的步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的步骤"}},[t._v("#")]),t._v(" 创建对象的步骤")]),t._v(" "),a("p",[t._v("前面所述是从字节码角度看待对象的创建过程，现在从执行步骤的角度来分析：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_2.png",alt:"new_object_2"}})]),t._v(" "),a("p",[t._v("创建对象的过程可以细分为六步：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("判断对象对应的类是否加载、链接、初始化")])])]),t._v(" "),a("p",[t._v("虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化（即判断类元信息是否存在）。")]),t._v(" "),a("p",[t._v("如果没有，那么在"),a("strong",[t._v("双亲委派模式")]),t._v("下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的 .class文件；")]),t._v(" "),a("ul",[a("li",[t._v("如果没有找到文件，则抛出ClassNotFoundException异常")]),t._v(" "),a("li",[t._v("如果找到，则进行类加载，并生成对应的Class对象")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("为对象分配内存")])])]),t._v(" "),a("p",[t._v("首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果内存规整：虚拟机将采用的是"),a("strong",[t._v("指针碰撞法")]),t._v("（Bump The Point）来为对象分配内存。")]),t._v(" "),a("p",[t._v("意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial ，ParNew这种基于压缩算法的，虚拟机就采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。")])]),t._v(" "),a("li",[a("p",[t._v("如果内存不规整：虚拟机需要维护一个"),a("strong",[t._v("空闲列表")]),t._v("（Free List）来为对象分配内存。")]),t._v(" "),a("p",[t._v("已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。")])])]),t._v(" "),a("p",[a("strong",[t._v("选择哪种分配方式由Java堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定")]),t._v("。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[a("strong",[t._v("处理并发问题")])]),t._v(" "),a("ul",[a("li",[t._v("采用CAS失败重试、区域加锁保证更新的原子性")]),t._v(" "),a("li",[t._v("每个线程预先分配一块TLAB：通过设置 "),a("code",[t._v("-XX:+UseTLAB")]),t._v("参数来设定")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("初始化分配到的内存")])]),t._v(" "),a("p",[t._v("所有属性设置默认值，保证对象实例字段在不赋值时可以直接使用")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("设置对象的对象头")])]),t._v(" "),a("p",[t._v("将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。")]),t._v(" "),a("p",[t._v("这个过程的具体设置方式取决于JVM实现。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("执行init方法进行初始化")])]),t._v(" "),a("p",[t._v("在Java程序的视角看来，这一步初始化才是我们通常理解的“初始化”。")]),t._v(" "),a("ul",[a("li",[t._v("初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。")])]),t._v(" "),a("p",[t._v("因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算创建出来。")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("给对象属性赋值的操作")]),t._v(" "),a("ul",[a("li",[t._v("属性的默认初始化")]),t._v(" "),a("li",[t._v("显式初始化")]),t._v(" "),a("li",[t._v("代码块中初始化")]),t._v(" "),a("li",[t._v("构造器中初始化")])])]),t._v(" "),a("h3",{attrs:{id:"对象实例化的过程总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象实例化的过程总结"}},[t._v("#")]),t._v(" 对象实例化的过程总结")]),t._v(" "),a("ol",[a("li",[t._v("加载类元信息")]),t._v(" "),a("li",[t._v("为对象分配内存")]),t._v(" "),a("li",[t._v("处理并发问题")]),t._v(" "),a("li",[t._v("属性的默认初始化（零值初始化）")]),t._v(" "),a("li",[t._v("设置对象头信息")]),t._v(" "),a("li",[t._v("属性的显示初始化、代码块中初始化、构造器中初始化")])]),t._v(" "),a("h2",{attrs:{id:"对象内存布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象内存布局"}},[t._v("#")]),t._v(" 对象内存布局")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_3.png",alt:"new_object_3"}})]),t._v(" "),a("h3",{attrs:{id:"对象头-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象头-header"}},[t._v("#")]),t._v(" 对象头（Header）")]),t._v(" "),a("p",[t._v("对象头主要包含了两部分，分别是运行时元数据（Mark Word）和类型指针（Type Pointer），注意如果创建的对象是数组，那么还需要记录数组的长度。")]),t._v(" "),a("h4",{attrs:{id:"运行时元数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时元数据"}},[t._v("#")]),t._v(" 运行时元数据")]),t._v(" "),a("ul",[a("li",[t._v("哈希值（HashCode）")]),t._v(" "),a("li",[t._v("GC分代年龄")]),t._v(" "),a("li",[t._v("锁状态标志")]),t._v(" "),a("li",[t._v("线程持有的锁")]),t._v(" "),a("li",[t._v("偏向线程ID")]),t._v(" "),a("li",[t._v("翩向时间戳")])]),t._v(" "),a("h4",{attrs:{id:"类型指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型指针"}},[t._v("#")]),t._v(" 类型指针")]),t._v(" "),a("p",[t._v("指向类元数据（InstanceClass）的指针，用于确定该对象所属的类型。")]),t._v(" "),a("h3",{attrs:{id:"实例数据-instance-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例数据-instance-data"}},[t._v("#")]),t._v(" 实例数据（Instance Data）")]),t._v(" "),a("p",[t._v("它是对象真正存储的有效信息，包括程序代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段）：")]),t._v(" "),a("ul",[a("li",[t._v("相同宽度的字段总是被分配在一起")]),t._v(" "),a("li",[t._v("父类中定义的变量会出现在子类之前")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("CompactFields")]),t._v("参数为"),a("code",[t._v("true")]),t._v("（默认为true）：子类的窄变量可能插入到父类变量的空隙。")])]),t._v(" "),a("h3",{attrs:{id:"对齐填充-padding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对齐填充-padding"}},[t._v("#")]),t._v(" 对齐填充（Padding）")]),t._v(" "),a("p",[t._v("不是必须的，也没有特别的含义，仅仅起到占位符的作用。")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Account")]),t._v(" acct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"匿名客户"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        acct "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CustomerTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Customer")]),t._v(" cust"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_4.png",alt:"new_object_4"}})]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_5.png",alt:"new_object_5"}})]),t._v(" "),a("h2",{attrs:{id:"对象访问定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象访问定位"}},[t._v("#")]),t._v(" 对象访问定位")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_6.png",alt:"new_object_6"}})]),t._v(" "),a("p",[t._v("JVM是如何通过栈帧中的对象引用访问到其内部的对象实例呢？主要有两种方式：")]),t._v(" "),a("ul",[a("li",[t._v("句柄访问")]),t._v(" "),a("li",[t._v("直接指针")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_7.png",alt:"new_object_7"}})]),t._v(" "),a("h3",{attrs:{id:"句柄访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#句柄访问"}},[t._v("#")]),t._v(" 句柄访问")]),t._v(" "),a("p",[t._v("句柄访问指reference中稳定存储句柄的地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_8.png",alt:"new_object_8"}})]),t._v(" "),a("h3",{attrs:{id:"直接指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接指针"}},[t._v("#")]),t._v(" 直接指针")]),t._v(" "),a("p",[t._v("直接指针（又称直接引用）指局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据。")]),t._v(" "),a("p",[t._v("HotSpot VM 采用的是直接指针的方式。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/new_object_9.png",alt:"new_object_9"}})]),t._v(" "),a("h2",{attrs:{id:"常见面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见面试题"}},[t._v("#")]),t._v(" 常见面试题")]),t._v(" "),a("p",[t._v("美团：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("对象在JVM中是怎么存储的？")]),t._v(" "),a("p",[t._v("创建的对象存储在堆中，对象的内存主要划分为对象头、实例数据、对齐填充。")])]),t._v(" "),a("li",[a("p",[t._v("对象头信息里面有哪些东西？")]),t._v(" "),a("p",[t._v("对象头信息里面主要包含运行时元数据和类型指针，其中运行时元数据包含对象的hashCode、GC分代年龄、锁相关状态等。")])])]),t._v(" "),a("p",[t._v("蚂蚁金服：")]),t._v(" "),a("ul",[a("li",[t._v("Java对象头有什么？")])])])}),[],!1,null,null,null);s.default=e.exports}}]);