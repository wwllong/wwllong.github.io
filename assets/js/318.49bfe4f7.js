(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{983:function(t,r,e){"use strict";e.r(r);var i=e(58),a=Object(i.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"spring-cloud-netflix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-netflix"}},[t._v("#")]),t._v(" Spring Cloud Netflix")]),t._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("p",[t._v("Spring Cloud 是一个相对比较新的微服务框架，2016 才推出 1.0 的 Release 版本. 但是其更新特别快，几乎每 1-2 个月就有一次更新，虽然 Spring Cloud 时间最短, 但是相比 Dubbo 等 RPC 框架, Spring Cloud 提供的全套的分布式系统解决方案。")]),t._v(" "),e("p",[t._v("Spring Cloud 为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线）。分布式系统的协调导致了样板模式, 使用 Spring Cloud 开发人员可以快速地支持实现这些模式的服务和应用程序。他们将在任何分布式环境中运行良好，包括开发人员自己的笔记本电脑，裸机数据中心，以及 Cloud Foundry 等托管平台。")]),t._v(" "),e("p",[e("strong",[t._v("Spring Boot + Spring Cloud Netflix 是第一套微服务架构解决方案")]),t._v("。目前业界对 Spring Cloud 使用较为广泛。但随着项目宣布进入维护期(2018 年 12 月 12 日，Netflix 宣布 Spring Cloud Netflix 系列技术栈进入维护模式（不再添加新特性）)，意味着它再也没有新功能了；目前替代方案是"),e("strong",[t._v("Spring Cloud Alibaba")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"spring-cloud-netflix-项目进入维护模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-netflix-项目进入维护模式"}},[t._v("#")]),t._v(" Spring Cloud Netflix 项目进入维护模式")]),t._v(" "),e("p",[t._v("近日，Netflix"),e("a",{attrs:{href:"https://github.com/Netflix/Hystrix#hystrix-status",target:"_blank",rel:"noopener noreferrer"}},[t._v("宣布"),e("OutboundLink")],1),t._v("Hystrix 进入维护模式。Ribbon自 2016 年以来一直处于"),e("a",{attrs:{href:"https://github.com/Netflix/ribbon#project-status-on-maintenance",target:"_blank",rel:"noopener noreferrer"}},[t._v("类似状态"),e("OutboundLink")],1),t._v("。 虽然 Hystrix 和 Ribbon 现在处于维护模式，但它们仍然在 Netflix 大规模部署。")]),t._v(" "),e("p",[e("code",[t._v("Hystrix Dashboard")]),t._v(" 和 "),e("code",[t._v("Turbine")]),t._v(" 已被 "),e("strong",[t._v("Atlas")]),t._v(" 取代。这些项目的最后一次提交分别是 2 年前和 4 年前。"),e("code",[t._v("Zuul1")]),t._v(" 和 "),e("code",[t._v("Archaius1")]),t._v(" 都被后来不兼容的版本所取代。")]),t._v(" "),e("p",[t._v("以下 Spring Cloud Netflix 模块和相应的 Starter 将进入维护模式：")]),t._v(" "),e("ul",[e("li",[t._v("spring-cloud-netflix-archaius")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-hystrix-contract")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-hystrix-dashboard")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-hystrix-stream")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-hystrix")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-ribbon")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-turbine-stream")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-turbine")]),t._v(" "),e("li",[t._v("spring-cloud-netflix-zuul")])]),t._v(" "),e("p",[t._v("这并不包括Eureka或concurrency-limits模块。")]),t._v(" "),e("h2",{attrs:{id:"什么是维护模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是维护模式"}},[t._v("#")]),t._v(" 什么是维护模式")]),t._v(" "),e("p",[t._v("将模块置于维护模式，意味着Spring Cloud团队将不再向模块添加新特性。我们将修复拦截器漏洞和安全问题，我们也将考虑和审查来自社区的小型 pull request。")]),t._v(" "),e("p",[t._v("我们打算继续支持这些模块至少一年的时间，从发布"),e("a",{attrs:{href:"https://github.com/spring-cloud/spring-cloud-release/milestones?direction=asc&sort=due_date",target:"_blank",rel:"noopener noreferrer"}},[t._v("Greenwich release train"),e("OutboundLink")],1),t._v("系列的普遍可用性开始。")]),t._v(" "),e("h2",{attrs:{id:"替代品"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#替代品"}},[t._v("#")]),t._v(" 替代品")]),t._v(" "),e("p",[t._v("我们建议使用以下功能替换这些模块提供的功能。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("CURRENT")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("REPLACEMENT")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Hystrix")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Resilience4j")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Hystrix Dashboard / Turbine")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Micrometer + Monitoring System")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Ribbon")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Spring Cloud Loadbalancer")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Zuul 1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Spring Cloud Gateway")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("Archaius 1")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("Spring Boot external config + Spring Cloud Config")])])])]),t._v(" "),e("p",[t._v("未来会有一篇关于Spring Cloud Loadbalancer以及与Netflix新项目Concurrency Limits集成的博文。")]),t._v(" "),e("p",[t._v("相关模块的介绍：")]),t._v(" "),e("h3",{attrs:{id:"netflix-concurrency-limits"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#netflix-concurrency-limits"}},[t._v("#")]),t._v(" Netflix Concurrency Limits")]),t._v(" "),e("p",[t._v("并发限制模块，它是 Netflix 开源的限流器项目，Spring Cloud 在 Greenwich 版本中引入 spring-cloud-netflix-concurrency-limits")]),t._v(" "),e("h3",{attrs:{id:"archaius-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#archaius-1"}},[t._v("#")]),t._v(" Archaius 1")]),t._v(" "),e("p",[t._v("有些人对它可能比较陌生，也是 Netflix 公司开源项目，基于 Java 的配置管理类库（apache common configuration 类库的扩展），主要用于多配置存储的动态获取。它主要的特性：")]),t._v(" "),e("ul",[e("li",[t._v("动态类型化属性")]),t._v(" "),e("li",[t._v("高效和线程安全的配置操作")]),t._v(" "),e("li",[t._v("配置改变时的回调机制")]),t._v(" "),e("li",[t._v("轮询框架")]),t._v(" "),e("li",[t._v("JMX，通过Jconsole检查和调用操作属性")]),t._v(" "),e("li",[t._v("组合配置")])]),t._v(" "),e("h3",{attrs:{id:"resilience4j"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resilience4j"}},[t._v("#")]),t._v(" Resilience4j")]),t._v(" "),e("p",[t._v("目前还中孵化中，Spring 可能是要抽象一个断路器的统一规范，让不同的断路器（Hystrix、Resilience4j、"),e("strong",[t._v("Sentinel（阿里开源）")]),t._v("）选择使用")]),t._v(" "),e("h4",{attrs:{id:"micrometer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#micrometer"}},[t._v("#")]),t._v(" Micrometer")]),t._v(" "),e("p",[t._v("Spring Boot 2 中的 Spring Boot Actuator 底层用的就是 Micrometer，它是 "),e("strong",[t._v("Pivotal")]),t._v(" 公司（也就是 Spring 所在的公司）开源的监控门面，类似于监控世界的 Slf4j。"),e("strong",[t._v("Resilience4j 自带整合了 Micrometer")]),t._v("；目前还无法判断是否比 Hystrix Dashboard /Turbine 的更强大，更好用。")]),t._v(" "),e("h3",{attrs:{id:"spring-cloud-loadbalancer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-loadbalancer"}},[t._v("#")]),t._v(" Spring Cloud Loadbalancer")]),t._v(" "),e("p",[t._v("目前还中孵化中，使用上和 Ribbon 区别不大")]),t._v(" "),e("h3",{attrs:{id:"spring-cloud-gateway"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gateway"}},[t._v("#")]),t._v(" Spring Cloud Gateway")]),t._v(" "),e("p",[t._v("Zuul 持续跳票 1 年多，1.x 是一个基于阻塞 IO 的 API Gateway 以及 Servlet；直到 2018 年 5 月，Zuul 2.x（基于 Netty，也是非阻塞的，支持长连接）才发布，但 Spring Cloud 暂时还没有整合计划。Spring Cloud Gateway 比 Zuul 1.x 系列的性能和功能整体要好。")]),t._v(" "),e("h3",{attrs:{id:"spring-boot-external-config-spring-cloud-config"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-external-config-spring-cloud-config"}},[t._v("#")]),t._v(" Spring Boot external config + Spring Cloud Config")]),t._v(" "),e("p",[t._v("Netflix 开源的组件（Archaius 1/Ribbon/Hystrix）都没有使用 Spring Boot 的规范（spring-boot-configuration-processor），根本没有 metadata.json 文件，于是这部分配置 IDE 无法给你提示")]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now",target:"_blank",rel:"noopener noreferrer"}},[t._v("【官方新闻】Spring Cloud Greenwich.RC1 available now"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=a.exports}}]);