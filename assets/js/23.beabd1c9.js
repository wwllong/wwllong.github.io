(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{435:function(t,s,a){t.exports=a.p+"assets/img/simple-factory.c34b0e42.png"},436:function(t,s,a){t.exports=a.p+"assets/img/method-factory.734ce5ca.png"},437:function(t,s,a){t.exports=a.p+"assets/img/abstract-factory.36c4217d.png"},729:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" 工厂模式")]),t._v(" "),n("h2",{attrs:{id:"什么是工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是工厂模式"}},[t._v("#")]),t._v(" 什么是工厂模式")]),t._v(" "),n("p",[t._v("专门定义一个类来负责创建其他类的实例，根据参数的不同创建不同类的实例，被创建的实例通常具有共同的父类，这个模式叫简单工厂模式（Simple Factory Pattern）。")]),t._v(" "),n("p",[t._v("简单工厂模式又称为静态工厂方法模式。之所以叫“静态”，是因为在很多语言（如Java、C++）中方法通常被定义成一个静态（static）方法，这样便可通过类名来直接调用方法。")]),t._v(" "),n("h2",{attrs:{id:"工厂模式的设计思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式的设计思想"}},[t._v("#")]),t._v(" 工厂模式的设计思想")]),t._v(" "),n("p",[t._v("工厂模式的核心思想是：在工厂模式中，用来创建对象的类叫工厂类，被创建的对象的类称为产品类。在创建对象的过程就如同一个工厂一样，我们加入不同的配料（条件、参数等），就会生产出不同的产品（对象），这就是程序设计中工厂模式的概念。")]),t._v(" "),n("h2",{attrs:{id:"从生活中领悟简单工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从生活中领悟简单工厂模式"}},[t._v("#")]),t._v(" 从生活中领悟简单工厂模式")]),t._v(" "),n("p",[t._v("以咖啡机制作咖啡为例，通过加入不同风味的咖啡豆产生不同口味咖啡（例如拿铁、摩卡等咖啡），咖啡机制作咖啡的过程如同一个工厂一样，加入不同的配料，就会生产不同的产品：")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 工厂模式 - 你要拿铁还是摩卡？")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" abc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ABCMeta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" abstractmethod\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引入ABCMeta和abstractmethod来定义抽象类和抽象方法")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Coffee")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("metaclass"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ABCMeta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""咖啡"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name\n\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@abstractmethod")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTaste")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LatteCoffee")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Coffee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""拿铁咖啡"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__init__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTaste")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"轻柔而香醇"')]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MochaCoffee")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Coffee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""摩卡咖啡"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__init__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTaste")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"丝滑与醇厚"')]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Coffeemaker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""咖啡机"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@staticmethod")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeCoffee")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coffeeBean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"通过staticmethod装饰器修饰来定义一个静态方法"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coffeeBean "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"拿铁咖啡豆"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            coffee "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LatteCoffee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"拿铁咖啡"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coffeeBean "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"摩卡咖啡豆"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            coffee "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" MochaCoffee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"摩卡咖啡"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" ValueError"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"不支持的参数：%s"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" coffeeBean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" coffee\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("testCoffeeMaker")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    latte "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Coffeemaker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("makeCoffee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"拿铁咖啡豆"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s已为您准备好了，口感：%s。请慢慢享用！"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("latte"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" latte"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getTaste"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    mocha "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Coffeemaker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("makeCoffee"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"摩卡咖啡豆"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s已为您准备好了，口感：%s。请慢慢享用！"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mocha"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mocha"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getTaste"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    testCoffeeMaker"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n拿铁咖啡已为您准备好了，口感：轻柔而香醇。请慢慢享用！\n摩卡咖啡已为您准备好了，口感：丝滑与醇厚。请慢慢享用！\n"""')]),t._v("\n")])])]),n("p",[t._v("示例中CoffeeMaker就是工厂类，LatteCoffee和MochaCoffee就是产品类，它们都有一个共同的抽象Coffee类。")]),t._v(" "),n("h2",{attrs:{id:"工厂模式-三姐妹-的框架模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式-三姐妹-的框架模型"}},[t._v("#")]),t._v(" 工厂模式（三姐妹）的框架模型")]),t._v(" "),n("p",[t._v("咖啡机示例只是工厂模式中简单工厂模式的范例，工厂模式有三种细分的版本（工厂模式三姐妹）：简单工厂模式（小妹妹）、工厂方法模式（妹妹）、抽象工厂模式（姐姐）。这三种模式可以理解为同一种编程思想的三个版本，从简单到高级不断升级。工厂方法模式是简单工厂模式的升级，抽象工厂模式又是工厂方法模式的升级！")]),t._v(" "),n("h3",{attrs:{id:"简单工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂模式"}},[t._v("#")]),t._v(" 简单工厂模式")]),t._v(" "),n("h4",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),n("blockquote",[n("p",[t._v("Define an interface for creating an object, it through the argument to decide which class to instantiate.")])]),t._v(" "),n("p",[t._v("定义一个创建对象（实例化对象）的接口，通过参数来决定创建哪个类的实例。")]),t._v(" "),n("h4",{attrs:{id:"类图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),n("p",[t._v("最简单的工厂模式，只有一个工厂类SimpleFactory，类中有一个静态的创建方法\n法createProduct，该方法根据参数传递过来的类型值（type）或名称（name）来创建具体的产品（子类）对象。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(435),alt:"简单工厂模式"}})]),t._v(" "),n("p",[t._v("SimpleFactory是工厂类，负责创建对象，如示例中的CoffeeMaker。Product是要创建的产品的抽象类，负责定义统一的接口，如示例中的Coffee。ProductA和ProductB是具体的产品类型，如示例中的LatteCaffe和MochaCoffee。")]),t._v(" "),n("h4",{attrs:{id:"优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),n("p",[t._v("简单工厂模式的优点：")]),t._v(" "),n("ol",[n("li",[t._v("实现简单、结构清晰。")]),t._v(" "),n("li",[t._v("抽象出一个专门的类来负责某类对象的创建，分割出创建的职责，不能直接创建具体的对象，要传入适当的参数才能创建对象。")]),t._v(" "),n("li",[t._v("使用者可以不关注具体对象的类名称，只需知道传入什么参数可以创建哪些需要的对象。")])]),t._v(" "),n("p",[t._v("简单工厂模式的缺点：")]),t._v(" "),n("ol",[n("li",[t._v("不易拓展，一旦添加新的产品类型，就不得不修改工厂的创建逻辑。"),n("strong",[t._v("不符合“开放封闭”原则")]),t._v("，如果要增加或删除一个产品类型，就要修改switch...case...（或if...else...）的判断代码。")]),t._v(" "),n("li",[t._v("当产品类型较多时，工厂的创建逻辑可能过于复杂，switch...case...（或if...else...）判断会变得非常多。一旦出错可能造成所有产品创建失败，不利于系统的维护。")])]),t._v(" "),n("h4",{attrs:{id:"应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),n("ol",[n("li",[t._v("产品具有明显的继承关系，且产品的类型不太多。")]),t._v(" "),n("li",[t._v("所有的产品具有相同的方法和类似的属性，使用者不关心具体的类型，只希望传入合适的参数能返回合适的对象。")])]),t._v(" "),n("p",[t._v("尽管简单工厂模式不符合“开放-封闭”原则，但因为它简单，所以仍然能在很多项目中看到它。")]),t._v(" "),n("h3",{attrs:{id:"工厂方法模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式"}},[t._v("#")]),t._v(" 工厂方法模式")]),t._v(" "),n("h4",{attrs:{id:"定义-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义-2"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),n("blockquote",[n("p",[t._v("Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.")])]),t._v(" "),n("p",[t._v("定义一个创建对象（实例化对象）的接口，让子类来决定创建哪个类的实例。工厂方法使一个类的实例化延迟到其子类。")]),t._v(" "),n("h4",{attrs:{id:"类图-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类图-2"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),n("p",[t._v("工厂方法模式是简单工厂模式的一个升级版本，为"),n("strong",[t._v("解决简单工厂模式不符合“开放-封闭”原则")]),t._v("的问题，"),n("strong",[t._v("对SimpleFactory进行了一个拆分，抽象出一个父类Factory，并增加多个子类分别负责创建不同的具体产品。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(436),alt:"工厂方法模式"}})]),t._v(" "),n("p",[t._v("如上所说，同简单工厂模式中不同的是SimpleFactory被拆分了，现在Factory是所有工厂的抽象类，负责定义统一的接口。进一步拆分出来的ProductAFactory和ProductBFactory是具体的工厂类，分别负责产品ProductA和ProductB的创建。")]),t._v(" "),n("h4",{attrs:{id:"优缺点-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),n("p",[t._v("工厂方法模式的优点：")]),t._v(" "),n("ol",[n("li",[t._v("解决了简单工厂模式不符合“开放-封闭”原则的问题，使程序更容易拓展。")]),t._v(" "),n("li",[t._v("实现简单。")])]),t._v(" "),n("p",[t._v("工厂方法模式的缺点：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("对于具有二级分类或多种分类的产品，工厂方法模式并不适用。")]),t._v(" "),n("p",[t._v("二级分类：如一个家电工厂，它可能同时生产冰箱、空调和洗衣机，那么冰箱、空调、洗衣机属于一级分类；而洗衣机又可分为高效型的和节能型的，高效型洗衣机和节能型洗衣机就属于二级分类。")]),t._v(" "),n("p",[t._v("多种分类：如我们有一个电子白板程序，可以绘制各种图形，那么画笔的绘制功能可以理解为一个工厂，而图形可以理解为一种产品；图形可以根据形状分为直线、矩形、椭圆等，也可以根据颜色分为红色图形、绿色图形、蓝色图形等。")])])]),t._v(" "),n("h4",{attrs:{id:"应用场景-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),n("ol",[n("li",[t._v("客户端不知道它所需要的对象的类。")]),t._v(" "),n("li",[t._v("工厂类希望通过其子类来决定创建建哪个具体类的对象。")])]),t._v(" "),n("p",[t._v("因为工厂方法模式简单且易拓展，因此在项目中也应用得非常广泛，在很多标准库和开源项目中都能看到它的影子。")]),t._v(" "),n("h4",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),n("h3",{attrs:{id:"抽象工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[t._v("#")]),t._v(" 抽象工厂模式")]),t._v(" "),n("h4",{attrs:{id:"定义-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义-3"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),n("blockquote",[n("p",[t._v("Provide an interface for creating families of related or dependent objects without specifying their concrete classes.")])]),t._v(" "),n("p",[t._v("提供一个创建一系列相关或相互依赖的对象的接口，而无须指定它们的具体类。")]),t._v(" "),n("h4",{attrs:{id:"类图-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类图-3"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),n("p",[t._v("不言而喻，抽象工厂模式是工厂方法模式的升级版本，"),n("strong",[t._v("用来解决具有二级分类产品的创建问题")]),t._v("。也就是说抽象工厂模式适用于有多个系列且每个系列有相同子分类的产品。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(437),alt:"抽象工厂模式"}})]),t._v(" "),n("p",[t._v("我们定义一个抽象的工厂类AbstractFactory，AbstractFactory中定义生产每个系列产品的方法；而两个具体的工厂实现类Factory1和Factory2分别生产子分类1的每一系列产品和子分类2的每一系列产品。")]),t._v(" "),n("p",[t._v("如之前提到的二级分类例子中的家电工厂，有冰箱、空调、洗衣机三个系列的产品，而每个系列都有相同的子分类，即高效型和节能型。注意，类图中没有标注的是：如果每个系列有很多相同的属性还可继续抽象出一个公共父类，即ProductA和ProductB还可以继续抽象出一个比如叫Product的父类，当然这需要根据实际应用场景而定，如果差别很大则没有必要。")]),t._v(" "),n("h4",{attrs:{id:"优缺点-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-3"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),n("p",[t._v("优点：")]),t._v(" "),n("ol",[n("li",[t._v("解决了具有二级分类的产品的创建。")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ol",[n("li",[t._v("如果产品的分类超过二级，如三级甚至更多级，抽象工厂模式将会变得非常臃肿。")]),t._v(" "),n("li",[t._v("不能解决产品有多种分类、多种组合的问题。")])]),t._v(" "),n("h4",{attrs:{id:"应用场景-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-3"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),n("ol",[n("li",[t._v("系统中有多于一个的产品族，而每次只使用其中某一产品族。")]),t._v(" "),n("li",[t._v("产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。")])]),t._v(" "),n("h3",{attrs:{id:"进一步思考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进一步思考"}},[t._v("#")]),t._v(" 进一步思考")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("如果产品出现三级甚至更多级分类怎么办？")])]),t._v(" "),n("p",[t._v("如果程序中出现了三级分类的对象，就需要重新审视一下你的设计，看一下有些类是不是可以进行归纳、抽象合并。*如果实际的应用场景中确实有三级甚至更多级分类，建议你不要使用工厂模式了，直接交给每一个具体的产品类自己去创建吧！*因为超过三级（含三级）以上分类，会使工厂类变得非常臃肿而难以维护，开发成本也会急剧增加。模式是死的，人是活的，不要为了使用设计模式而使用设计模式！")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("如果产品有多种分类、多种组合怎么办？")])]),t._v(" "),n("p",[t._v("如果产品有多种分类，就不能单独使用工厂模式了，需要结合其他的设计模式进行优化。如接下来准备描述的实战：白板程序，既有形状的分类又有颜色的分类，就可以结合桥接模式一起使用，用桥接模式来定义产品，再用工厂模式来创建产品。")])])]),t._v(" "),n("h2",{attrs:{id:"实战应用-简单工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战应用-简单工厂模式"}},[t._v("#")]),t._v(" 实战应用-简单工厂模式")]),t._v(" "),n("p",[t._v("基于经典的简单工厂模式，可以进行一些延伸和拓展。一般的简单工厂模式中我们可以创建任意多个对象，但在一些特定场景下，我们可能希望每一个具体的类型只能创建一个对象（单例的思想），这就需要对工厂类的实现方式做一些修改。")]),t._v(" "),n("p",[t._v("比如，在众多的在线教育产品和视频教学产品中都会有一个白板功能（用电子白板来模拟线下的黑板功能），白板功能中需要不同类型的画笔，比如直线、矩形、椭圆等，但在一个白板中我们只需要一支画笔。可对简单工厂模式进行一些修改以满足这种需求，具体的实现代码如下：")]),t._v(" "),n("div",{staticClass:"language-python extra-class"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 简单工厂模式 - 白板中画笔的创建")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" abc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" ABCMeta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" abstractmethod\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" enum "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Enum\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Python3.4 之后支持枚举Enum的语法")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PenType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Enum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""画笔类型"""')]),t._v("\n    PenTypeLine "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    PenTypeRect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    PenTypeEllipse "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("metaclass"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ABCMeta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""画笔"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@abstractmethod")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__name\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinePen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""直线画笔"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__init__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeLine\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RectanglePen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""矩形画笔"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__init__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeRect\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EllipsePen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Pen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""椭圆画笔"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__init__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeEllipse\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PenFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""画笔工厂类"""')]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"定义一个字典(key:PenType，value：Pen)来存放对象,确保每一个类型只会有一个对象"')]),t._v("\n        self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__pens "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingleObj")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" penType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""获得唯一实例的对象"""')]),t._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" penType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""创建画笔"""')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__pens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("penType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果该对象不存在，则创建一个对象并存到字典中")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" penType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeLine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                pen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LinePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"直线画笔"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" penType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeRect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                pen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" RectanglePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"矩形画笔"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" penType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeEllipse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                pen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" EllipsePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"椭圆画笔"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                pen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Pen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__pens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("penType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pen\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 否则直接返回字典中的对象")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__pens"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("penType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("testPenFactory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    factory "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PenFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    linePen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" factory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("createPen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeLine"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"创建了 %s，对象id：%s， 类型：%s"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("linePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("linePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" linePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    rectPen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" factory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("createPen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeRect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"创建了 %s，对象id：%s， 类型：%s"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rectPen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rectPen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rectPen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    rectPen2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" factory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("createPen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeRect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"创建了 %s，对象id：%s， 类型：%s"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rectPen2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rectPen2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rectPen2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ellipsePen "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" factory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("createPen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PenType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PenTypeEllipse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"创建了 %s，对象id：%s， 类型：%s"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ellipsePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ellipsePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ellipsePen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'__main__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    testPenFactory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n创建了 直线画笔，对象id：1545750336464， 类型：PenType.PenTypeLine\n创建了 矩形画笔，对象id：1545750336608， 类型：PenType.PenTypeRect\n创建了 矩形画笔，对象id：1545750336608， 类型：PenType.PenTypeRect\n创建了 椭圆画笔，对象id：1545750336704， 类型：PenType.PenTypeEllipse\n"""')]),t._v("\n")])])]),n("p",[t._v("示例中，虽然创建了矩形画笔的对象，但这两个变量指向的是同一个对象。这说明通过这种方式我们实现了每一个类型只创建一个对象的功能。")]),t._v(" "),n("blockquote",[n("p",[t._v("摘自： 罗伟富. 《人人都懂设计模式：从生活中领悟设计模式：Python实现》. 电子工业出版社")])])])}),[],!1,null,null,null);s.default=e.exports}}]);