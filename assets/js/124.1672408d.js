(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{760:function(r,t,_){"use strict";_.r(t);var e=_(58),v=Object(e.a)({},(function(){var r=this,t=r.$createElement,_=r._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[_("h1",{attrs:{id:"docker镜像和容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像和容器"}},[r._v("#")]),r._v(" Docker镜像和容器")]),r._v(" "),_("p",[r._v("我们知道容器与镜像的关系类似于面向对象编程中的对象与类，Docker 容器通过 Docker 镜像来创建。那么他们实际上用了什么技术呢？这里大概说说两者的“实质”。")]),r._v(" "),_("h2",{attrs:{id:"docker镜像"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像"}},[r._v("#")]),r._v(" Docker镜像")]),r._v(" "),_("h3",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[r._v("#")]),r._v(" 概述")]),r._v(" "),_("p",[r._v("操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 "),_("code",[r._v("root")]),r._v(" 文件系统为其提供用户空间支持。而 "),_("strong",[r._v("Docker 镜像（Image），就相当于是一个 "),_("code",[r._v("root")]),r._v(" 文件系统")]),r._v("。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu 16.04 最小系统的 "),_("code",[r._v("root")]),r._v(" 文件系统。")]),r._v(" "),_("p",[_("strong",[r._v("Docker 镜像是一个特殊的文件系统")]),r._v("，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。"),_("strong",[r._v("镜像不包含任何动态数据，其内容在构建之后也不会被改变")]),r._v("。")]),r._v(" "),_("h3",{attrs:{id:"分层存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分层存储"}},[r._v("#")]),r._v(" 分层存储")]),r._v(" "),_("p",[r._v("因为镜像包含操作系统完整的 "),_("code",[r._v("root")]),r._v(" 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 "),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"}},[r._v("Union FS"),_("OutboundLink")],1),r._v(" 的技术，将其设计为"),_("strong",[r._v("分层存储的架构")]),r._v("。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是"),_("strong",[r._v("由一组文件系统组成，或者说，由多层文件系统联合组成")]),r._v("。")]),r._v(" "),_("p",[_("strong",[r._v("镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层")]),r._v("。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，"),_("strong",[r._v("在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉")]),r._v("。")]),r._v(" "),_("p",[_("strong",[r._v("分层存储的特征还使得镜像的复用、定制变的更为容易")]),r._v("。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。")]),r._v(" "),_("p",[r._v("构建的镜像可以发布到仓库中，供别人使用。")]),r._v(" "),_("h2",{attrs:{id:"docker容器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#docker容器"}},[r._v("#")]),r._v(" Docker容器")]),r._v(" "),_("h3",{attrs:{id:"概述-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[r._v("#")]),r._v(" 概述")]),r._v(" "),_("p",[r._v("镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等等。")]),r._v(" "),_("h3",{attrs:{id:"容器进程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#容器进程"}},[r._v("#")]),r._v(" 容器进程")]),r._v(" "),_("p",[_("strong",[r._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的"),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linux_namespaces",target:"_blank",rel:"noopener noreferrer"}},[r._v("命名空间"),_("OutboundLink")],1)]),r._v("。因此容器可以拥有自己的 "),_("code",[r._v("root")]),r._v(" 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。而容器内的进程是运行在一个隔离的环境里，所以使用起来就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),r._v(" "),_("p",[r._v("前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为"),_("strong",[r._v("容器存储层")]),r._v("。")]),r._v(" "),_("p",[r._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，"),_("strong",[r._v("任何保存于容器存储层的信息都会随容器删除而丢失")]),r._v("。")]),r._v(" "),_("p",[r._v("按照 Docker 最佳实践的要求，"),_("strong",[r._v("容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化")]),r._v("。"),_("strong",[r._v("所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录")]),r._v("，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。")]),r._v(" "),_("p",[_("strong",[r._v("数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡")]),r._v("。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。")])])}),[],!1,null,null,null);t.default=v.exports}}]);