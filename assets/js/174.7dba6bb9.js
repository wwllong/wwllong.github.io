(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{822:function(t,a,s){"use strict";s.r(a);var n=s(58),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[t._v("#")]),t._v(" 堆")]),t._v(" "),s("p",[t._v("堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_1.png",alt:"heap_1.png"}})]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。Java堆区在JVM启动的时候即被创建，其空间大小也就确定了，可以说是JVM管理的最大一块内存空间，"),s("strong",[t._v("堆内存的大小是可以调节的")]),t._v("。")]),t._v(" "),s("p",[t._v("《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。")]),t._v(" "),s("blockquote",[s("p",[t._v("The heap is the run-time data area from which memory for all class instances and arrays is allocated.")])]),t._v(" "),s("p",[t._v("因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置，所以数组和对象可能永远不会存储在栈上，但是随着逃逸分析、GCIH等技术，堆可能不是存储对象和数组的唯一选择。")]),t._v(" "),s("p",[t._v("所有的线程共享Java堆，但在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。")]),t._v(" "),s("p",[s("strong",[t._v("堆是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域")]),t._v("。在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_2.png",alt:"heap_2.png"}})]),t._v(" "),s("h2",{attrs:{id:"堆空间分代思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆空间分代思想"}},[t._v("#")]),t._v(" 堆空间分代思想")]),t._v(" "),s("h3",{attrs:{id:"java-7-及之前"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-7-及之前"}},[t._v("#")]),t._v(" Java 7 及之前")]),t._v(" "),s("p",[t._v("Java 7及之前堆内存逻辑上分为三部分：新生代、老年代、永久代")]),t._v(" "),s("ul",[s("li",[t._v("Young Generation Space 新生代 Young/New 又被划分为Eden区和Survivor区")]),t._v(" "),s("li",[t._v("Tenure Generation Space 老年代 Old/Tenure")]),t._v(" "),s("li",[t._v("Permanent Space 永久代 Perm")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_3.png",alt:"heap_3.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_5.png",alt:"heap_5.png"}})]),t._v(" "),s("h3",{attrs:{id:"java-8-及之后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-8-及之后"}},[t._v("#")]),t._v(" Java 8 及之后")]),t._v(" "),s("p",[t._v("Java 8及之后堆内存逻辑上分为三部分：新生代、老年代、元空间")]),t._v(" "),s("ul",[s("li",[t._v("Young Generation Space 新生代 Young/New 又被划分为Eden区和Survivor区")]),t._v(" "),s("li",[t._v("Tenure Generation Space 老年代 Old/Tenure")]),t._v(" "),s("li",[t._v("Meta Space 元空间 Meta")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_4.png",alt:"heap_4.png"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_6.png",alt:"heap_6.png"}})]),t._v(" "),s("p",[t._v("PS：约定，新生代 <=> 新生区 <=> 年轻代 、 老年代 <=> 养老区 <=> 老年代、 永久代 <=> 永久区")]),t._v(" "),s("h3",{attrs:{id:"分代划分的原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分代划分的原因"}},[t._v("#")]),t._v(" 分代划分的原因")]),t._v(" "),s("p",[t._v("为什么要把Java堆分代？不分代就不能正常工作了吗？")]),t._v(" "),s("p",[t._v("经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。")]),t._v(" "),s("ul",[s("li",[t._v("新生代：有Eden、两块大小相同的survivor（又称为from/to或s0/s1）构成，"),s("strong",[t._v("to总为空")]),t._v("。")]),t._v(" "),s("li",[t._v("老年代：存放新生代中经历多次GC仍然存活的对象。")])]),t._v(" "),s("p",[t._v("其实不分代完全可以，"),s("strong",[t._v("分代的唯一理由就是优化GC性能")]),t._v("。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。")]),t._v(" "),s("h2",{attrs:{id:"设置堆大小与oom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置堆大小与oom"}},[t._v("#")]),t._v(" 设置堆大小与OOM")]),t._v(" "),s("h3",{attrs:{id:"堆空间大小的设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆空间大小的设置"}},[t._v("#")]),t._v(" 堆空间大小的设置")]),t._v(" "),s("p",[t._v("Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项"),s("code",[t._v("-Xmx")]),t._v("和"),s("code",[t._v("-Xms")]),t._v("来进行设置。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("-Xms")]),t._v("：设置堆区的起始内存，等价于"),s("code",[t._v("-XX:InitialHeapSize")])]),t._v(" "),s("li",[s("code",[t._v("-Xmx")]),t._v("：设置堆区的最大内存，等价于"),s("code",[t._v("-XX:MaxHeapSize")])])]),t._v(" "),s("p",[t._v("默认情况下，堆的内存设置如下：")]),t._v(" "),s("ul",[s("li",[t._v("初始内存大小：物理电脑内存大小 / 64")]),t._v(" "),s("li",[t._v("最大内存大小：物理电脑内存大小 / 4")])]),t._v(" "),s("p",[t._v('一旦堆区中的内存大小超过“-Xmx"所指定的最大内存时，将会抛出OutOfMemoryError异常。')]),t._v(" "),s("p",[t._v("通常会将"),s("code",[t._v("-Xms")]),t._v("和"),s("code",[t._v("-Xmx")]),t._v("两个参数配置相同的值，"),s("strong",[t._v("其目的是为了能够在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"oom举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oom举例"}},[t._v("#")]),t._v(" OOM举例")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OOMTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Picture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Picture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** \n* 运行结果\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" in thread "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("OutofMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Java")]),t._v(" heap space\n    at "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atguigu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Picture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("init"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OOMTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    at "),s("span",{pre:!0,attrs:{class:"token class-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("atguigu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("O0MTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OOMTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"年轻代与老年代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#年轻代与老年代"}},[t._v("#")]),t._v(" 年轻代与老年代")]),t._v(" "),s("p",[t._v("存储在JVM中的Java对象可以被划分为两类：")]),t._v(" "),s("ul",[s("li",[t._v("一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速")]),t._v(" "),s("li",[t._v("另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致")])]),t._v(" "),s("p",[t._v("那么根据对象的生命周期，Java堆区进一步细分的话，可以划分为"),s("strong",[t._v("年轻代（YoungGen）和老年代（oldGen）")]),t._v("，其中"),s("strong",[t._v("年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_7.png",alt:"heap_7.png"}})]),t._v(" "),s("h3",{attrs:{id:"划分比例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#划分比例"}},[t._v("#")]),t._v(" 划分比例")]),t._v(" "),s("p",[t._v("年轻代和老年代在堆中的占用比例，以及年轻代进一步划分的Eden、S0和S1在年轻代中的占用比例这些都是可以通过JVM参数调整的，除非在某些场景下，否则通常不会进行调整，直接使用默认值。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_8.png",alt:"heap_8.png"}})]),t._v(" "),s("p",[t._v("配置新生代与老年代在堆结构的占比：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("默认"),s("code",[t._v("-XX:NewRatio=2")]),t._v("，表示新生代占1，老年代占2，即新生代占整个堆的1/3")]),t._v("。")]),t._v(" "),s("li",[t._v("可以修改为"),s("code",[t._v("-XX:NewRatio=4")]),t._v("，则表示新生代占1，老年代占4，即新生代占整个堆的1/5。")])]),t._v(" "),s("p",[t._v("此外，还可以使用"),s("code",[t._v("-Xmn")]),t._v("设置新生代最大内存大小，这个参数一般使用默认值就可以了，这个配置的优先级比"),s("code",[t._v("-XX:NewRatio")]),t._v("高。")]),t._v(" "),s("p",[t._v("配置新生代中Eden、S0和S1结构占比：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("默认"),s("code",[t._v("-XX:SurvivorRatio=8")]),t._v(", 即在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是 8 ：1 ：1")]),t._v("。（Parallel垃圾收集器除外，具体原因见下文）")])]),t._v(" "),s("p",[t._v("几乎所有的Java对象都是在Eden区被new出来的，绝大部分的Java对象的销毁都在新生代进行了。")]),t._v(" "),s("blockquote",[s("p",[t._v("IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_9.png",alt:"heap_9.png"}})]),t._v(" "),s("h3",{attrs:{id:"parallel的自适应策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallel的自适应策略"}},[t._v("#")]),t._v(" Parallel的自适应策略")]),t._v(" "),s("p",[t._v("JDK 1.8 默认使用 Parallel 垃圾回收器，该垃圾回收器默认启动了 "),s("strong",[t._v("AdaptiveSizePolicy")]),t._v("（自适应策略），会根据GC的情况自动计算 Eden、From 和 To 区的大小；所以，不遵循"),s("code",[t._v("-XX:SurvivorRatio=8")]),t._v("的默认设定，而在没有显示指定的情况下它的值通常是6。")]),t._v(" "),s("p",[t._v("我们可以在JVM参数中配置"),s("code",[t._v("-XX:+/-UseAdaptiveSizePolicy")]),t._v("开启和关闭该配置。")]),t._v(" "),s("p",[s("strong",[t._v("注意事项")]),t._v("：")]),t._v(" "),s("ol",[s("li",[t._v("在 JDK 1.8 中，如果使用 CMS，无论 "),s("code",[t._v("UseAdaptiveSizePolicy")]),t._v(" 如何设置，都会将 UseAdaptiveSizePolicy 设置为 false；不过不同版本的JDK存在差异；")]),t._v(" "),s("li",[s("code",[t._v("-XX:+UseAdaptiveSizePolicy")]),t._v("不要和"),s("code",[t._v("SurvivorRatio")]),t._v("参数显示设置搭配使用，一起使用会导致参数失效；")]),t._v(" "),s("li",[t._v("由于"),s("code",[t._v("UseAdaptiveSizePolicy")]),t._v("会动态调整 Eden、Survivor 的大小，有些情况存在Survivor 被自动调为很小，比如十几MB甚至几MB的可能，这个时候YGC回收掉 Eden区后，还存活的对象进入Survivor 装不下，就会直接晋升到老年代，导致老年代占用空间逐渐增加，从而触发Full GC，如果一次Full GC的耗时很长（比如到达几百毫秒），那么在要求高响应的系统就是不可取的。 所以对于面向外部的大流量、低延迟的系统，建议关闭该参数。")])]),t._v(" "),s("p",[s("strong",[t._v("如果不想动态调整内存大小，以下是解决方案")]),t._v("：")]),t._v(" "),s("ol",[s("li",[t._v("保持使用 "),s("code",[t._v("-XX:+UseParallelGC")]),t._v("，显式设置 "),s("code",[t._v("-XX:SurvivorRatio=8")]),t._v("。")]),t._v(" "),s("li",[t._v("使用 CMS 垃圾回收器。CMS 默认关闭 "),s("code",[t._v("AdaptiveSizePolicy")]),t._v("。配置参数"),s("code",[t._v("-XX:+UseConcMarkSweepGC")])])]),t._v(" "),s("h2",{attrs:{id:"图解对象分配过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图解对象分配过程"}},[t._v("#")]),t._v(" 图解对象分配过程")]),t._v(" "),s("p",[t._v("为新对象分配内存是一件非常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。")]),t._v(" "),s("h3",{attrs:{id:"一般过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一般过程"}},[t._v("#")]),t._v(" 一般过程")]),t._v(" "),s("ol",[s("li",[t._v("new的对象先放伊甸园区。此区有大小限制。")]),t._v(" "),s("li",[t._v("当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区")]),t._v(" "),s("li",[t._v("然后将伊甸园中的剩余对象移动到幸存者0区。")]),t._v(" "),s("li",[t._v("如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。")]),t._v(" "),s("li",[t._v("如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。")]),t._v(" "),s("li",[t._v("啥时候能去养老区呢？可以设置次数，"),s("strong",[t._v("默认是15次")]),t._v("。")])]),t._v(" "),s("ul",[s("li",[t._v("可以设置参数：进行设置"),s("code",[t._v("-Xx:MaxTenuringThreshold=N")])])]),t._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[t._v("在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理")]),t._v(" "),s("li",[t._v("若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常（java.lang.OutofMemoryError: Java heap space）。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_10.jpeg",alt:"heap_10.png"}})]),t._v(" "),s("h3",{attrs:{id:"较详细流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#较详细流程"}},[t._v("#")]),t._v(" 较详细流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_11.png",alt:"heap_11.png"}})]),t._v(" "),s("p",[s("strong",[t._v("总结")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to。")])]),t._v(" "),s("li",[s("strong",[t._v("关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"minorgc、majorgc和fullgc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minorgc、majorgc和fullgc"}},[t._v("#")]),t._v(" MinorGC、MajorGC和FullGC")]),t._v(" "),s("p",[t._v("JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。")]),t._v(" "),s("p",[t._v("针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("部分收集")]),t._v("：不是完整收集整个Java堆的垃圾收集。其中又分为：\n"),s("ul",[s("li",[t._v("新生代收集（Minor GC / Young GC）：只是新生代的垃圾收集")]),t._v(" "),s("li",[t._v("老年代收集（Major GC / Old GC）：只是老年代的圾收集。\n■ "),s("strong",[t._v("目前，只有CMS GC会有单独收集老年代的行为")]),t._v("。\n"),s("ul",[s("li",[s("strong",[t._v("注意，很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收")]),t._v("。")])])]),t._v(" "),s("li",[t._v("混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n■ 目前，只有G1 GC会有这种行为")])])]),t._v(" "),s("li",[s("strong",[t._v("整堆收集（Full GC）")]),t._v("：收集整个java堆和方法区的垃圾收集。")])]),t._v(" "),s("h3",{attrs:{id:"年轻代gc-minor-gc-触发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#年轻代gc-minor-gc-触发机制"}},[t._v("#")]),t._v(" 年轻代GC（Minor GC）触发机制")]),t._v(" "),s("p",[s("strong",[t._v("当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC")]),t._v("（每次Minor GC会清理年轻代的内存，Survivor的GC是被动的）。 因为Java对象大多都具备朝生夕灭的特性.，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。 Minor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_12.png",alt:"heap_12.png"}})]),t._v(" "),s("h3",{attrs:{id:"老年代gc-major-gc-full-gc-触发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#老年代gc-major-gc-full-gc-触发机制"}},[t._v("#")]),t._v(" 老年代GC（Major GC / Full GC）触发机制")]),t._v(" "),s("p",[t._v("对象从老年代消失时，我们说 “Major GC” 或 “Full GC” 发生了 。出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程） ，也就是说在老年代空间不足时，会先尝试触发Minor GC，如果之后空间还不足，则触发Major GC")]),t._v(" "),s("p",[s("strong",[t._v("Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长 。")])]),t._v(" "),s("p",[t._v("如果Major GC后，内存还不足，就报OOM了")]),t._v(" "),s("h3",{attrs:{id:"full-gc触发机制-后面细讲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-gc触发机制-后面细讲"}},[t._v("#")]),t._v(" Full GC触发机制（后面细讲）")]),t._v(" "),s("p",[t._v("触发Full GC执行的情况有如下五种：")]),t._v(" "),s("ol",[s("li",[t._v("调用System.gc()时，系统建议执行Full GC，但是不必然执行")]),t._v(" "),s("li",[t._v("老年代空间不足\n"),s("ul",[s("li",[t._v("通过Minor GC后进入老年代的平均大小大于老年代的可用内存")]),t._v(" "),s("li",[t._v("由Eden区、survivor space0（From Space）区向survivor space1（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小")])])]),t._v(" "),s("li",[t._v("方法区空间不足")])]),t._v(" "),s("p",[t._v("说明："),s("strong",[t._v("Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"堆内存分配策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆内存分配策略"}},[t._v("#")]),t._v(" 堆内存分配策略")]),t._v(" "),s("h3",{attrs:{id:"一般分配策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一般分配策略"}},[t._v("#")]),t._v(" 一般分配策略")]),t._v(" "),s("p",[t._v("如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并将对象年龄设为1。对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（"),s("strong",[t._v("默认为15岁")]),t._v("，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代。")]),t._v(" "),s("p",[t._v("对象晋升老年代的年龄阀值，可以通过选项"),s("code",[t._v("-XX:MaxTenuringThreshold")]),t._v("来设置。")]),t._v(" "),s("p",[t._v("针对不同年龄段的对象分配原则如下所示：")]),t._v(" "),s("ul",[s("li",[t._v("优先分配到Eden")]),t._v(" "),s("li",[t._v("大对象直接分配到老年代（尽量避免程序中出现过多的大对象）")]),t._v(" "),s("li",[t._v("长期存活的对象分配到老年代")]),t._v(" "),s("li",[t._v("动态对象年龄判断："),s("strong",[t._v("如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到"),s("code",[t._v("MaxTenuringThreshold")]),t._v("中要求的年龄")]),t._v("。")]),t._v(" "),s("li",[t._v("空间分配担保："),s("code",[t._v("-XX:HandlePromotionFailure")])])]),t._v(" "),s("p",[t._v("空间分配担保："),s("strong",[t._v("在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("如果大于，则此次Minor GC是安全的")]),t._v(" "),s("li",[t._v("如果小于，则虚拟机会查看``-XX:HandlePromotionFailure`设置值是否允担保失败。\n"),s("ul",[s("li",[t._v("如果"),s("code",[t._v("HandlePromotionFailure=true")]),t._v("，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。\n"),s("ul",[s("li",[t._v("如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；")]),t._v(" "),s("li",[t._v("如果小于，则改为进行一次Full GC。")])])]),t._v(" "),s("li",[t._v("如果"),s("code",[t._v("HandlePromotionFailure=false")]),t._v("，则改为进行一次Full Gc。")])])])]),t._v(" "),s("p",[t._v("在JDK6 Update24( JDK 7)之后，"),s("code",[t._v("HandlePromotionFailure")]),t._v("参数不会再影响到虚拟机的空间分配担保策略，观察OpenJDK中的源码变化，虽然源码中还定义了"),s("code",[t._v("HandlePromotionFailure")]),t._v("参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为"),s("strong",[t._v("只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行Full GC")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"快速分配策略-tlab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速分配策略-tlab"}},[t._v("#")]),t._v(" 快速分配策略：TLAB")]),t._v(" "),s("p",[t._v("我们知道堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据。由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的，为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。引入了TLAB的技术。")]),t._v(" "),s("p",[t._v("TLAB（Thread Local Allocation Buffer），本地线程分配缓存。从内存模型而不是垃圾收集的角度，"),s("strong",[t._v("对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域")]),t._v("，它包含在Eden空间内。 多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为"),s("strong",[t._v("快速分配策略")]),t._v("。 据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_13.png",alt:"heap_13.png"}})]),t._v(" "),s("p",[t._v("尽管不是所有的对象实例都能够在TLAB中成功分配内存，但"),s("strong",[t._v("JVM确实是将TLAB作为内存分配的首选")]),t._v("。一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。")]),t._v(" "),s("ul",[s("li",[t._v("在程序中，开发人员可以通过选项"),s("code",[t._v("-XX:UseTLAB")]),t._v("设置是否开启TLAB空间。")]),t._v(" "),s("li",[t._v("默认情况下，"),s("strong",[t._v("TLAB空间的内存非常小，仅占有整个Eden空间的1%")]),t._v("，当然我们可以通过选项 "),s("code",[t._v("-XX:TLABWasteTargetPercent")]),t._v("设置TLAB空间所占用Eden空间的百分比大小。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/heap_14.png",alt:"heap_14.png"}})]),t._v(" "),s("h2",{attrs:{id:"常用虚拟机参数和调优工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用虚拟机参数和调优工具"}},[t._v("#")]),t._v(" 常用虚拟机参数和调优工具")]),t._v(" "),s("h3",{attrs:{id:"堆常用虚拟机参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆常用虚拟机参数"}},[t._v("#")]),t._v(" 堆常用虚拟机参数")]),t._v(" "),s("p",[t._v("官网地址：https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html")]),t._v(" "),s("p",[t._v("详细的参数内容会在JVM下篇：性能监控与调优篇中进行详细介绍，这里先熟悉下。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("参数")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-XX:+PrintFlagsInitial")]),t._v(" "),s("td",[t._v("查看所有的参数的默认初始值")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+PrintFlagsFinal")]),t._v(" "),s("td",[t._v("查看所有的参数的最终值（可能会存在修改，不再是初始值）")])]),t._v(" "),s("tr",[s("td",[t._v("-Xms")]),t._v(" "),s("td",[t._v("初始堆空间内存（默认为物理内存的1/64）")])]),t._v(" "),s("tr",[s("td",[t._v("-Xmx")]),t._v(" "),s("td",[t._v("设置堆区的最大内存（默认为物理电脑内存大小 / 4）")])]),t._v(" "),s("tr",[s("td",[t._v("-Xmn")]),t._v(" "),s("td",[t._v("设置新生代的大小。（初始值及最大值）")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:NewRatio")]),t._v(" "),s("td",[t._v("配置新生代与老年代在堆结构的占比（默认2）")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:SurvivorRatio")]),t._v(" "),s("td",[t._v("设置新生代中Eden和S0/S1空间的比例（默认8，实际6）")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:MaxTenuringThreshold")]),t._v(" "),s("td",[t._v("设置新生代垃圾的最大年龄")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+PrintGCDetails")]),t._v(" "),s("td",[t._v("输出详细的GC处理日志")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+PrintGC")]),t._v(" "),s("td",[t._v("打印gc简要信息。PS：- verbose:gc")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:HandlePromotionFalilure：")]),t._v(" "),s("td",[t._v("是否设置空间分配担保")])])])]),t._v(" "),s("h3",{attrs:{id:"常用调优工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用调优工具"}},[t._v("#")]),t._v(" 常用调优工具")]),t._v(" "),s("p",[t._v("常用调优工具（在JVM下篇：性能监控与调优篇会详细介绍）：JDK命令行、Eclipse:Memory Analyzer Tool、Jconsole、"),s("strong",[t._v("VisualVM")]),t._v("、"),s("strong",[t._v("Jprofiler")]),t._v("、Java Flight Recorder、GCViewer、GC Easy。")]),t._v(" "),s("h2",{attrs:{id:"堆是分配对象的唯一选择吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆是分配对象的唯一选择吗"}},[t._v("#")]),t._v(" 堆是分配对象的唯一选择吗?")]),t._v(" "),s("p",[t._v("在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：")]),t._v(" "),s("blockquote",[s("p",[t._v("随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。")])]),t._v(" "),s("p",[t._v("在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是有一种特殊情况，那就是如果经过"),s("strong",[t._v("逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配")]),t._v("。这样就无需在堆上分配内存，也无须进行垃圾回收了，这也是最常见的"),s("strong",[t._v("堆外存储技术")]),t._v("。")]),t._v(" "),s("p",[t._v("此外，前面提到的基于OpenJDK深度定制的TaoBao VM，其中创新的**GCIH（GC Invisible Heap）**技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。")]),t._v(" "),s("h3",{attrs:{id:"逃逸分析概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析概述"}},[t._v("#")]),t._v(" 逃逸分析概述")]),t._v(" "),s("p",[t._v("如何将堆上的对象分配到栈？这需要使用逃逸分析手段。"),s("strong",[t._v("这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法")]),t._v("。")]),t._v(" "),s("p",[t._v("通过逃逸分析，Java Hotspot编译器能够分析出"),s("strong",[t._v("一个新的对象的引用的使用范围")]),t._v("从而决定是否要将这个对象分配到堆上。")]),t._v(" "),s("p",[t._v("逃逸分析的基本行为就是"),s("strong",[t._v("分析对象动态作用域")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。")]),t._v(" "),s("li",[t._v("当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。")])]),t._v(" "),s("p",[s("strong",[t._v("没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除")]),t._v("，每个栈里面包含了很多栈帧。")]),t._v(" "),s("p",[t._v("没有发生逃逸的代码：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("my_method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use v")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ....")]),t._v("\n    v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("发生了逃逸的代码：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" sb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上述方法如果想要"),s("code",[t._v("StringBuffer sb")]),t._v("不发生逃逸，可以这样写：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" sb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("更详细的举例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 为成员属性赋值，发生逃逸\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 引用成员变量的值，发生逃逸\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEscapeAnalysis2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EscapeAnalysis")]),t._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"参数设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数设置"}},[t._v("#")]),t._v(" 参数设置")]),t._v(" "),s("p",[t._v("在JDK 6u23 版本之后，Hot Spot VM中默认开启了逃逸分析。如果使用的是较早的版本，开发人员则可以通过：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("-XX:+DoEscapeAnalysis")]),t._v("，显式开启逃逸分析")]),t._v(" "),s("li",[s("code",[t._v("-XX:+PrintEscapeAnalysis")]),t._v("，查看逃逸分析的筛选结果")])]),t._v(" "),s("p",[t._v("结论："),s("strong",[t._v("开发中能使用局部变量的，就不要使用在方法外定义")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"逃逸分析-代码优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析-代码优化"}},[t._v("#")]),t._v(" 逃逸分析：代码优化")]),t._v(" "),s("p",[t._v("使用逃逸分析，"),s("strong",[t._v("编译器")]),t._v("（后端编译器）可以对代码做如下优化：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("栈上分配")]),t._v("：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配。")]),t._v(" "),s("li",[s("strong",[t._v("同步省略")]),t._v("：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。")]),t._v(" "),s("li",[s("strong",[t._v("分离对象或标量替换")]),t._v("：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。（HotSpot VM的逃逸分析，主要是使用这种方式）")])]),t._v(" "),s("h4",{attrs:{id:"栈上分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈上分配"}},[t._v("#")]),t._v(" 栈上分配")]),t._v(" "),s("p",[t._v("JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收，这样就无须进行垃圾回收了。")]),t._v(" "),s("p",[t._v("常见的栈上分配的场景，分别是给成员变量赋值、方法返回值、实例引用传递（见上述代码）。")]),t._v(" "),s("h4",{attrs:{id:"同步省略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步省略"}},[t._v("#")]),t._v(" 同步省略")]),t._v(" "),s("p",[t._v("线程同步的代价是相当高的，同步的后果是降低并发性和性能。在动态编译同步块的时候，"),s("strong",[t._v("JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程，如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步")]),t._v("。这样就能大大提高并发性和性能，这个取消同步的过程就叫"),s("strong",[t._v("同步省略")]),t._v("，也叫"),s("strong",[t._v("锁消除")]),t._v("。")]),t._v(" "),s("p",[t._v("举例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" hellis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hellis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hellis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" hellis "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hellis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"标量替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标量替换"}},[t._v("#")]),t._v(" 标量替换")]),t._v(" "),s("p",[s("strong",[t._v("标量（Scalar）"),s("strong",[t._v("指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。相对的，那些还可以分解的数据叫做")]),t._v("聚合量（Aggregate）")]),t._v("，Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。")]),t._v(" "),s("p",[t._v("在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么"),s("strong",[t._v("经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替")]),t._v("，这个过程就是"),s("strong",[t._v("标量替换")]),t._v("。")]),t._v(" "),s("p",[t._v("举例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" point "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"point.x"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('";point.y"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("以上代码，经过标量替换后，就会变成:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"point.x = "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"; point.y="')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。标量替换可以大大减少堆内存的占用，不需要创建对象，也就不再需要分配堆内存了，"),s("strong",[t._v("标量替换为栈上分配提供了很好的基础")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("标量替换参数设置")])]),t._v(" "),s("p",[s("code",[t._v("-XX:EliminateAllocations")]),t._v("：开启标量替换（默认打开），允许将对象打散分配到栈上，需要JVM是server模式。")]),t._v(" "),s("p",[t._v("例如使用如下参数运行分析：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("server "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xmx100m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Xms100m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DoEscapeAnalysis")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintGC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EliminateAllocations")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* -server：启动Server模式，因为在server模式下，才可以启用逃逸分析。\n* -XX:+DoEscapeAnalysis：启用逃逸分析\n* -Xmx100m：指定了堆空间最大为100MB\n* -Xms100m：指定了堆空间最小为100MB\n* -XX:+PrintGC：打印Gc日志\n* -XX:+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上。\n*/")]),t._v("\n")])])]),s("h3",{attrs:{id:"小结-逃逸分析并不成熟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-逃逸分析并不成熟"}},[t._v("#")]),t._v(" 小结：逃逸分析并不成熟")]),t._v(" "),s("p",[t._v("关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟。其根本原因就是"),s("strong",[t._v("无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程")]),t._v("。 一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。")]),t._v(" "),s("p",[t._v("虽然这项技术并不十分成熟，"),s("strong",[t._v("但是它也是即时编译器优化技术中一个十分重要的手段")]),t._v("。")]),t._v(" "),s("p",[t._v("注意到有一些观点认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JVM设计者的选择。据我所知，Oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以"),s("strong",[t._v("可以明确所有的对象实例都是创建在堆上")]),t._v("。目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。")]),t._v(" "),s("p",[t._v("老年代放置长生命周期的对象，通常都是从Survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。")]),t._v(" "),s("p",[t._v("当GC只发生在年轻代中，回收年轻代对象的行为被称为Minor GC；当GC发生在老年代时则被称为Major GC或者Full GC。一般的，Minor GC的发生频率要比Major GC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。")])])}),[],!1,null,null,null);a.default=e.exports}}]);