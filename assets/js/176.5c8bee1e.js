(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{824:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[t._v("#")]),t._v(" 方法区")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_1.png",alt:"methods_area_1.png"}})]),t._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("官方文档："),a("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chapter 2. The Structure of the Java Virtual Machine (oracle.com)"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("《Java虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于HotSpotJVM而言，方法区还有一个别名叫做"),a("code",[t._v("Non-Heap")]),t._v("（非堆），目的就是要和堆分开。")]),t._v(" "),a("p",[t._v("所以，"),a("strong",[t._v("方法区看作是一块独立于Java堆的内存空间")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"基本理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本理解"}},[t._v("#")]),t._v(" 基本理解")]),t._v(" "),a("ul",[a("li",[t._v("方法区（Method Area）与Java堆一样，是各个线程共享的内存区域。")]),t._v(" "),a("li",[t._v("方法区在JVM启动的时候被创建，并且它的实际的物理内存空间中和Java堆区一样都可以是不连续的。")]),t._v(" "),a("li",[t._v("方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。")]),t._v(" "),a("li",[t._v("方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：java.lang.OutOfMemoryError: PermGen space 或者java.lang.OutOfMemoryError: Metaspace\n"),a("ul",[a("li",[t._v("加载大量的第三方的jar包；Tomcat部署的工程过多（30~50个）；大量动态的生成反射类")])])]),t._v(" "),a("li",[t._v("关闭JVM就会释放这个区域的内存。")])]),t._v(" "),a("p",[t._v("从线程共享与否的角度来看:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_2.png",alt:"methods_area_2.png"}})]),t._v(" "),a("p",[t._v("栈、堆、方法区的交互关系:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_3.png",alt:"methods_area_3.png"}})]),t._v(" "),a("h3",{attrs:{id:"hotspot中方法区的演进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hotspot中方法区的演进"}},[t._v("#")]),t._v(" HotSpot中方法区的演进")]),t._v(" "),a("p",[t._v("在JDK 7及以前，习惯上把方法区，称为永久代。JDK 8开始，使用元空间取代了永久代。")]),t._v(" "),a("blockquote",[a("p",[t._v("In JDK 8, classes metadata is now stored in the native heap and this space is called Metaspace.")])]),t._v(" "),a("p",[t._v("本质上，方法区和永久代并不等价。仅是对hotspot而言的。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JRockit / IBM J9 中不存在永久代的概念。")]),t._v(" "),a("p",[t._v("现在来看，当年使用永久代，不是好的idea。导致Java程序更容易OOM（超过"),a("code",[t._v("-XX:MaxPermsize")]),t._v("上限）。而到了JDK8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的元空间（Metaspace）来代替。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_4.png",alt:"methods_area_4.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_5.png",alt:"methods_area_5.png"}})]),t._v(" "),a("p",[a("strong",[t._v("元空间的本质和永久代类似，都是对JVM规范中方法区的实现")]),t._v("。不过元空间与永久代最大的区别在于："),a("strong",[t._v("元空间不在虚拟机设置的内存中，而是使用本地内存")]),t._v("。")]),t._v(" "),a("p",[t._v("永久代、元空间二者并不只是名字变了，内部结构也调整了。")]),t._v(" "),a("p",[t._v("根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常")]),t._v(" "),a("h2",{attrs:{id:"设置方法区大小与oom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置方法区大小与oom"}},[t._v("#")]),t._v(" 设置方法区大小与OOM")]),t._v(" "),a("h3",{attrs:{id:"设置方法区内存的大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置方法区内存的大小"}},[t._v("#")]),t._v(" 设置方法区内存的大小")]),t._v(" "),a("p",[t._v("方法区的大小不必是固定的，JVM可以根据应用的需要动态调整。")]),t._v(" "),a("p",[a("strong",[t._v("JDK 7及以前")])]),t._v(" "),a("ul",[a("li",[t._v("通过"),a("code",[t._v("-XX:Permsize")]),t._v("来设置永久代初始分配空间。默认值是20.75M。")]),t._v(" "),a("li",[t._v("通过"),a("code",[t._v("-XX:MaxPermsize")]),t._v("来设定永久代最大可分配空间。32位机器默认是64M，64位机器模式是82M。当JVM加载的类信息容量超过了值，会报异常"),a("code",[t._v("OutOfMemoryError:PermGen space")]),t._v("。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_6.png",alt:"methods_area_6.png"}})]),t._v(" "),a("p",[a("strong",[t._v("JDK 8以后")])]),t._v(" "),a("ul",[a("li",[t._v("元数据区大小可以使用参数 "),a("code",[t._v("-XX:MetaspaceSize")]),t._v(" 和 "),a("code",[t._v("-XX:MaxMetaspaceSize")]),t._v("指定。")]),t._v(" "),a("li",[t._v("默认值依赖于平台。Windows下，"),a("code",[t._v("-XX:MetaspaceSize=21M")]),t._v(", "),a("code",[t._v("-XX:MaxMetaspaceSize=-1")]),t._v("（即没有限制，正常已经根据平台进行了设置）。")]),t._v(" "),a("li",[t._v("与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常"),a("code",[t._v("OutOfMemoryError:Metaspace")])]),t._v(" "),a("li",[a("code",[t._v("-XX:MetaspaceSize")]),t._v("：设置初始的元空间大小。对于一个64位的服务器端JVM来说，其默认的-XX:MetaspaceSize值为21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过"),a("code",[t._v("MaxMetaspaceSize")]),t._v("时，适当提高该值。如果释放空间过多，则适当降低该值。")]),t._v(" "),a("li",[t._v("如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。"),a("strong",[t._v("为了避免频繁地GC，建议将"),a("code",[t._v("-XX:MetaspaceSize")]),t._v("设置为一个相对较高的值")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("-XX:MetaspaceSize、-XX:MaxMetaspaceSize")]),t._v(" "),a("p",[t._v("关于这几个参数，发现某些实际场景与文档并不一致，建议阅读一下"),a("a",{attrs:{href:"https://www.jianshu.com/p/b448c21d2e71",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM参数MetaspaceSize的误解"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("举例1:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_7.png",alt:"methods_area_7.png"}})]),t._v(" "),a("p",[t._v("举例2:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * jdk8中：\n * -XX:MetaspaceSize=10m-XX:MaxMetaspaceSize=10m\n * jdk6中：\n * -XX:PermSize=10m-XX:MaxPermSize=10m\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OOMTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OOMTest")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OOMTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建Classwriter对象，用于生成类的二进制字节码")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassWriter")]),t._v(" classWriter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassWriter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指明版本号，public，类名，包名，父类，接口")]),t._v("\n                classWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Opcodes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("V1_6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Opcodes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ACC_PUBLIC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Class"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nu1l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java/lang/Object"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回byte[]")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" classWriter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toByteArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类的加载")]),t._v("\n                test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Class"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//CLass对象")]),t._v("\n                j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"如何解决这些oom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决这些oom"}},[t._v("#")]),t._v(" 如何解决这些OOM")]),t._v(" "),a("ul",[a("li",[t._v("要解决OOM异常或heap space的异常，一般的手段是首先通过内存映像分析工具（如Eclipse Memory Analyzer）对"),a("code",[t._v("dump")]),t._v("出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了"),a("strong",[t._v("内存泄漏")]),t._v("（Memory Leak）还是"),a("strong",[t._v("内存溢出")]),t._v("（Memory Overflow） 。")]),t._v(" "),a("li",[t._v("如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GCRoots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GCRoots引用链的信息，就可以比较准确地定位出泄漏代码的位置。")]),t._v(" "),a("li",[t._v("如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx与-Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。")])]),t._v(" "),a("h2",{attrs:{id:"方法区的内部结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区的内部结构"}},[t._v("#")]),t._v(" 方法区的内部结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_8.png",alt:"methods_area_8.png"}})]),t._v(" "),a("h3",{attrs:{id:"方法区-method-area-存储什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区-method-area-存储什么"}},[t._v("#")]),t._v(" 方法区（Method Area）存储什么")]),t._v(" "),a("p",[t._v("《深入理解Java虚拟机》书中对方法区（Method Area）存储内容描述如下：")]),t._v(" "),a("blockquote",[a("p",[t._v("它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_9.png",alt:"methods_area_9.png"}})]),t._v(" "),a("h3",{attrs:{id:"方法区的内部结构-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区的内部结构-2"}},[t._v("#")]),t._v(" 方法区的内部结构")]),t._v(" "),a("h4",{attrs:{id:"类型信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型信息"}},[t._v("#")]),t._v(" 类型信息")]),t._v(" "),a("p",[t._v("对每个加载的类型（类class、接口interface、枚举enum、注解annotation），JVM必须在方法区中存储以下类型信息：")]),t._v(" "),a("ul",[a("li",[t._v("这个类型的完整有效名称（全名=包名.类名）")]),t._v(" "),a("li",[t._v("这个类型直接父类的完整有效名（对于interface或是java.lang.object，都没有父类）")]),t._v(" "),a("li",[t._v("这个类型的修饰符（public，abstract，final的某个子集）")]),t._v(" "),a("li",[t._v("这个类型直接接口的一个有序列表")])]),t._v(" "),a("h4",{attrs:{id:"域-field-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#域-field-信息"}},[t._v("#")]),t._v(" 域（Field）信息")]),t._v(" "),a("p",[t._v("JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。")]),t._v(" "),a("p",[t._v("域的相关信息包括：域名称、域类型、域修饰符（public，private，protected，static，final，volatile，transient的某个子集）。")]),t._v(" "),a("h4",{attrs:{id:"方法-method-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-method-信息"}},[t._v("#")]),t._v(" 方法（Method）信息")]),t._v(" "),a("p",[t._v("JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：")]),t._v(" "),a("ul",[a("li",[t._v("方法名称")]),t._v(" "),a("li",[t._v("方法的返回类型（或void）")]),t._v(" "),a("li",[t._v("方法参数的数量和类型（按顺序）")]),t._v(" "),a("li",[t._v("方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）")]),t._v(" "),a("li",[t._v("方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract和native方法除外）")]),t._v(" "),a("li",[t._v("异常表（abstract和native方法除外）\n"),a("ul",[a("li",[t._v("每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引")])])])]),t._v(" "),a("h4",{attrs:{id:"non-final的类变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#non-final的类变量"}},[t._v("#")]),t._v(" non-final的类变量")]),t._v(" "),a("ul",[a("li",[t._v("静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分")]),t._v(" "),a("li",[t._v("类变量被类的所有实例共享，即使没有类实例时，你也可以访问它")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodAreaTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"补充说明-全局常量-static-final"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充说明-全局常量-static-final"}},[t._v("#")]),t._v(" 补充说明：全局常量（static final）")]),t._v(" "),a("p",[t._v("被声明为final的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。")]),t._v(" "),a("h3",{attrs:{id:"常量池-vs-运行时常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量池-vs-运行时常量池"}},[t._v("#")]),t._v(" 常量池 VS 运行时常量池")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_10.png",alt:"methods_area_10.png"}})]),t._v(" "),a("ul",[a("li",[t._v("方法区，内部包含了运行时常量池，字节码文件，内部包含了常量池")]),t._v(" "),a("li",[t._v("要弄清楚方法区，需要理解清楚ClassFile，因为加载类的信息都在方法区。")]),t._v(" "),a("li",[t._v("要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池。")])]),t._v(" "),a("p",[t._v("官方文档：https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html")]),t._v(" "),a("p",[t._v("一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外，还包含一项信息就是常量池表（Constant Pool Table），包括各种字面量和对类型、域和方法的符号引用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_11.png",alt:"methods_area_11.png"}})]),t._v(" "),a("h4",{attrs:{id:"为什么需要常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要常量池"}},[t._v("#")]),t._v(" 为什么需要常量池")]),t._v(" "),a("p",[t._v("一个Java源文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍。\n比如，如下的代码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("虽然"),a("code",[t._v("SimpleClass.java")]),t._v("文件只有194字节，但是里面却使用了String、System、PrintStream及Object等结构。这里的代码量其实很少了，如果代码多的话，引用的结构将会更多，这里就需要用到常量池了。")]),t._v(" "),a("h4",{attrs:{id:"常量池中有什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量池中有什么"}},[t._v("#")]),t._v(" 常量池中有什么")]),t._v(" "),a("p",[t._v("常量池内存储的数据类型包括：数量值、字符串值、类引用、字段引用、方法引用。")]),t._v(" "),a("p",[t._v("例如下面这段代码：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodAreaTest2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("Object obj = new Object();")]),t._v("将会被翻译成如下字节码：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v('0: new #2  // Class java/lang/Object\n1: dup\n2: invokespecial // Method java/lang/Object "'),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('"() V\n')])])]),a("p",[a("strong",[t._v("常量池可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"运行时常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池"}},[t._v("#")]),t._v(" 运行时常量池")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("运行时常量池（Runtime Constant Pool）是方法区的一部分。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("常量池表（Constant Pool Table）是Class文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。")])]),t._v(" "),a("li",[a("p",[t._v("JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过"),a("strong",[t._v("索引访问")]),t._v("的。")])]),t._v(" "),a("li",[a("p",[t._v("运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。"),a("strong",[t._v("此时不再是常量池中的符号地址了，这里换为真实地址")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("运行时常量池，相对于Class文件常量池的另一重要特征是：具备"),a("strong",[t._v("动态性")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("运行时常量池类似于传统编程语言中的符号表（symbol table），但是它所包含的数据却比符号表要更加丰富一些。")])]),t._v(" "),a("li",[a("p",[t._v("当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛"),a("code",[t._v("OutOfMemoryError")]),t._v("异常。")])])]),t._v(" "),a("h2",{attrs:{id:"方法区使用举例图解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区使用举例图解"}},[t._v("#")]),t._v(" 方法区使用举例图解")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodAreaDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上述程序使用方法区详见"),a("RouterLink",{attrs:{to:"/java-vm/1_8_1_methods_area.html"}},[t._v("图解过程")]),t._v("。")],1),t._v(" "),a("h2",{attrs:{id:"方法区的演进细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区的演进细节"}},[t._v("#")]),t._v(" 方法区的演进细节")]),t._v(" "),a("p",[t._v("首先明确：只有HotSpot才有永久代。BEA JRockit、IBMJ9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一。")]),t._v(" "),a("p",[t._v("HotSpot VM中方法区的变化：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("版本")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("JDK 1.6及之前")])]),t._v(" "),a("td",[a("strong",[t._v("有永久代（permanet），静态变量存储在永久代上")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("JDK 1.7")])]),t._v(" "),a("td",[a("strong",[t._v("有永久代，但已经逐步 “去永久代”，字符串常量池，静态变量移除，保存在堆中")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("JDK 1.8")])]),t._v(" "),a("td",[a("strong",[t._v("无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中。")])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_12.png",alt:"methods_area_12.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_13.png",alt:"methods_area_13.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_14.png",alt:"methods_area_14.png"}})]),t._v(" "),a("h3",{attrs:{id:"为什么永久代要被元空间替代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么永久代要被元空间替代"}},[t._v("#")]),t._v(" 为什么永久代要被元空间替代")]),t._v(" "),a("p",[t._v("官网地址："),a("a",{attrs:{href:"http://openjdk.java.net/jeps/122",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 122: Remove the Permanent Generation (java.net)"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("是 JRockit 和 HotSpot 融合后的结果，因为JRockit没有永久代，所以他们不需要配置永久代。")]),t._v(" "),a("p",[t._v("随着Java8的到来，HotSpot VM中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了，这些数据被移到了一个"),a("strong",[t._v("与堆不相连的本地内存区域，这个区域叫做元空间（Metaspace）")]),t._v("。")]),t._v(" "),a("p",[t._v("由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。这项改动是很有必要的，原因有：")]),t._v(" "),a("ul",[a("li",[t._v("为永久代设置空间大小是很难确定的。在某些场景下，如果动态加载类过多，容易产生Perm区的oom。比如某个实际 Web工程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。 而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。 因此，默认情况下，元空间的大小仅受本地内存限制。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Exception in thread 'dubbo client x.x connector' java.lang.OutOfMemoryError:PermGen space\"")]),t._v("\n")])])]),a("ul",[a("li",[t._v("对永久代进行调优是很困难的。")])]),t._v(" "),a("h3",{attrs:{id:"stringtable为什么要调整位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringtable为什么要调整位置"}},[t._v("#")]),t._v(" StringTable为什么要调整位置")]),t._v(" "),a("p",[t._v("JDK 7中将StringTable放到了堆空间中。因为永久代的回收效率很低，在Full GC的时候才会触发，而Full GC是老年代的空间不足、永久代不足时才会触发。这就导致StringTable回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。"),a("strong",[t._v("将StringTable放到堆里，能及时回收内存")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"静态变量存放在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态变量存放在哪里"}},[t._v("#")]),t._v(" 静态变量存放在哪里")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 静态引用对应的对象实体始终都存在堆空间\n * jdk7:\n * -Xms200m -Xmx200m -XX:PermSize=300m -XX:MaxPermSize=300m -XX:+PrintGCDetails\n * jdk8:\n * -Xms200m -Xmx200m-XX:MetaspaceSize=300m -XX:MaxMetaspaceSize=300m -XX:+PrintGCDetails\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StaticFieldTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StaticFieldTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * staticobj、instanceobj、Localobj存放在哪里？\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StaticobjTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),t._v(" staticobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),t._v(" instanceobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),t._v(" localobj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"done"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectHolder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StaticobjTest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("使用JHSDB工具进行分析，这里细节略掉")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_16.png",alt:"methods_area_16.png"}})]),t._v(" "),a("p",[t._v("staticobj随着Test的类型信息存放在方法区，instanceobj随着Test的对象实例存放在Java堆，localobject则是存放在foo()方法栈帧的局部变量表中。")]),t._v(" "),a("p",[t._v("测试发现：三个对象的数据在内存中的地址都落在Eden区范围内，所以结论："),a("strong",[t._v("只要是对象实例必然会在Java堆中分配")]),t._v("。")]),t._v(" "),a("p",[t._v("接着，找到了一个引用该staticobj对象的地方，是在一个java.lang.Class的实例里，并且给出了这个实例的地址，通过Inspector查看该对象实例，可以清楚看到这确实是一个java.lang.Class类型的对象实例，里面有一个名为staticobj的实例字段：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_15.png",alt:"methods_area_15.png"}})]),t._v(" "),a("p",[t._v("从《Java虚拟机规范》所定义的概念模型来看，所有Class相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。"),a("strong",[t._v("JDK7及其以后版本的HotSpot虚拟机选择把静态变量与类型在Java语言一端的映射class对象存放在一起，存储于Java堆之中，从我们的实验中也明确验证了这一点")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"方法区的垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区的垃圾回收"}},[t._v("#")]),t._v(" 方法区的垃圾回收")]),t._v(" "),a("p",[t._v("有些人认为方法区（如HotSpot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上，也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK 11时期的ZGC收集器就不支持类卸载）。")]),t._v(" "),a("p",[t._v("一般来说，"),a("strong",[t._v("这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻")]),t._v("。但是这部分区域的回收"),a("strong",[t._v("有时又确实是必要的")]),t._v("。以前Sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。")]),t._v(" "),a("h3",{attrs:{id:"回收策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回收策略"}},[t._v("#")]),t._v(" 回收策略")]),t._v(" "),a("p",[a("strong",[t._v("方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型")]),t._v("。")]),t._v(" "),a("p",[t._v("首先方法区的运行时常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等；而符号引用则属于编译原理方面的概念，包括下面三类常量：")]),t._v(" "),a("ul",[a("li",[t._v("类和接口的全限定名")]),t._v(" "),a("li",[t._v("字段的名称和描述符")]),t._v(" "),a("li",[t._v("方法的名称和描述符")])]),t._v(" "),a("p",[t._v("HotSpot虚拟机对常量池的回收策略是很明确的，与回收Java堆中的对象非常类似，"),a("strong",[t._v("只要常量池中的常量没有被任何地方引用，就可以被回收")]),t._v("。也就是说判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了，需要"),a("strong",[t._v("同时满足下面三个条件")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。")]),t._v(" "),a("li",[t._v("加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。")]),t._v(" "),a("li",[t._v("该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。")])]),t._v(" "),a("p",[t._v("Java虚拟机"),a("strong",[t._v("被允许")]),t._v("对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了"),a("code",[t._v("-Xnoclassgc")]),t._v("参数进行控制，还可以使用"),a("code",[t._v("-verbose:class")]),t._v(" 以及 -"),a("code",[t._v("XX:+TraceClassLoading")]),t._v("、"),a("code",[t._v("-XX:+TraceClassUnLoading")]),t._v("查看类加载和卸载信息。")]),t._v(" "),a("p",[t._v("在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及OSGi这类频繁自定义类加载器的场景中，"),a("strong",[t._v("通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/methods_area_17.png",alt:"methods_area_17.png"}})]),t._v(" "),a("h2",{attrs:{id:"常见面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见面试题"}},[t._v("#")]),t._v(" 常见面试题")]),t._v(" "),a("p",[t._v("百度：")]),t._v(" "),a("ul",[a("li",[t._v("说一下JVM内存模型吧，有哪些区？分别干什么的？")])]),t._v(" "),a("p",[t._v("蚂蚁金服：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Java8的内存分代改进 JVM内存分哪几个区，每个区的作用是什么？")])]),t._v(" "),a("li",[a("p",[t._v("一面：JVM内存分布/内存结构？栈和堆的区别？堆的结构？为什么两个survivor区？")])]),t._v(" "),a("li",[a("p",[t._v("二面：Eden和survior的比例分配")])])]),t._v(" "),a("p",[t._v("小米：jvm内存分区，为什么要有新生代和老年代")]),t._v(" "),a("p",[t._v("字节跳动：")]),t._v(" "),a("ul",[a("li",[t._v("二面：Java的内存分区")]),t._v(" "),a("li",[t._v("二面：讲讲vm运行时数据库区 什么时候对象会进入老年代？")])]),t._v(" "),a("p",[t._v("京东：")]),t._v(" "),a("ul",[a("li",[t._v("JVM的内存结构，Eden和Survivor比例。")]),t._v(" "),a("li",[t._v("JVM内存为什么要分成新生代，老年代，持久代。")]),t._v(" "),a("li",[t._v("新生代中为什么要分为Eden和survivor。")])]),t._v(" "),a("p",[t._v("天猫：")]),t._v(" "),a("ul",[a("li",[t._v("一面：Jvm内存模型以及分区，需要详细到每个区放什么。")]),t._v(" "),a("li",[t._v("一面：JVM的内存模型，Java8做了什么改")])]),t._v(" "),a("p",[t._v("拼多多：")]),t._v(" "),a("ul",[a("li",[t._v("JVM内存分哪几个区，每个区的作用是什么？")])]),t._v(" "),a("p",[t._v("美团：")]),t._v(" "),a("ul",[a("li",[t._v("Java内存分配JVM的永久代中会发生垃圾回收吗？")]),t._v(" "),a("li",[t._v("一面：jvm内存分区，为什么要有新生代和老年代？")])])])}),[],!1,null,null,null);s.default=e.exports}}]);