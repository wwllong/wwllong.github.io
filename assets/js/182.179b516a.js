(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{831:function(t,s,_){"use strict";_.r(s);var a=_(58),v=Object(a.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"字节码指令集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字节码指令集"}},[t._v("#")]),t._v(" 字节码指令集")]),t._v(" "),_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),_("p",[t._v("Java字节码指令对于虚拟机，就好像汇编语言对于计算机，属于基本执行指令。")]),t._v(" "),_("p",[t._v("Java字节码指令，也可以称为Java虚拟机指令，由"),_("strong",[t._v("一个字节长度")]),t._v("、代表着某种特定操作含义的数字（称为"),_("strong",[t._v("操作码")]),t._v("，Opcode）以及跟随其后的零至多个代表此操作所需参数（称为"),_("strong",[t._v("操作数")]),t._v("，Operands）而构成。由于JVM采用面向操作数栈而不是寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。")]),t._v(" "),_("p",[t._v("由于限制了JVM操作码的长度为一个字节（0～255），这意味着指令集的操作码总数不可能超过256条。可以参考"),_("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),_("OutboundLink")],1),t._v("，查看每个指令的含义，实际上并不难。")]),t._v(" "),_("p",[t._v("熟悉虚拟机的指令对于动态字节码生成、反编译class文件、class文件修补都有着非常重要的价值。因此，阅读字节码作为了解Java虚拟机的基础技能，需要熟练掌握常见指令。")]),t._v(" "),_("h3",{attrs:{id:"执行模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行模型"}},[t._v("#")]),t._v(" 执行模型")]),t._v(" "),_("p",[t._v("如果不考虑异常处理的话，那么Java虚拟机的解释器可以使用下面这个伪代码当做最基本的执行模型来理解：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    自动计算PC寄存器的值加"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    根据PC寄存器的指示位置，从字节码流中取出操作码"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字节码存在操作数"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 从字节码流中取出操作数"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    执行操作码所定义的操作"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("字节码长度"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n")])])]),_("h3",{attrs:{id:"字节码与数据类型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字节码与数据类型"}},[t._v("#")]),t._v(" 字节码与数据类型")]),t._v(" "),_("p",[t._v("在Java虚拟机的指令集中，"),_("strong",[t._v("大多数的指令都包含了其操作所对应的数据类型信息")]),t._v("。例如，"),_("code",[t._v("iload")]),t._v("指令用于从局部变量表中加载"),_("code",[t._v("int")]),t._v("型的数据到操作数栈中，而"),_("code",[t._v("fload")]),t._v("指令加载的则是"),_("code",[t._v("float")]),t._v("类型的数据。")]),t._v(" "),_("p",[t._v("对于大部分与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：")]),t._v(" "),_("ul",[_("li",[t._v("i代表对int类型的数据操作，")]),t._v(" "),_("li",[t._v("l代表long")]),t._v(" "),_("li",[t._v("s代表short")]),t._v(" "),_("li",[t._v("b代表byte")]),t._v(" "),_("li",[t._v("c代表char")]),t._v(" "),_("li",[t._v("f代表float")]),t._v(" "),_("li",[t._v("d代表double")])]),t._v(" "),_("p",[_("strong",[t._v("也有一些指令的助记符中没有明确地指明操作类型的字母")]),t._v("，如"),_("code",[t._v("arraylength")]),t._v("指令，它没有代表数据类型的特殊字符，但操作数永远只能是一个数组类型的对象。还有另外一些指令，如无条件跳转指令"),_("code",[t._v("goto")]),t._v("则是与"),_("strong",[t._v("数据类型无关")]),t._v("的。")]),t._v(" "),_("p",[t._v("大部分的指令都没有支持整数类型"),_("code",[t._v("byte")]),t._v("、"),_("code",[t._v("char")]),t._v("和"),_("code",[t._v("short")]),t._v("，甚至没有任何指令支持"),_("code",[t._v("boolean")]),t._v("类型。编译器会在编译期或运行期将"),_("code",[t._v("byte")]),t._v("和"),_("code",[t._v("short")]),t._v("类型的数据带符号扩展（Sign-Extend）为相应的"),_("code",[t._v("int")]),t._v("类型数据，将"),_("code",[t._v("boolean")]),t._v("和"),_("code",[t._v("char")]),t._v("类型数据零位扩展（Zero-Extend）为相应的"),_("code",[t._v("int")]),t._v("类型数据。与之类似，在处理"),_("code",[t._v("boolean")]),t._v("、"),_("code",[t._v("byte")]),t._v("、"),_("code",[t._v("short")]),t._v("和"),_("code",[t._v("char")]),t._v("类型的数组时，也会转换为使用对应的"),_("code",[t._v("int")]),t._v("类型的字节码指令来处理。"),_("strong",[t._v("因此，大多数对于"),_("code",[t._v("boolean")]),t._v("、"),_("code",[t._v("byte")]),t._v("、"),_("code",[t._v("short")]),t._v("和"),_("code",[t._v("char")]),t._v("类型数据的操作，实际上都是使用相应的"),_("code",[t._v("int")]),t._v("类型作为运算类型")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"指令分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#指令分类"}},[t._v("#")]),t._v(" 指令分类")]),t._v(" "),_("p",[t._v("由于完全介绍和学习这些指令需要花费大量时间。为了让大家能够更快地熟悉和了解这些基本指令，这里将JVM中的字节码指令集按用途大致分成9类。")]),t._v(" "),_("ul",[_("li",[t._v("加载与存储指令")]),t._v(" "),_("li",[t._v("算术指令")]),t._v(" "),_("li",[t._v("类型转换指令")]),t._v(" "),_("li",[t._v("对象的创建与访问指令")]),t._v(" "),_("li",[t._v("方法调用与返回指令")]),t._v(" "),_("li",[t._v("操作数栈管理指令")]),t._v(" "),_("li",[t._v("比较控制指令")]),t._v(" "),_("li",[t._v("异常处理指令")]),t._v(" "),_("li",[t._v("同步控制指令")])]),t._v(" "),_("p",[t._v("（说在前面）在做值相关操作时：")]),t._v(" "),_("ul",[_("li",[t._v("一个指令，可以从局部变量表、常量池、堆中对象、方法调用、系统调用中等取得数据，这些数据（可能是值，可能是对象的引用）被压入操作数栈。")]),t._v(" "),_("li",[t._v("一个指令，也可以从操作数栈中取出一到多个值（pop多次），完成赋值、加减乘除、方法传参、系统调用等等操作。")])]),t._v(" "),_("h2",{attrs:{id:"加载与存储指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加载与存储指令"}},[t._v("#")]),t._v(" 加载与存储指令")]),t._v(" "),_("p",[t._v("作用：加载和存储指令用于将数据从栈帧的局部变量表和操作数栈之间来回传递。")]),t._v(" "),_("h3",{attrs:{id:"常用指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[t._v("#")]),t._v(" 常用指令")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("指令分类")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("局部变量压栈指令")]),t._v(" "),_("td",[t._v("将一个局部变量加载到操作数栈："),_("code",[t._v("xload、xload_<n>")]),t._v("（其中x为i、l、f、d、a，n为0到3）")])]),t._v(" "),_("tr",[_("td",[t._v("常量入栈指令")]),t._v(" "),_("td",[t._v("将一个常量加载到操作数栈："),_("code",[t._v("bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、iconst_<i>、lconst_<l>）、fconst_<f>、dconst_<d>")])])]),t._v(" "),_("tr",[_("td",[t._v("出栈装入局部变量表指令")]),t._v(" "),_("td",[t._v("将一个数值从操作数栈取出并存储到局部变量表："),_("code",[t._v("xstore、xstore_<n>")]),t._v("（其中x为i、l、f、d、a，n为0到3）；"),_("code",[t._v("xastore")]),t._v("（其中x为i、l、f、d、a、b、c、s）")])]),t._v(" "),_("tr",[_("td",[t._v("扩充局部变量表的访问索引指令")]),t._v(" "),_("td",[t._v("wide")])])])]),t._v(" "),_("p",[t._v("上面所列举的指令助记符中，有一部分是以尖括号结尾的（例如"),_("code",[t._v("iload_<n>")]),t._v("）。这些指令助记符实际上代表了一组指令（例如"),_("code",[t._v("iload_<n>")]),t._v("代表了"),_("code",[t._v("iload_0、iload_1、iload_2")]),t._v("和"),_("code",[t._v("iload_3")]),t._v("这几个指令）。这几组指令都是某个带有一个操作数的通用指令（例如"),_("code",[t._v("iload")]),t._v("）的特殊形式，"),_("strong",[t._v("对于这若干组特殊指令来说，它们表面上没有操作数，不需要进行取操作数的动作，但操作数都隐含在指令中")]),t._v("。")]),t._v(" "),_("p",[t._v("除此之外，它们的语义与原生的通用指令完全一致（例如"),_("code",[t._v("iload_0")]),t._v("的语义与操作数为0时的"),_("code",[t._v("iload")]),t._v("指令语义完全一致）。在尖括号之间的字母指定了指令隐含操作数的数据类型，<n>代表非负的整数，<i>代表是int类型数据，<l>代表long类型，<f>代表float类型，<d>代表"),_("code",[t._v("double")]),t._v("类型。")]),t._v(" "),_("ul",[_("li",[t._v("操作"),_("code",[t._v("byte")]),t._v("、"),_("code",[t._v("char")]),t._v("、"),_("code",[t._v("short")]),t._v("和"),_("code",[t._v("boolean")]),t._v("类型数据时，经常用"),_("code",[t._v("int")]),t._v("类型的指令来表示。")])]),t._v(" "),_("h3",{attrs:{id:"再谈操作数栈与局部变量表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#再谈操作数栈与局部变量表"}},[t._v("#")]),t._v(" 再谈操作数栈与局部变量表")]),t._v(" "),_("p",[_("strong",[t._v("操作数栈（Operand Stacks）")])]),t._v(" "),_("p",[t._v("我们知道，Java字节码是Java虚拟机所使用的指令集。因此，它与Java虚拟机基于栈的计算模型是密不可分的。在解释执行过程中，每当为Java方法分配栈桢时，Java虚拟机往往需要开辟一块额外的空间作为"),_("strong",[t._v("操作数栈，来存放计算的操作数以及返回结果")]),t._v("。")]),t._v(" "),_("p",[t._v("具体来说便是："),_("strong",[t._v("执行每一条指令之前，Java虚拟机要求该指令的操作数已被压入操作数栈中。在执行指令时，Java虚拟机会将该指令所需的操作数弹出，并且将指令的结果重新压入栈中。")])]),t._v(" "),_("p",[t._v("以加法指令"),_("code",[t._v("iadd")]),t._v("为例。假设在执行该指令前，栈顶的两个元素分别为"),_("code",[t._v("int")]),t._v("值1和"),_("code",[t._v("int")]),t._v("值2，那么"),_("code",[t._v("iadd")]),t._v("指令将弹出这两个"),_("code",[t._v("int")]),t._v("，并将求得的和"),_("code",[t._v("int")]),t._v("值3压入栈中：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_1.png",alt:"bytecode_instruction_set_1"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_2.png",alt:"bytecode_instruction_set_2"}})]),t._v(" "),_("p",[t._v("由于"),_("code",[t._v("iadd")]),t._v("指令只消耗栈顶的两个元素，因此，对于离栈顶距离为2的元素，即图中的问号，"),_("code",[t._v("iadd")]),t._v("指令并不关心它是否存在，更加不会对其进行修改。")]),t._v(" "),_("p",[_("strong",[t._v("局部变量表（Local Variables）")])]),t._v(" "),_("p",[t._v("Java方法栈桢的另外一个重要组成部分则是局部变量区，"),_("strong",[t._v("字节码程序可以将计算的结果缓存在局部变量区之中")]),t._v("。实际上，Java虚拟机"),_("strong",[t._v("将局部变量区当成一个数组")]),t._v("，依次存放"),_("strong",[t._v("this")]),t._v("指针（仅非静态方法），所传入的参数，以及字节码中的局部变量。")]),t._v(" "),_("p",[t._v("和操作数栈一样，"),_("code",[t._v("long")]),t._v("类型以及"),_("code",[t._v("double")]),t._v("类型的值将占据两个单元，其余类型仅占据一个单元。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_3.png",alt:"bytecode_instruction_set_3"}})]),t._v(" "),_("p",[t._v("举例：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("对应的图示：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_4.png",alt:"bytecode_instruction_set_4"}})]),t._v(" "),_("p",[_("code",[t._v("this")]),t._v("表示当前类的引用，l和f的类型的值占两个槽位，i和s变量由于分别在各自代码块中，没有共同的生命周期，所以占同一个槽位（即槽位复用）。")]),t._v(" "),_("p",[t._v("在栈帧中，与性能调优关系最为密切的部分就是局部变量表。局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。")]),t._v(" "),_("h3",{attrs:{id:"局部变量入栈指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局部变量入栈指令"}},[t._v("#")]),t._v(" 局部变量入栈指令")]),t._v(" "),_("p",[_("strong",[t._v("局部变量压栈指令将给定的局部变量表中的数据压入操作数栈")]),t._v("。")]),t._v(" "),_("p",[t._v("这类指令大体可以分为：")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("xload_<n>")]),t._v("（x为i、l、f、d、a，n为0到3）")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("xload")]),t._v("（x为i、l、f、d、a）")])])]),t._v(" "),_("p",[t._v("说明：在这里，x 的取值表示数据类型。")]),t._v(" "),_("p",[t._v("指令"),_("code",[t._v("xload_n")]),t._v("表示"),_("strong",[t._v("将第n个局部变量压入操作数栈")]),t._v("，比如"),_("code",[t._v("iload_1、fload_0、aload_0")]),t._v("等指令。其中"),_("code",[t._v("aload_n")]),t._v("表示将一个对象引用压栈。")]),t._v(" "),_("p",[t._v("指令"),_("code",[t._v("xload")]),t._v("通过指定参数的形式，把局部变量压入操作数栈，当使用这个命令时，表示局部变量的数量可能超过了4个，比如指令"),_("code",[t._v("iload")]),t._v("、"),_("code",[t._v("fload")]),t._v("等。")]),t._v(" "),_("p",[_("strong",[t._v("举例")]),t._v("：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" count"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction/bytecode_ex_1.png",alt:"bytecode_ex_1"}})]),t._v(" "),_("h3",{attrs:{id:"常量入栈指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常量入栈指令"}},[t._v("#")]),t._v(" 常量入栈指令")]),t._v(" "),_("p",[_("strong",[t._v("常量入栈指令的功能是将常数压入操作数栈，根据数据类型和入栈内容的不同，又可以分为"),_("code",[t._v("const")]),t._v("系列、"),_("code",[t._v("push")]),t._v("系列和"),_("code",[t._v("ldc")]),t._v("指令。")])]),t._v(" "),_("p",[_("strong",[_("code",[t._v("const")]),t._v("指令系列")]),t._v("：用于对特定的常量入栈，入栈的常量隐含在指令本身里。指令有："),_("code",[t._v("iconst_<i>、lconst_<l>、fconst_<f>、dconst_<d>、aconst_null")]),t._v("，具体如下：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("iconst_n")]),t._v("：n从-1到5，将x压入栈，其中n=-1的时候比较特殊，指令为"),_("code",[t._v("iconst_m1")]),t._v("。")]),t._v(" "),_("li",[_("code",[t._v("lconst_0")]),t._v("、"),_("code",[t._v("lconst_1")]),t._v("分别将长整数0和1压入栈；")]),t._v(" "),_("li",[_("code",[t._v("fconst_0")]),t._v("、"),_("code",[t._v("fconst_1")]),t._v("、"),_("code",[t._v("fconst_2")]),t._v("分别将浮点数0、1、2压入栈；")]),t._v(" "),_("li",[_("code",[t._v("dconst_0")]),t._v("和"),_("code",[t._v("dconst_1")]),t._v("分别将double型0和1压入栈；")]),t._v(" "),_("li",[_("code",[t._v("aconst_null")]),t._v("将"),_("code",[t._v("null")]),t._v("压入操作数栈；")])]),t._v(" "),_("p",[t._v("从指令的命名上不难找出规律，指令助记符的第一个字符总是喜欢表示数据类型，i表示整数，l表示长整数，f表示浮点数，d表示双精度浮点，"),_("strong",[t._v("习惯上用a表示对象引用，如果指令隐含操作的参数，会以下划线形式给出")]),t._v("。")]),t._v(" "),_("p",[_("strong",[_("code",[t._v("push")]),t._v("指令系列")]),t._v("：主要包括"),_("code",[t._v("bipush")]),t._v("和"),_("code",[t._v("sipush")]),t._v("。它们的区别在于接收数据类型的不同，"),_("code",[t._v("bipush")]),t._v("接收"),_("strong",[t._v("8位")]),t._v("整数作为参数，"),_("code",[t._v("sipush")]),t._v("接收"),_("strong",[t._v("16位")]),t._v("整数，它们都将参数压入栈。")]),t._v(" "),_("p",[_("code",[t._v("ldc")]),t._v("指令系列：如果以上指令都不能满足需求，那么可以使用万能的"),_("code",[t._v("ldc")]),t._v("指令。它可以接收一个8位的参数，该参数指向常量池中的"),_("code",[t._v("int")]),t._v("、"),_("code",[t._v("float")]),t._v("或者"),_("code",[t._v("String")]),t._v("的索引，将指定的内容压入栈。")]),t._v(" "),_("ul",[_("li",[t._v("类似的还有"),_("code",[t._v("ldc_w")]),t._v("，它接收两个8位参数，能支持的索引范围大于"),_("code",[t._v("ldc")]),t._v("。")]),t._v(" "),_("li",[t._v("如果要压入的元素是"),_("code",[t._v("long")]),t._v("或者"),_("code",[t._v("double")]),t._v("类型的，则使用"),_("code",[t._v("ldc2_w")]),t._v("指令，使用方式都是类似的。")])]),t._v(" "),_("p",[t._v("总结如下：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("类型")]),t._v(" "),_("th",[t._v("常数指令")]),t._v(" "),_("th",[t._v("范围")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("int(boolean,byte,char,short)")]),t._v(" "),_("td",[t._v("iconst")]),t._v(" "),_("td",[t._v("[-1, 5]")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("bipush")]),t._v(" "),_("td",[t._v("[-128, 127]")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("sipush")]),t._v(" "),_("td",[t._v("[-32768, 32767]")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("ldc")]),t._v(" "),_("td",[t._v("any int value")])]),t._v(" "),_("tr",[_("td",[t._v("long")]),t._v(" "),_("td",[t._v("lconst")]),t._v(" "),_("td",[t._v("0, 1")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("ldc")]),t._v(" "),_("td",[t._v("any long value")])]),t._v(" "),_("tr",[_("td",[t._v("float")]),t._v(" "),_("td",[t._v("fconst")]),t._v(" "),_("td",[t._v("0, 1, 2")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("ldc")]),t._v(" "),_("td",[t._v("any float value")])]),t._v(" "),_("tr",[_("td",[t._v("double")]),t._v(" "),_("td",[t._v("dconst")]),t._v(" "),_("td",[t._v("0, 1")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("ldc")]),t._v(" "),_("td",[t._v("any double value")])]),t._v(" "),_("tr",[_("td",[t._v("reference")]),t._v(" "),_("td",[t._v("aconst")]),t._v(" "),_("td",[t._v("null")])]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td",[t._v("ldc")]),t._v(" "),_("td",[t._v("String literal, Class literal")])])])]),t._v(" "),_("p",[_("strong",[t._v("示例1")]),t._v("：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushConstLdc")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" d "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" e "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("32767")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" f "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("32768")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("字节码指令如下：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" iconst_m1 "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将-1压入栈, 特殊写法")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" istore_1\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" iconst_5\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" istore_2\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" bipush "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// iconst_n（n=-1~5)，当x>5 就要用bipush n")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" istore_3\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" bipush "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("127")]),t._v(" \n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" istore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" sipush "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bipush n（n=-128～127)，当n>127或n<-128，需要使用sipush n")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" istore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" sipush "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("32767")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" istore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" ldc #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("32768"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sipush n（n=-32768～32767)，当n>32767或n<-32768，需要使用ldc.")]),t._v("\n                  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ldc 加载常量池地址，大小没有限制")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(" istore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),_("p",[_("strong",[t._v("示例2")])]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("constLdc")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" a1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" a2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" b1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" b2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" c1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" c2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v(" d "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("字节码指令如下：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" lconst_1\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" lstore_1\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" ldc2_w #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lconst_n（n=0或1），不在这个范围只能使用ldc2w（long、double两个字节）")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" lstore_3\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" fconst_2\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" fstore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  fstore n（n指的是局部变量表的下标），注意long和double占用两个槽位，所以 lstore_3 后面 就 fstore 5 了")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" ldc #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("3"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fconst_n（n=0或1或2），不在这个范围使用ldc")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" fstore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" dconst_1\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" dstore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" ldc2_w #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("0"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dconst_n，理由同lconst_n")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" dstore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" aconst_null  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将null压入操作数栈")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" astore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("  \n")])])]),_("h3",{attrs:{id:"出栈装入局部变量表指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#出栈装入局部变量表指令"}},[t._v("#")]),t._v(" 出栈装入局部变量表指令")]),t._v(" "),_("p",[_("strong",[t._v("出栈装入局部变量表指令用于将操作数栈中栈顶元素弹出后，装入局部变量表的指定位置，用于给局部变量赋值")]),t._v("。")]),t._v(" "),_("p",[t._v("这类指令主要以"),_("code",[t._v("store")]),t._v("的形式存在，比如"),_("code",[t._v("xstore（x为i、l、f、d、a）、xstore_n（x为i、l、f、d、a，n为0至3）")]),t._v("。")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("其中，指令"),_("code",[t._v("istore_n")]),t._v("将从操作数栈中弹出一个整数，并把它值给局部变量索引"),_("code",[t._v("n")]),t._v("位置。")])]),t._v(" "),_("li",[_("p",[t._v("指令"),_("code",[t._v("xstore")]),t._v("由于没有隐含参数信息，故需要提供一个"),_("code",[t._v("byte")]),t._v("类型的参数(操作数）指定目标局部变量表的位置。")])])]),t._v(" "),_("p",[t._v("说明："),_("strong",[t._v("一般说来，类似像"),_("code",[t._v("store")]),t._v("这样的命令需要带一个参数，用来指明将弹出的元素放在局部变量表的第几个位置")]),t._v("。但是，为了尽可能压缩指令大小，使用专门的"),_("code",[t._v("istore_1")]),t._v("指令表示将弹出的元素放置在局部变量表第1个位置。类似的还有"),_("code",[t._v("istore_0")]),t._v("、"),_("code",[t._v("istore_2")]),t._v("、"),_("code",[t._v("istore_3")]),t._v("，它们分别表示从操作数栈顶弹出一个元素，存放在局部变量表第0、2、3个位置。由于局部变量表前几个位置总是非常常用，因此"),_("strong",[t._v("这种做法虽然增加了指令数量，但是可以大大压缩生成的字节码的体积")]),t._v("。如果局部变量表很大，需要存储的槽位大于3，那么可以使用"),_("code",[t._v("istore")]),t._v("指令，外加一个参数，用来表示需要存放的槽位位置。")]),t._v(" "),_("p",[_("strong",[t._v("举例1")])]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("store")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"atguigu"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0F")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    d "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction/bytecode_ex_2.png",alt:"bytecode_ex_2"}})]),t._v(" "),_("p",[_("strong",[t._v("举例2:槽位复用")])]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" l"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello, World"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("字节码：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" iconst_0\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" istore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" \n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" ldc #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hello")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("World")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" astore "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("  "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 槽位复用")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),_("p",[t._v("局部变量表如下：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("索引")]),t._v(" "),_("th",[t._v("0")]),t._v(" "),_("th",[t._v("1,2")]),t._v(" "),_("th",[t._v("3")]),t._v(" "),_("th",[t._v("4")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("变量")]),t._v(" "),_("td",[t._v("this")]),t._v(" "),_("td",[t._v("l（long类型占用两个槽位，用1表示）")]),t._v(" "),_("td",[t._v("f")]),t._v(" "),_("td",[t._v("i/s（槽位复用）")])])])]),t._v(" "),_("h2",{attrs:{id:"算术指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算术指令"}},[t._v("#")]),t._v(" 算术指令")]),t._v(" "),_("p",[t._v("作用："),_("strong",[t._v("算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新压入操作数栈")]),t._v("。")]),t._v(" "),_("p",[t._v("大体上算术指令可以分为两种：对"),_("strong",[t._v("整型数据")]),t._v("进行运算的指令与对"),_("strong",[t._v("浮点类型")]),t._v("数据进行运算的指令。")]),t._v(" "),_("h3",{attrs:{id:"byte、short、char和boolean类型说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#byte、short、char和boolean类型说明"}},[t._v("#")]),t._v(" byte、short、char和boolean类型说明")]),t._v(" "),_("p",[t._v("在每一大类中，都有针对Java虚拟机具体数据类型的专用算术指令。但没有直接支持"),_("code",[t._v("byte")]),t._v("、"),_("code",[t._v("short")]),t._v("、"),_("code",[t._v("char")]),t._v("和"),_("code",[t._v("boolean")]),t._v("类型的算术指令，对于这些数据的运算，都使用"),_("code",[t._v("int")]),t._v("类型的指令来处理。此外，在处理"),_("code",[t._v("boolean")]),t._v("、"),_("code",[t._v("byte")]),t._v("、"),_("code",[t._v("short")]),t._v("和"),_("code",[t._v("char")]),t._v("类型的数组时，也会"),_("strong",[t._v("转换为对应的"),_("code",[t._v("int")]),t._v("类型的字节码指令来处理")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction/bytecode_instruction_set_7.png",alt:"bytecode_instruction_set_7"}})]),t._v(" "),_("h3",{attrs:{id:"运算时的溢出"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算时的溢出"}},[t._v("#")]),t._v(" 运算时的溢出")]),t._v(" "),_("p",[t._v("数据运算可能会导致溢出。例如，两个很大的正整数相加，结果可能是一个负数。其实Java虚拟机规范并无明确规定过整型数据溢出的具体结果，仅规定了在处理整型数据时，只有除法指令以及求余指令中当出现除数为0时会导致虚拟机抛出异常"),_("code",[t._v("ArithmeticException")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"运算模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运算模式"}},[t._v("#")]),t._v(" 运算模式")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("向最接近数舍入模式")]),t._v("：JVM要求在进行浮点数计算时，所有的运算结果都必须舍入到适当的精度，非精确结果必须舍入为可被表示的最接近的精确值，如果有两种可表示的形式与该值一样接近，将优先选择最低有效位为零的；")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("向零舍入模式")]),t._v("：将浮点数转换为整数时，采用该模式，该模式将在目标数值类型中选择一个最接近但是不大于原值的数字作为最精确的舍入结果；")])])]),t._v(" "),_("h3",{attrs:{id:"infinity-nan值使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#infinity-nan值使用"}},[t._v("#")]),t._v(" Infinity&NaN值使用")]),t._v(" "),_("p",[t._v("当一个操作产生溢出时，将会使用有符号的无穷大（Infinity）表示，如果某个操作结果没有明确的数学定义的话，将会使用NaN值来表示，而且所有使用NaN值作为操作数的算术操作，结果都会返回NaN；")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无穷大, Infinity")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" j "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN: not a number")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d2 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d1 "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d2"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),_("h3",{attrs:{id:"所有算数指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#所有算数指令"}},[t._v("#")]),t._v(" 所有算数指令")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("算数指令")]),t._v(" "),_("th",[t._v("int(boolean,byte,char,short)")]),t._v(" "),_("th",[t._v("long")]),t._v(" "),_("th",[t._v("float")]),t._v(" "),_("th",[t._v("double")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("加法指令")]),t._v(" "),_("td",[t._v("iadd")]),t._v(" "),_("td",[t._v("ladd")]),t._v(" "),_("td",[t._v("fadd")]),t._v(" "),_("td",[t._v("dadd")])]),t._v(" "),_("tr",[_("td",[t._v("减法指令")]),t._v(" "),_("td",[t._v("isub")]),t._v(" "),_("td",[t._v("lsub")]),t._v(" "),_("td",[t._v("fsub")]),t._v(" "),_("td",[t._v("dsub")])]),t._v(" "),_("tr",[_("td",[t._v("乘法指令")]),t._v(" "),_("td",[t._v("imul")]),t._v(" "),_("td",[t._v("lmul")]),t._v(" "),_("td",[t._v("fmul")]),t._v(" "),_("td",[t._v("dmul")])]),t._v(" "),_("tr",[_("td",[t._v("除法指令")]),t._v(" "),_("td",[t._v("idiv")]),t._v(" "),_("td",[t._v("ldiv")]),t._v(" "),_("td",[t._v("fdiv")]),t._v(" "),_("td",[t._v("ddiv")])]),t._v(" "),_("tr",[_("td",[t._v("求余指令(remainder)")]),t._v(" "),_("td",[t._v("irem")]),t._v(" "),_("td",[t._v("lrem")]),t._v(" "),_("td",[t._v("frem")]),t._v(" "),_("td",[t._v("drem")])]),t._v(" "),_("tr",[_("td",[t._v("取反指令(negation)")]),t._v(" "),_("td",[t._v("ineg")]),t._v(" "),_("td",[t._v("lneg")]),t._v(" "),_("td",[t._v("fneg")]),t._v(" "),_("td",[t._v("dneg")])]),t._v(" "),_("tr",[_("td",[t._v("自增指令")]),t._v(" "),_("td",[t._v("iinc")]),t._v(" "),_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("位移运算指令")]),t._v(" "),_("td",[t._v("ishl、ishr、iushr")]),t._v(" "),_("td",[t._v("Ishl、lshr、lushr")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("按位或指令")]),t._v(" "),_("td",[t._v("ior")]),t._v(" "),_("td",[t._v("lor")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("按位与指令")]),t._v(" "),_("td",[t._v("iand")]),t._v(" "),_("td",[t._v("land")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("按位异或指令")]),t._v(" "),_("td",[t._v("ixor")]),t._v(" "),_("td",[t._v("lxor")]),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td",[t._v("比较指令")]),t._v(" "),_("td"),t._v(" "),_("td",[t._v("lcmp")]),t._v(" "),_("td",[t._v("fcmpg / fcmpl")]),t._v(" "),_("td",[t._v("dcmpg / dcmpl")])])])]),t._v(" "),_("p",[t._v("比较指令的说明，见控制转移指令部分内容。")]),t._v(" "),_("p",[_("strong",[t._v("举例1")])]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_5.png",alt:"bytecode_instruction_set_5"}})]),t._v(" "),_("p",[_("RouterLink",{attrs:{to:"/java-vm/1_5_vm_statck.html#附录-代码追踪示例"}},[t._v("举例2")])],1),t._v(" "),_("h2",{attrs:{id:"类型转换指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型转换指令"}},[t._v("#")]),t._v(" 类型转换指令")]),t._v(" "),_("p",[t._v("类型转换指令可以将两种不同的数值类型进行相互转换。")]),t._v(" "),_("p",[t._v("这些转换操作一般用于实现用户代码中的"),_("strong",[t._v("显式类型转换操作")]),t._v("，或者用来"),_("strong",[t._v("处理字节码指令集中数据类型相关指令无法与数据类型一一对应的问题")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"宽化类型转换指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#宽化类型转换指令"}},[t._v("#")]),t._v(" 宽化类型转换指令")]),t._v(" "),_("p",[t._v("Java虚拟机直接支持以下数值的宽化类型转换（Widening Numeric Conversion, 小范围类型向大范围类型的安全转换）。也就是说，并不需要指令执行，包括：")]),t._v(" "),_("ul",[_("li",[t._v("从"),_("code",[t._v("int")]),t._v("类型到"),_("code",[t._v("long")]),t._v("、"),_("code",[t._v("float")]),t._v("或者"),_("code",[t._v("double")]),t._v("类型。对应的指令为：i21、i2f、i2d")]),t._v(" "),_("li",[t._v("从"),_("code",[t._v("long")]),t._v("类型到"),_("code",[t._v("float")]),t._v("、"),_("code",[t._v("double")]),t._v("类型。对应的指令为：i2f、i2d")]),t._v(" "),_("li",[t._v("从"),_("code",[t._v("float")]),t._v("类型到"),_("code",[t._v("double")]),t._v("类型。对应的指令为：f2d")])]),t._v(" "),_("p",[_("strong",[t._v("简化为："),_("code",[t._v("int")]),t._v(" --\x3e "),_("code",[t._v("long")]),t._v(" --\x3e "),_("code",[t._v("float")]),t._v(" -> "),_("code",[t._v("double")])])]),t._v(" "),_("p",[_("strong",[t._v("精度损失问题")])]),t._v(" "),_("ul",[_("li",[t._v("宽化类型转换是不会因为超过目标类型最大值而丢失信息的，例如，从"),_("code",[t._v("int")]),t._v("转换到"),_("code",[t._v("long")]),t._v(",或者从"),_("code",[t._v("int")]),t._v("转换到"),_("code",[t._v("double")]),t._v(",都不会丢失任何信息，转换前后的值是精确相等的。")]),t._v(" "),_("li",[t._v("从"),_("code",[t._v("int")]),t._v("、"),_("code",[t._v("long")]),t._v("类型数值转换到"),_("code",[t._v("float")]),t._v("，或者"),_("code",[t._v("long")]),t._v("类型数值转换到"),_("code",[t._v("double")]),t._v("时，将可能发生精度丢失。可能丢失掉几个最低有效位上的值，转换后的浮点数值是根据IEEE 754最接近含入模式所得到的正确整数值。")]),t._v(" "),_("li",[t._v("尽管宽化类型转换实际上是可能发生精度丢失的，但是这种转换永远不会导致Java虚拟机抛出运行时异常。")])]),t._v(" "),_("p",[_("strong",[t._v("补充说明")])]),t._v(" "),_("p",[_("strong",[t._v("从"),_("code",[t._v("byte")]),t._v("、"),_("code",[t._v("char")]),t._v("和"),_("code",[t._v("short")]),t._v("类型到"),_("code",[t._v("int")]),t._v("类型的宽化类型转换实际上是不存在的")]),t._v("。对于"),_("code",[t._v("byte")]),t._v("类型转为"),_("code",[t._v("int")]),t._v("，虚拟机并没有做实质性的转化处理，只是简单地通过操作数栈交换了两个数据。而将"),_("code",[t._v("byte")]),t._v("转为"),_("code",[t._v("long")]),t._v("时，使用的是i2l，可以看到在内部，"),_("code",[t._v("byte")]),t._v("在这里已经等同于"),_("code",[t._v("int")]),t._v("类型处理，类似的还有"),_("code",[t._v("short")]),t._v("类型，这种处理方式有两个特点：")]),t._v(" "),_("ul",[_("li",[t._v("一方面可以减少实际的数据类型，如果为"),_("code",[t._v("short")]),t._v("和"),_("code",[t._v("byte")]),t._v("都准备一套指令，那么指令的数量就会大増，而虚拟机目前的设计上，只愿意使用一个字节表示指令，因此指令总数不能超过256个，为了节省指令资源，将"),_("code",[t._v("short")]),t._v("和"),_("code",[t._v("byte")]),t._v("当做int处理也在情理之中。")]),t._v(" "),_("li",[t._v("另一方面，由于局部变量表中的槽位固定为32位，无论是"),_("code",[t._v("byte")]),t._v("或者"),_("code",[t._v("short")]),t._v("存入局部变量表，都会占用32位空间。从这个角度说，也没有必要特意区分这几种数据类型。")])]),t._v(" "),_("h3",{attrs:{id:"窄化类型转换指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#窄化类型转换指令"}},[t._v("#")]),t._v(" 窄化类型转换指令")]),t._v(" "),_("p",[t._v("Java虚拟机也直接支持以下窄化类型转换(Narrowing Numeric Conversion)：")]),t._v(" "),_("ul",[_("li",[t._v("从"),_("code",[t._v("int")]),t._v("类型至"),_("code",[t._v("byte")]),t._v("、 "),_("code",[t._v("short")]),t._v("或者"),_("code",[t._v("char")]),t._v("类型。对应的指令有：i2b、i2c、i2s")]),t._v(" "),_("li",[t._v("从"),_("code",[t._v("long")]),t._v("类型到"),_("code",[t._v("int")]),t._v("类型。对应的指令有：l2i")]),t._v(" "),_("li",[t._v("从"),_("code",[t._v("float")]),t._v("类型到"),_("code",[t._v("int")]),t._v("或者"),_("code",[t._v("long")]),t._v("类型。对应的指令有：f2i、f2l")]),t._v(" "),_("li",[t._v("从"),_("code",[t._v("double")]),t._v("类型到"),_("code",[t._v("int")]),t._v("、"),_("code",[t._v("long")]),t._v("或者"),_("code",[t._v("float")]),t._v("类型。对应的指令有：d2i、d2l、d2f")])]),t._v(" "),_("p",[_("strong",[t._v("精度损失问题")])]),t._v(" "),_("ul",[_("li",[t._v("窄化类型转换可能会导致转换结果具备不同的正负号、不同的数量级，因此，转换过程很可能会导致数值丢失精度。")]),t._v(" "),_("li",[t._v("尽管数据类型窄化转换可能会发生上限溢出、下限溢出和精度丢失等情况，但是Java虚拟机规范中明确规定数值类型的窄化转换指令永远不可能导致虚拟机抛出运行时异常")])]),t._v(" "),_("p",[_("strong",[t._v("补充说明")])]),t._v(" "),_("p",[t._v("当将一个浮点值窄化转换为整数类型T(T限于"),_("code",[t._v("int")]),t._v("或"),_("code",[t._v("long")]),t._v("类型之一)的时候，将遵循以下转换规则：")]),t._v(" "),_("ul",[_("li",[t._v("如果浮点值是NaN, 那转换结果就是"),_("code",[t._v("int")]),t._v("或"),_("code",[t._v("long")]),t._v("类型的0。")]),t._v(" "),_("li",[t._v("如果浮点值不是无穷大的话，浮点值使用IEEE754的向零含入模式取整，获得整数值v。如果v在目标类型T("),_("code",[t._v("int")]),t._v("或"),_("code",[t._v("long")]),t._v(")的表示范围之内，那转换结果就是v。否则，将根据v的符号，转换为T所能表示的最大或者最小正数。")])]),t._v(" "),_("p",[t._v("当将一个"),_("code",[t._v("double")]),t._v("类型窄化转换为"),_("code",[t._v("float")]),t._v("类型时，将遵循以下转换规则，通过向最接近数舍入模式舍入一个可以使用"),_("code",[t._v("float")]),t._v("类型表示的数字。最后结果根据下面这3条规则判断：")]),t._v(" "),_("ul",[_("li",[t._v("如果转换结果的绝对值太小而无法使用"),_("code",[t._v("float")]),t._v("来表示，将返回"),_("code",[t._v("float")]),t._v("类型的正负零")]),t._v(" "),_("li",[t._v("如果转换结果的绝对值太大而无法使用"),_("code",[t._v("float")]),t._v("来表示，将返回"),_("code",[t._v("float")]),t._v("类型的正负无穷大。")]),t._v(" "),_("li",[t._v("对于"),_("code",[t._v("double")]),t._v("类型的"),_("code",[t._v("NaN")]),t._v("值将按规定转换为"),_("code",[t._v("float")]),t._v("类型的NaN值。")])]),t._v(" "),_("h2",{attrs:{id:"对象创建与访问指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象创建与访问指令"}},[t._v("#")]),t._v(" 对象创建与访问指令")]),t._v(" "),_("p",[t._v("Java是面向对象的程序设计语言，虚拟机平台从字节码层面就对面向对象做了深层次的支持。有一系列指令专门用于对象操作，可进一步细分为创建指令、字段访问指令、数组操作指令、类型检查指令。")]),t._v(" "),_("h3",{attrs:{id:"创建指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建指令"}},[t._v("#")]),t._v(" 创建指令")]),t._v(" "),_("p",[t._v("虽然类实例和数组都是对象，但Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令：")]),t._v(" "),_("ol",[_("li",[t._v("创建类实例的指令： "),_("code",[t._v("new")]),t._v("。它接收一个操作数，为指向常量池的索引，表示要创建的类型，执行完成后，将对象的引用压入栈。")]),t._v(" "),_("li",[t._v("创建数组的指令： "),_("code",[t._v("newarray、anewarray、multianewarray")]),t._v("。(基本类型数组、引用类型数组、多维数组)")])]),t._v(" "),_("p",[t._v("上述创建指令可以用于创建对象或者数组，由于对象和数组在Java中的广泛使用，这些指令的使用频率也非常高。")]),t._v(" "),_("h3",{attrs:{id:"字段访问指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#字段访问指令"}},[t._v("#")]),t._v(" 字段访问指令")]),t._v(" "),_("p",[t._v("对象创建后，就可以通过对象访问指令获取对象实例或数组实例中的字段或者数组元素。")]),t._v(" "),_("ul",[_("li",[t._v("访问类字段（"),_("code",[t._v("static")]),t._v("字段，或者称为类变量）的指令："),_("code",[t._v("getstatic")]),t._v("、"),_("code",[t._v("putstatic")])]),t._v(" "),_("li",[t._v("访问类实例字段（非"),_("code",[t._v("static")]),t._v("字段，或者称为实例变量）的指令："),_("code",[t._v("getfield")]),t._v("、"),_("code",[t._v("putfield")])])]),t._v(" "),_("p",[t._v("举例：以"),_("code",[t._v("getstatic")]),t._v("指令为例，它含有一个操作数，为指向常量池的"),_("code",[t._v("Fieldref")]),t._v("索引，它的作用就是获取"),_("code",[t._v("Fieldref")]),t._v("指定的对象或者值，并将其压入操作数栈。")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hel1o"')]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("对应字节码指令：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" getstatic #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("java"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lang"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" ldc #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("hello"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" invokevirtual #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("java"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("io"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintStream")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("println"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_6.png",alt:"bytecode_instruction_set_6"}})]),t._v(" "),_("p",[t._v("注意：getXXX是入栈、putXXX是出栈。")]),t._v(" "),_("h3",{attrs:{id:"数组操作指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数组操作指令"}},[t._v("#")]),t._v(" 数组操作指令")]),t._v(" "),_("p",[t._v("数组操作指令主要有："),_("code",[t._v("xastore")]),t._v("和"),_("code",[t._v("xaload")]),t._v("指令。具体为：")]),t._v(" "),_("ul",[_("li",[t._v("把一个数组元素加载到操作数栈的指令："),_("code",[t._v("baload、caload、saload、iaload、laload、faload、daload、aaload")])]),t._v(" "),_("li",[t._v("将一个操作数栈的值存储到数组元素中的指令："),_("code",[t._v("bastore、castore、sastore、iastore、lastore、fastore、dastore、aastore")])])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("数组指令")]),t._v(" "),_("th",[t._v("byte(boolean)")]),t._v(" "),_("th",[t._v("char")]),t._v(" "),_("th",[t._v("short")]),t._v(" "),_("th",[t._v("long")]),t._v(" "),_("th",[t._v("long")]),t._v(" "),_("th",[t._v("float")]),t._v(" "),_("th",[t._v("double")]),t._v(" "),_("th",[t._v("reference")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[t._v("xaload")])]),t._v(" "),_("td",[t._v("baload")]),t._v(" "),_("td",[t._v("caload")]),t._v(" "),_("td",[t._v("saload")]),t._v(" "),_("td",[t._v("iaload")]),t._v(" "),_("td",[t._v("laload")]),t._v(" "),_("td",[t._v("faload")]),t._v(" "),_("td",[t._v("daload")]),t._v(" "),_("td",[t._v("aaload")])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("xastore")])]),t._v(" "),_("td",[t._v("bastore")]),t._v(" "),_("td",[t._v("castore")]),t._v(" "),_("td",[t._v("sastore")]),t._v(" "),_("td",[t._v("iastore")]),t._v(" "),_("td",[t._v("lastore")]),t._v(" "),_("td",[t._v("fastore")]),t._v(" "),_("td",[t._v("dastore")]),t._v(" "),_("td",[t._v("aastore")])])])]),t._v(" "),_("p",[t._v("取数组长度的指令："),_("code",[t._v("arraylength")]),t._v("。"),_("strong",[t._v("该指令弹出栈顶的数组元素，获取数组的长度，将长度压入栈")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("补充说明")])]),t._v(" "),_("ul",[_("li",[t._v("指令"),_("code",[t._v("xaload")]),t._v("表示将数组的元素压栈，比如"),_("code",[t._v("saload")]),t._v("、"),_("code",[t._v("caload")]),t._v("分别表示压入"),_("code",[t._v("short")]),t._v("数组和"),_("code",[t._v("char")]),t._v("数组。指令"),_("code",[t._v("xaload")]),t._v("在执行时，要求操作数中栈顶元素为"),_("strong",[t._v("数组索引")]),_("code",[t._v("i")]),t._v("，栈顶顺位第2个元素为"),_("strong",[t._v("数组引用")]),_("code",[t._v("a")]),t._v("，该指令会弹出栈顶这两个元素，并将"),_("code",[t._v("a[i]")]),t._v("重新压入栈。")]),t._v(" "),_("li",[_("code",[t._v("xastore")]),t._v("则专门针对数组操作，以"),_("code",[t._v("iastore")]),t._v("为例，它用于给一个"),_("code",[t._v("int")]),t._v("数组的给定索引赋值。在"),_("code",[t._v("iastore")]),t._v("执行前，操作数栈顶需要以此准备3个元素："),_("strong",[t._v("值、索引、数组引用")]),t._v("，"),_("code",[t._v("iastore")]),t._v("会弹出这3个值，并将值赋给数组中指定索引的位置。")])]),t._v(" "),_("h3",{attrs:{id:"类型检查指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型检查指令"}},[t._v("#")]),t._v(" 类型检查指令")]),t._v(" "),_("p",[t._v("检查类实例或数组类型的指令："),_("code",[t._v("instanceof")]),t._v("、"),_("code",[t._v("checkcast")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("指令"),_("code",[t._v("instanceof")]),t._v("用来判断给定对象是否是某一个类的实例，它会将判断结果压入操作数栈")]),t._v(" "),_("li",[t._v("指令"),_("code",[t._v("checkcast")]),t._v("用于检查类型强制转换是否可以进行。如果可以进行，那么"),_("code",[t._v("checkcast")]),t._v("指令不会改变操作数栈，否则它会抛出"),_("code",[t._v("ClassCastException")]),t._v("异常。")])]),t._v(" "),_("h2",{attrs:{id:"方法指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法指令"}},[t._v("#")]),t._v(" 方法指令")]),t._v(" "),_("h3",{attrs:{id:"方法调用指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法调用指令"}},[t._v("#")]),t._v(" 方法调用指令")]),t._v(" "),_("p",[t._v("方法调用指令："),_("code",[t._v("invokevirtual、invokeinterface、invokespecial、invokestatic、invokedynamic")]),t._v("，具体如下：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("invokevirtual")]),t._v("指令用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），支持多态。这也是Java语言中最"),_("strong",[t._v("常见的方法分派方式")]),t._v("。")]),t._v(" "),_("li",[_("code",[t._v("invokeinterface")]),t._v("指令用于"),_("strong",[t._v("调用接口方法")]),t._v("，它会在运行时搜索由特定对象所实现的这个接口方法，并找出适合的方法进行调用。")]),t._v(" "),_("li",[_("code",[t._v("invokespecial")]),t._v("指令用于调用一些需要特殊处理的实例方法，包括"),_("strong",[t._v("实例初始化方法（构造器）、私有方法和父类方法")]),t._v("。这些方法都是静态类型绑定的，不会在调用时进行动态派发。")]),t._v(" "),_("li",[_("code",[t._v("invokestatic")]),t._v("指令用于调用命名"),_("strong",[t._v("类中的类方法（static方法）")]),t._v("，这是静态绑定的。")]),t._v(" "),_("li",[_("code",[t._v("invokedynamic")]),t._v("指令用于调用动态绑定的方法，这个是JDK 1.7后新加入的指令。用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在Java虚拟机内部而"),_("code",[t._v("invokedynamic")]),t._v("指令的分派逻辑是由用户所设定的引导方法决定的。")])]),t._v(" "),_("h3",{attrs:{id:"方法返回指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法返回指令"}},[t._v("#")]),t._v(" 方法返回指令")]),t._v(" "),_("p",[t._v("方法调用结束前，需要进行返回。"),_("strong",[t._v("方法返回指令是根据返回值的类型区分的")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("包括"),_("code",[t._v("ireturn")]),t._v("（当返回值是boolean、byte、char、short和int 类型时使用）、"),_("code",[t._v("lreturn")]),t._v("、"),_("code",[t._v("freturn、")]),t._v("dreturn"),_("code",[t._v("和")]),t._v("areturn`。")]),t._v(" "),_("li",[t._v("另外还有一条"),_("code",[t._v("return")]),t._v(" 指令供声明为"),_("code",[t._v("void")]),t._v("ß的方法、实例初始化方法以及类和接口的类初始化方法使用。")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("方法返回指令")]),t._v(" "),_("th",[t._v("void")]),t._v(" "),_("th",[t._v("int")]),t._v(" "),_("th",[t._v("long")]),t._v(" "),_("th",[t._v("float")]),t._v(" "),_("th",[t._v("double")]),t._v(" "),_("th",[t._v("reference")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[t._v("xreturn")])]),t._v(" "),_("td",[t._v("return")]),t._v(" "),_("td",[t._v("ireturn")]),t._v(" "),_("td",[t._v("lreturn")]),t._v(" "),_("td",[t._v("freutrn")]),t._v(" "),_("td",[t._v("dreturn")]),t._v(" "),_("td",[t._v("areturn")])])])]),t._v(" "),_("p",[t._v("通过"),_("code",[t._v("xreturn")]),t._v("指令，"),_("strong",[t._v("将当前函数操作数栈的顶层元素弹出，并将这个元素压入调用者函数的操作数栈中")]),t._v("（因为调用者非常关心函数的返回值），所有在当前函数操作数栈中的其他元素都会被丢弃。")]),t._v(" "),_("p",[t._v("如果当前返回的是"),_("code",[t._v("synchronized")]),t._v("方法，那么还会执行一个隐含的"),_("code",[t._v("monitorexit")]),t._v("指令，退出临界区（详细见同步控制指令）。")]),t._v(" "),_("p",[t._v("最后，会丢弃当前方法的整个帧，恢复调用者的帧，并将控制权转交给调用者。")]),t._v(" "),_("p",[t._v("举例：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodReturn")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" k"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_8.png",alt:"bytecode_instruction_set_8"}})]),t._v(" "),_("h2",{attrs:{id:"操作数栈管理指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作数栈管理指令"}},[t._v("#")]),t._v(" 操作数栈管理指令")]),t._v(" "),_("p",[t._v("如同操作一个普通数据结构中的堆栈那样，JVM提供的操作数栈管理指令，可以用于"),_("strong",[t._v("直接操作操作数栈的指令")]),t._v("。")]),t._v(" "),_("p",[t._v("这类指令包括如下内容：")]),t._v(" "),_("ul",[_("li",[t._v("将一个或两个元素从栈顶弹出，并且直接废弃："),_("code",[t._v("pop，pop2")])]),t._v(" "),_("li",[t._v("复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶："),_("code",[t._v("dup，dup2，dup_x1，dup2_×1，dup_×2，dup2_×2")])]),t._v(" "),_("li",[t._v("将栈最顶端的两个"),_("code",[t._v("Slot")]),t._v("数值位置交换："),_("code",[t._v("swap")]),t._v("。Java虚拟机没有提供交换两个64位数据类型（long、double）数值的指令。")]),t._v(" "),_("li",[t._v("指令"),_("code",[t._v("nop")]),t._v("，是一个非常特殊的指令，它的字节码为0x00。和汇编语言中的nop一样，它表示什么都不做。这条指令一般可用于调试、占位等。")])]),t._v(" "),_("p",[t._v("这些指令属于通用型，对栈的压入或者弹出无需指明数据类型。")]),t._v(" "),_("p",[_("strong",[t._v("补充说明")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("不带"),_("code",[t._v("_x")]),t._v("的指令是"),_("strong",[t._v("复制栈顶数据并压入栈顶")]),t._v("。包括两个指令，"),_("code",[t._v("dup，dup2")]),t._v("。")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("dup")]),t._v("的系数代表要复制的"),_("code",[t._v("Slot")]),t._v("个数。"),_("code",[t._v("dup")]),t._v("开头的指令用于复制1个"),_("code",[t._v("Slot")]),t._v("的数据，例如1个"),_("code",[t._v("int")]),t._v("或1个"),_("code",[t._v("reference")]),t._v("类型数据。")]),t._v(" "),_("li",[_("code",[t._v("dup2")]),t._v("开头的指令用于复制2个"),_("code",[t._v("Slot")]),t._v("的数据。例如1个"),_("code",[t._v("long")]),t._v("，或2个"),_("code",[t._v("int")]),t._v("，或1个"),_("code",[t._v("int")]),t._v("+1个"),_("code",[t._v("float")]),t._v("类型数据")])])]),t._v(" "),_("li",[_("p",[t._v("带"),_("code",[t._v("_x")]),t._v("的指令是"),_("strong",[t._v("复制栈顶数据并插入栈顶以下的某个位置")]),t._v("。共有4个指令，"),_("code",[t._v("dup_×1，dup2_×1，dup_×2，dup2×2")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("对于带"),_("code",[t._v("_x")]),t._v("的复制插入指令，只要将指令的"),_("code",[t._v("dup")]),t._v("和"),_("code",[t._v("x")]),t._v("的系数相加，结果即为需要插入的位置。因此"),_("code",[t._v("dup_×1")]),t._v("插入位置：1+1=2，即栈顶2个"),_("code",[t._v("Slot")]),t._v("下面；"),_("code",[t._v("dup_×2")]),t._v("插入位置：1+2=3，即栈顶3个"),_("code",[t._v("Slot")]),t._v("下面；"),_("code",[t._v("dup2×1")]),t._v("插入位置：2+1=3，即栈顶3个"),_("code",[t._v("Slot")]),t._v("下面。")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("pop")]),t._v("：将栈顶的1个"),_("code",[t._v("Slot")]),t._v("数值出栈。例如1个"),_("code",[t._v("short")]),t._v("类型数值")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("pop2")]),t._v("：将栈顶的2个"),_("code",[t._v("Slot")]),t._v("数值出栈。例如1个"),_("code",[t._v("double")]),t._v("类型数值，或者2个"),_("code",[t._v("int")]),t._v("类型数值")])])]),t._v(" "),_("h2",{attrs:{id:"控制转移指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#控制转移指令"}},[t._v("#")]),t._v(" 控制转移指令")]),t._v(" "),_("p",[t._v("程序流程离不开条件控制，为了支持条件跳转，虚拟机提供了大量字节码指令，大体上可以分为：")]),t._v(" "),_("ul",[_("li",[t._v("比较指令")]),t._v(" "),_("li",[t._v("条件跳转指令")]),t._v(" "),_("li",[t._v("比较条件跳转指令")]),t._v(" "),_("li",[t._v("多条件分支跳转指令")]),t._v(" "),_("li",[t._v("无条件跳转指令等。")])]),t._v(" "),_("h3",{attrs:{id:"比较指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#比较指令"}},[t._v("#")]),t._v(" 比较指令")]),t._v(" "),_("p",[t._v("比较指令的作用是"),_("strong",[t._v("比较占栈顶两个元素的大小，并将比较结果入栈")]),t._v("。")]),t._v(" "),_("p",[t._v("比较指令有： "),_("code",[t._v("dcmpg、dcmpl、 fcmpg、fcmpl、lcmp")]),t._v("。与前面讲解的指令类似，首字符d表示"),_("code",[t._v("double")]),t._v("类型，f表示"),_("code",[t._v("float")]),t._v(",l表示"),_("code",[t._v("long")]),t._v("。")]),t._v(" "),_("p",[t._v("对于"),_("code",[t._v("double")]),t._v("和"),_("code",[t._v("float")]),t._v("类型的数字，由于NaN的存在，各有两个版本的比较指令。以"),_("code",[t._v("float")]),t._v("为例，有"),_("code",[t._v("fcmpg")]),t._v("和"),_("code",[t._v("fcmpl")]),t._v("两个指令，它们的区别在于在数字比较时，若遇到NaN值，处理结果不同。指令"),_("code",[t._v("dcmpl")]),t._v("和"),_("code",[t._v("dcmpg")]),t._v("也是类似的，根据其命名可以推测其含义，在此不再赘述。")]),t._v(" "),_("p",[t._v("指令"),_("code",[t._v("lcmp")]),t._v("针对"),_("code",[t._v("long")]),t._v("型整数，由于"),_("code",[t._v("long")]),t._v("型整数没有NaN值，故无需准备两套指令。")]),t._v(" "),_("p",[t._v("注意，数值类型的数据才可以谈大小！boolean、引用数据类型不能比较大小。")]),t._v(" "),_("p",[_("strong",[t._v("举例")])]),t._v(" "),_("p",[t._v("指令"),_("code",[t._v("fcmp")]),t._v("和"),_("code",[t._v("fcmpl")]),t._v("都从中弹出两个操作数，并将它们做比较，设"),_("strong",[t._v("栈顶的元素为v2")]),t._v("，顶顺位"),_("strong",[t._v("第2位的元素为v1")]),t._v("：")]),t._v(" "),_("ul",[_("li",[t._v("若v1=v2，则压入0；")]),t._v(" "),_("li",[t._v("若v1>v2，则压入1；")]),t._v(" "),_("li",[t._v("若v1<v2，则压入-1。")])]),t._v(" "),_("p",[t._v("两个指令的不同之处在于，如果遇到NaN值，"),_("code",[t._v("fcmpg")]),t._v("会压入1,而"),_("code",[t._v("fcmpl")]),t._v("会压入-1。")]),t._v(" "),_("h3",{attrs:{id:"条件跳转指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#条件跳转指令"}},[t._v("#")]),t._v(" 条件跳转指令")]),t._v(" "),_("p",[_("strong",[t._v("条件跳转指令通常和比较指令结合使用")]),t._v("。在条件跳转指令执行前，一般可以先用比较指令进行栈顶元素的准备，然后进行条件跳转。")]),t._v(" "),_("p",[t._v("条件跳转指令有："),_("code",[t._v("ifeq，iflt，ifle，ifne，ifgt，ifge，ifnull，ifnonnull")]),t._v("。这些指令都接收两个字节的操作数，用于计算跳转的位置（16位符号整数作为当前位置的"),_("code",[t._v("offset")]),t._v("）。")]),t._v(" "),_("p",[t._v("它们的统一含义为："),_("strong",[t._v("弹出栈顶元素，测试它是否满足某一条件，如果满足条件，则跳转到给定位置。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_9.png",alt:"bytecode_instruction_set_8"}})]),t._v(" "),_("p",[_("strong",[t._v("补充说明")])]),t._v(" "),_("p",[t._v("与前面运算规则一致：")]),t._v(" "),_("ul",[_("li",[t._v("对于"),_("code",[t._v("boolean、byte、char、short")]),t._v("类型的条件分支比较操作，都是使用"),_("code",[t._v("int")]),t._v("类型的比较指令完成")]),t._v(" "),_("li",[t._v("对于"),_("code",[t._v("long、float、double")]),t._v("类型的条件分支比较操作，则会先执行相应类型的比较运算指令，运算指令会返回一个整型值到操作数栈中，随后再执行"),_("code",[t._v("int")]),t._v("类型的条件分支比较操作来完成整个分支跳转。对于输出（System.out.println）比较结果，虽然得到的是"),_("code",[t._v("int")]),t._v("类型的值，但是我们可以在jclasslib中的常量池信息中看到写的是输出的是Z，代表布尔值类型（比较指令+条件跳转指令）")]),t._v(" "),_("li",[_("code",[t._v("int")]),t._v("类型值（包含byte、char、short）比较和对象类型值比较需要使用比较条件跳转指令。")])]),t._v(" "),_("p",[t._v("由于各类型的比较最终都会转为"),_("code",[t._v("int")]),t._v("类型的比较操作，所以Java虚拟机提供的"),_("code",[t._v("int")]),t._v("类型的条件分支指令是最为丰富和强大的。")]),t._v(" "),_("h3",{attrs:{id:"比较条件跳转指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#比较条件跳转指令"}},[t._v("#")]),t._v(" 比较条件跳转指令")]),t._v(" "),_("p",[t._v("比较条件跳转指令类似于"),_("strong",[t._v("比较指令和条件跳转指令的结合体，它将比较和跳转两个步骤合二为一")]),t._v("。")]),t._v(" "),_("p",[t._v("这类指令有："),_("code",[t._v("if_icmpeq、if_icmpne、if_icmplt、if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne")]),t._v("。其中指令助记符加上“if_”后，以字符“i”开头的指令针对"),_("code",[t._v("int")]),t._v("型整数操作（也包括short和byte类型），以字符“a”开头的指令表示对象引用的比较。")]),t._v(" "),_("p",[t._v("具体说明：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_10.png",alt:"bytecode_instruction_set_10"}})]),t._v(" "),_("p",[t._v("这些指令都接收两个字节的操作数作为参数，用于计算跳转的位置。同时在执行指令时，栈顶需要准备两个元素进行比较。指令执行完成后，栈顶的这两个元素被清空，且没有任何数据入栈。"),_("strong",[t._v("如果预设条件成立，则执行跳转，否则，继续执行下一条语句")]),t._v("（细品，你会发现这部分字节码指令都是跟代码反着来，猜测是为了符合“跳转”远处）。")]),t._v(" "),_("p",[_("strong",[t._v("补充说明")]),t._v("：")]),t._v(" "),_("ul",[_("li",[t._v("上面所说的后者是栈顶元素，而前者是栈顶下面的元素")]),t._v(" "),_("li",[t._v("对于"),_("code",[t._v("float、double、long")]),t._v("类型的比较，它们比较之后生成的是"),_("code",[t._v("int")]),t._v("类型的0、1、-1，这个过程可以使用"),_("strong",[t._v("比较指令和条件跳转指令")]),t._v(" 来完成。而"),_("code",[t._v("int")]),t._v("类型值（包含"),_("code",[t._v("byte、char、short")]),t._v("）比较和对象类型值比较需要使用**比较条件跳转指令，**其中对象类型值不是比较的地址，就是比较对象中的某些字段值，这又归咎到 "),_("code",[t._v("float、double、long、int")]),t._v("类型的比较中了。")]),t._v(" "),_("li",[t._v("无论哪种比较，也不管两个比较值的中间是什么符号（>、<、>=、<=等等），始终都是"),_("strong",[t._v("栈顶下部元素  比较符  栈顶元素")]),t._v("，这是不会改变的，然后结合比较符得出结果，如果是"),_("code",[t._v("true")]),t._v("，那就跳转，否则不跳转继续往下执行。")])]),t._v(" "),_("h3",{attrs:{id:"多条件分支跳转指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多条件分支跳转指令"}},[t._v("#")]),t._v(" 多条件分支跳转指令")]),t._v(" "),_("p",[t._v("多条件分支跳转指令"),_("strong",[t._v("是专为"),_("code",[t._v("switch-case")]),t._v("语句设计")]),t._v("的，主要有"),_("code",[t._v("tableswitch")]),t._v("和"),_("code",[t._v("lookupswitch")]),t._v("。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("指令名称")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("tableswitch")]),t._v(" "),_("td",[t._v("用于switch条件跳转，case值连续")])]),t._v(" "),_("tr",[_("td",[t._v("lookupswitch")]),t._v(" "),_("td",[t._v("用于switch条件跳转，case值不连续")])])])]),t._v(" "),_("p",[t._v("从助记符上看，两者都是switch语句的实现，它们的区别：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("tableswitch")]),t._v("要求"),_("strong",[t._v("多个条件分支值是连续")]),t._v("的，它内部只存放起始值和终止值，以及若干个跳转偏移量，通过给定的操作数index，可以立即定位到跳转偏移量位置，"),_("strong",[t._v("因此效率比较高")]),t._v("。")]),t._v(" "),_("li",[_("code",[t._v("lookupswitch")]),t._v("内部"),_("strong",[t._v("存放着各个离散的"),_("code",[t._v("case-offset")]),t._v("对")]),t._v("，每次执行都要搜索全部的case-offset对，找到匹配的case值，并根据对应的offset计算跳转地址，"),_("strong",[t._v("因此效率较低")]),t._v("。")])]),t._v(" "),_("p",[t._v("指令"),_("code",[t._v("tableswitch")]),t._v("的示意图如下图所示。由于"),_("code",[t._v("tableswitch")]),t._v("的"),_("code",[t._v("case")]),t._v("值是连续的，因此只需要记录最低值和最高值，以及每一项对应的"),_("code",[t._v("offset")]),t._v("偏移量，根据给定的"),_("code",[t._v("index")]),t._v("值通过简单的计算即可直接定位到"),_("code",[t._v("offse")]),t._v("t。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_11.png",alt:"bytecode_instruction_set_11"}})]),t._v(" "),_("p",[t._v("指令"),_("code",[t._v("lookupswitch")]),t._v("处理的是离散的"),_("code",[t._v("case")]),t._v("值，但是出于效率考虑，将"),_("code",[t._v("case-offset")]),t._v("对按照"),_("code",[t._v("case")]),t._v("值大小排序，给定"),_("code",[t._v("index")]),t._v("时，需要查找与"),_("code",[t._v("index")]),t._v("相等的"),_("code",[t._v("case")]),t._v("，获得其"),_("code",[t._v("offset")]),t._v("，如果找不到则跳转到"),_("code",[t._v("default")]),t._v("。指令"),_("code",[t._v("lookupswitch")]),t._v("如下图所示。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_12.png",alt:"bytecode_instruction_set_12"}})]),t._v(" "),_("h3",{attrs:{id:"无条件跳转指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#无条件跳转指令"}},[t._v("#")]),t._v(" 无条件跳转指令")]),t._v(" "),_("p",[_("strong",[t._v("目前主要的无条件跳转指令为"),_("code",[t._v("goto")])]),t._v("。指令"),_("code",[t._v("goto")]),t._v("接收两个字节的操作数，共同组成一个带符号的整数**，用于指定指令的偏移量，指令执行的目的就是跳转到偏移量给定的位置处**。")]),t._v(" "),_("p",[t._v("如果指令偏移量太大，超过双字节的带符号整数的范围，则可以使用指令"),_("code",[t._v("goto_w")]),t._v("，它和"),_("code",[t._v("goto")]),t._v("有相同的作用，但是它接收4个字节的操作数，可以表示更大的地址范围。")]),t._v(" "),_("p",[t._v("指令"),_("code",[t._v("jsr、jsr_w、ret")]),t._v("虽然也是无条件跳转的，但主要用于"),_("code",[t._v("try-finally")]),t._v("语句，且已经被虚拟机逐渐废弃，故不在这里介绍这两个指令。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("指令名称")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("goto")]),t._v(" "),_("td",[t._v("无条件跳转")])]),t._v(" "),_("tr",[_("td",[t._v("goto_w")]),t._v(" "),_("td",[t._v("无条件跳转（宽索引）")])]),t._v(" "),_("tr",[_("td",[t._v("jsr")]),t._v(" "),_("td",[t._v("跳转至指定16位offset位置，并将jsr下一条指令地址压入栈顶")])]),t._v(" "),_("tr",[_("td",[t._v("jsr_w")]),t._v(" "),_("td",[t._v("跳转至指定32位offer位置，并将jsr_w下一条指令地址压入栈顶")])]),t._v(" "),_("tr",[_("td",[t._v("ret")]),t._v(" "),_("td",[t._v("返回至由指定的局部变量所给出的指令位置（一般与jsr、jsr_w联合使用）")])])])]),t._v(" "),_("h2",{attrs:{id:"异常处理指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异常处理指令"}},[t._v("#")]),t._v(" 异常处理指令")]),t._v(" "),_("h3",{attrs:{id:"抛出异常指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抛出异常指令"}},[t._v("#")]),t._v(" 抛出异常指令")]),t._v(" "),_("p",[t._v("抛出异常指令："),_("code",[t._v("athrow")])]),t._v(" "),_("p",[t._v("在Java程序中显示抛出异常的操作（"),_("code",[t._v("throw")]),t._v("语句）都是由"),_("code",[t._v("athrow")]),t._v("指令来实现。")]),t._v(" "),_("p",[t._v("除了使用"),_("code",[t._v("throw")]),t._v("语句显示抛出异常情况之外，"),_("strong",[t._v("JVM规范还规定了许多运行时异常会在其他Java虚拟机指令检测到异常状况时自动抛出")]),t._v("。例如，在之前介绍的整数运算时，当除数为零时，虚拟机会在"),_("code",[t._v("idiv")]),t._v("或"),_("code",[t._v("ldiv")]),t._v("指令中抛出"),_("code",[t._v("ArithmeticException")]),t._v("异常。")]),t._v(" "),_("p",[t._v("注意：正常情况下，操作数栈的压入弹出都是一条条指令完成的。"),_("strong",[t._v("唯一的例外情况是在抛异常时，Java虚拟机会清除操作数栈上的所有内容，而后将异常实例压入调用者操作数栈上")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("补充说明")]),t._v("：如果使用"),_("code",[t._v("throw new 异常名称()")]),t._v(" 这种形式来抛出异常，那就会在代码中出现"),_("code",[t._v("athrow")]),t._v("指令，而在方法上面添加"),_("code",[t._v("throw 异常名称")]),t._v(" 这种形式来抛出异常，然后使用jclasslib的时候就会出现在方法下面多出现一个属性"),_("code",[t._v("Exceptions")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"异常处理与异常表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异常处理与异常表"}},[t._v("#")]),t._v(" 异常处理与异常表")]),t._v(" "),_("p",[t._v("处理异常：在Java虚拟机中，"),_("strong",[t._v("处理异常（"),_("code",[t._v("catch")]),t._v("语句）不是由字节码指令来实现的（早期使用jsr、ret指令），而是采用异常表来完成的")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("异常表")]),t._v("：如果一个方法定义了一个"),_("code",[t._v("try-catch")]),t._v("或者"),_("code",[t._v("try-finally")]),t._v("的异常处理，就会创建一个异常表。它包含了每个异常处理或者"),_("code",[t._v("finally")]),t._v("块的信息，异常表保存了每个异常处理信息。比如：")]),t._v(" "),_("ul",[_("li",[t._v("起始位置")]),t._v(" "),_("li",[t._v("结束位置")]),t._v(" "),_("li",[t._v("程序计数器记录的代码处理的偏移地址")]),t._v(" "),_("li",[t._v("被捕获的异常类在常量池中的索引")])]),t._v(" "),_("p",[_("strong",[t._v("当一个异常被抛出时，JVM会在当前的方法里寻找一个匹配的处理，如果没有找到，这个方法会强制结束并弹出当前栈帧")]),t._v("，并且异常会重新抛给上层调用的方法（在调用方法栈帧）。如果在所有栈帧弹出前仍然没有找到合适的异常处理，这个线程将终止。如果这个异常在最后一个非守护线程里抛出，将会导致JVM自己终止，比如这个线程是个"),_("code",[t._v("main")]),t._v("线程。")]),t._v(" "),_("p",[_("strong",[t._v("不管什么时候抛出异常，如果异常处理最终匹配了所有异常类型，代码就会继续执行")]),t._v("。在这种情况下，如果方法结束后没有抛出异常，仍然执行"),_("code",[t._v("finally")]),t._v("块，在"),_("code",[t._v("return")]),t._v("前，它直接跳到"),_("code",[t._v("finally")]),t._v("块来完成目标。")]),t._v(" "),_("p",[_("strong",[t._v("补充说明")]),t._v(":")]),t._v(" "),_("ul",[_("li",[t._v("异常表的含义是如果在"),_("code",[t._v("Start PC")]),t._v("和"),_("code",[t._v("End PC")]),t._v("之间（大于等于"),_("code",[t._v("Start PC")]),t._v("，"),_("code",[t._v("小于End PC")]),t._v("）出现对应的"),_("code",[t._v("Catch Type")]),t._v("异常问题（出现异常就匹配对应的异常），将会在"),_("strong",[t._v("操作数栈中压入相应的异常类对象")]),t._v("，之后跳转到"),_("code",[t._v("Handler PC")]),t._v("的位置去执行对应的字节码指令。")])]),t._v(" "),_("h2",{attrs:{id:"同步控制指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步控制指令"}},[t._v("#")]),t._v(" 同步控制指令")]),t._v(" "),_("p",[t._v("Java虚拟机支持两种同步结构："),_("strong",[t._v("方法级的同步")]),t._v("和"),_("strong",[t._v("方法内部一段指令序列的同步")]),t._v("，这两种同步都是使用"),_("code",[t._v("monitor")]),t._v("来支持的。")]),t._v(" "),_("h3",{attrs:{id:"方法级同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法级同步"}},[t._v("#")]),t._v(" 方法级同步")]),t._v(" "),_("p",[t._v("方法级的同步："),_("strong",[t._v("是隐式的")]),t._v("，即"),_("strong",[t._v("无须通过字节码指令来控制，它实现在方法调用和返回操作之中")]),t._v("。虚拟机可以从方法常量池的方法表结构中的"),_("code",[t._v("ACC_SYNCHRONIZED")]),t._v("访问标志得知一个方法是否声明为同步方法；")]),t._v(" "),_("p",[t._v("当调用方法时，调用指令将会检查方法的"),_("code",[t._v("ACC_SYNCHRONIZED")]),t._v("访问标志是否设置。")]),t._v(" "),_("ul",[_("li",[t._v("如果设置了，执行线程将先持有同步锁，然后执行方法。最后在方法完成（无论是正常完成还是非正常完成）时释放同步锁。")]),t._v(" "),_("li",[t._v("在方法执行期间，执行线程持有了同步锁，其他任何线程都无法再获得同一个锁。")]),t._v(" "),_("li",[t._v("如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的锁将在异常抛到同步方法之外时自动释放。")])]),t._v(" "),_("p",[t._v("举例：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ti"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("对应的字节码：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  aload_0\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  dup\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  getfield #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  iconst_1 \n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("  iadd\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("  putfield #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),_("p",[t._v("这段代码和普通的无同步操作的代码没有什么不同，没有使用"),_("code",[t._v("monitorenter")]),t._v("和"),_("code",[t._v("monitorexit")]),t._v("进行同步区控制。这是因为，对于同步方法而言，"),_("strong",[t._v("当虚拟机通过方法的访问标示符判断是一个同步方法时，会自动在方法调用前进行加锁")]),t._v("，当同步方法执行完毕后，不管方法是正常结束还是有异常抛出，均会由虚拟机释放这个锁。因此，对于同步方法而言，"),_("code",[t._v("monitorenter")]),t._v("和"),_("code",[t._v("monitorexit")]),t._v("指令是隐式存在的，并未直接出现在字节码中。")]),t._v(" "),_("h3",{attrs:{id:"方法内指定指令序列的同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法内指定指令序列的同步"}},[t._v("#")]),t._v(" 方法内指定指令序列的同步")]),t._v(" "),_("p",[t._v("同步一段指令集序列：指由Java中的"),_("code",[t._v("synchronized")]),t._v("语句块来表示的代码段，对应的JVM的指令集有"),_("code",[t._v("monitorenter")]),t._v("和"),_("code",[t._v("monitorexit")]),t._v(" 两条指令来支持"),_("code",[t._v("synchronized")]),t._v("关键字的语义。")]),t._v(" "),_("p",[_("strong",[t._v("执行原理")])]),t._v(" "),_("ul",[_("li",[t._v("当一个线程进入同步代码块时，它使用"),_("code",[t._v("monitorenter")]),t._v("指令请求进入。如果当前对象的监视器计数器为0，则它会被准许进入，若为1，则判断持有当前监视器的线程是否为自己，如果是，则进入，否则进行等待，直到对象的监视器计数器为0，才会被允许进入同步块。")]),t._v(" "),_("li",[t._v("当线程退出同步块时，需要使用"),_("code",[t._v("monitorexit")]),t._v("声明退出。在Java虚拟机中，任何对象都有一个监视器与之相关联，用来判断对象是否被锁定，当监视器被持有后，对象处于锁定状态。")]),t._v(" "),_("li",[t._v("指令"),_("code",[t._v("monitorenter")]),t._v("和"),_("code",[t._v("monitorexit")]),t._v("在执行时，都需要在操作数栈顶压入对象，之后"),_("code",[t._v("monitorenter")]),t._v("和"),_("code",[t._v("monitorexit")]),t._v("的锁定和释放都是针对这个对象的监视器进行的。")])]),t._v(" "),_("p",[t._v("下图展示了监视器如何保护临界区代码不同时被多个线程访问，只有当线程4离开临界区后，线程1、2、3才有可能进入。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/bytecode_instruction_set_13.png",alt:"bytecode_instruction_set_13"}})]),t._v(" "),_("p",[_("strong",[t._v("举例")])]),t._v(" "),_("p",[t._v("Java代码：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" obj "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("subtract")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("p",[t._v("字节码：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" aload_0\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" getfield #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("com"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("atguigu"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("java1"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedTest")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("obj "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ljava")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("lang"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" dup\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" astore_1\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" monitorenter "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作数栈中的对象和monitorenter结合起来可以让线程获取锁, 让对象的监视器标记从0变成1(上锁)")]),t._v("\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" aload_0\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" dup\n "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" getfield #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("com"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("atguigu"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("java1"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedTest")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("I")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" iconst_1\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" isub\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(" putfield #"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("com"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("atguigu"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("java1"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronizedTest")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("I")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" aload_1\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" monitorexit "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作数栈的aload_1和monitorexit结合起来就可以让线程解锁，做法就是让对象的监视器标记从1变成0")]),t._v("\n               "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解锁需要在方法退出之前完成, 出现了任何异常，将会跳到异常处理的字节码处执行相关代码，")]),t._v("\n               "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果异常处理的字节码部分出现了问题，那就重新执行异常处理的字节码")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v(" astore_2\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(" aload_1\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v(" monitorexit\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(" aload_2\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v(" athrow\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),_("p",[t._v("根据例子可知，编译器必须确保无论方法通过何种方式完成，方法中调用过的每条"),_("code",[t._v("monitorenter")]),t._v("指令都必须执行其对应的"),_("code",[t._v("monitorexit")]),t._v("指令，而无论这个方法是正常结束还是异常结束。所以为了保证在方法异常完成时"),_("code",[t._v("monitorenter")]),t._v("和"),_("code",[t._v("monitorexit")]),t._v("指令依然可以正确配对执行，"),_("strong",[t._v("编译器会自动产生一个异常处理器")]),t._v("，这个异常处理器声明可处理所有的异常，它的目的就是用来执行"),_("code",[t._v("monitorexit")]),t._v("指令")])])}),[],!1,null,null,null);s.default=v.exports}}]);