(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{471:function(t,s,a){t.exports=a.p+"assets/img/docker_gitlab.e477cb25.png"},472:function(t,s,a){t.exports=a.p+"assets/img/docker_gitlab_1.63e13260.png"},768:function(t,s,a){"use strict";a.r(s);var r=a(58),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"docker-compose部署gitlab"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose部署gitlab"}},[t._v("#")]),t._v(" Docker Compose部署GitLab")]),t._v(" "),r("h2",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),r("p",[t._v("GitLab 是利用 Ruby on Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与 Github 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序 (Wall) 进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。")]),t._v(" "),r("h2",{attrs:{id:"基于docker安装gitlab"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于docker安装gitlab"}},[t._v("#")]),t._v(" 基于Docker安装GitLab")]),t._v(" "),r("p",[t._v("注意，安装GitLab"),r("a",{attrs:{href:"https://docs.gitlab.com/ee/install/requirements.html#memory",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方建议是至少4G内存"),r("OutboundLink")],1),t._v("，之前我尝试部署到云的时候，直接把我云实例可怜的2G给干爆。即使在尝试GitLab优化也无法降低内存消耗，访问GitLab页面的时候一直在504，最后只能将其部署在一个本地虚拟机上。")]),t._v(" "),r("p",[t._v("我们使用 Docker 来安装和运行 GitLab 中文版，由于新版本问题较多，这里我们使用目前相对稳定的 10.5 版本，"),r("code",[t._v("docker-compose.yml")]),t._v(" 配置如下：")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("version: "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("\nservices:\n    web:\n      image: "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'twang2218/gitlab-ce-zh:10.5'")]),t._v("\n      restart: always\n      hostname: "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'192.168.99.101'")]),t._v("\n      environment:\n        TZ: "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Asia/Shanghai'")]),t._v("\n        GITLAB_OMNIBUS_CONFIG: "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n          external_url "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://192.168.99.101:8080'")]),t._v("\n          gitlab_rails"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gitlab_shell_ssh_port'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2222")]),t._v("\n          unicorn"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'port'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v("\n          nginx"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'listen_port'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n      ports:\n        - "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'8080:8080'")]),t._v("\n        - "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'8443:443'")]),t._v("\n        - "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2222:22'")]),t._v("\n      volumes:\n        - /usr/local/docker/gitlab/config:/etc/gitlab\n        - /usr/local/docker/gitlab/data:/var/opt/gitlab\n        - /usr/local/docker/gitlab/logs:/var/log/gitlab\n\n")])])]),r("p",[t._v("配置说明：")]),t._v(" "),r("ol",[r("li",[t._v("hostname，换成域名或者宿主机的ip地址。")]),t._v(" "),r("li",[t._v("GITLAB_OMNIBUS_CONFIG，是GitLab的一些配置，关于暴露的端口、nginx监听的端口。")])]),t._v(" "),r("p",[t._v("启动（如果服务器配置较低，启动需要较长时间）：")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("docker@docker-saas:/usr/local/docker/gitlab/config$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up -d                                                                                                                                                                   \nCreating network "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gitlab_default"')]),t._v(" with the default driver\nCreating gitlab_web_1 "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),r("h2",{attrs:{id:"安装后工作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装后工作"}},[t._v("#")]),t._v(" 安装后工作")]),t._v(" "),r("ul",[r("li",[t._v("访问地址（根据自己的配置访问）：http://192.168.99.100:8080/，并设置管理员（root）初始密码，建议：字母 + 数字 组合，并且 大于等于 8 位")])]),t._v(" "),r("p",[r("img",{attrs:{src:a(471),alt:"docker_gitlab"}})]),t._v(" "),r("ul",[r("li",[t._v("使用root用户登录，管理GitLab，建议进行以下初始化配置。\n"),r("ul",[r("li",[t._v("建议不使直接使用root用户，创建一个新管理员账号。入口：添加人员，创建完成后再编辑修改密码。")]),t._v(" "),r("li",[t._v("建议关闭Gravatar头像功能，网络不理想情况下可能会卡顿。入口：配置GitLab-》设置-》账户与限制设置-》开启 Gravatar 头像")]),t._v(" "),r("li",[t._v("建议关闭注册功能，由管理员统一配置。入口：配置GitLab-》设置-》注册限制 -》开启注册")])])])]),t._v(" "),r("p",[r("img",{attrs:{src:a(472),alt:"docker_gitlab"}})]),t._v(" "),r("h2",{attrs:{id:"gitlab的内存优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitlab的内存优化"}},[t._v("#")]),t._v(" GitLab的内存优化")]),t._v(" "),r("p",[t._v("经过我的实践，采用默认的配置下，初次部署GitLab大概需要2G左右的内存。可参考"),r("a",{attrs:{href:"https://blog.csdn.net/ouyang_peng/article/details/84066417",target:"_blank",rel:"noopener noreferrer"}},[t._v("【Git学习】解决GitLab内存消耗大的问题"),r("OutboundLink")],1),t._v("进行一些修改优化，主要是修改 "),r("code",[t._v("/etc/gitlab/gitlab.rb")]),t._v("里面的配置，由上可知，我们已经挂载了数据卷到"),r("code",[t._v("/usr/local/docker/gitlab/config")]),t._v(",我们只要该目录下的"),r("code",[t._v("gitlab.rb")]),t._v("即可：")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("减少进程数")]),t._v(" "),r("p",[t._v("根据服务器使用情况，给Unicorn['worker_process']设置一个合适的值。官方建议是CPU核心数加1，可以提高服务器响应速度。")]),t._v(" "),r("p",[t._v("简单来说就是，如果这个配置的值小，当使用GitLab的人数到达一定量可能会卡。官方默认是安装CPU核心数加1，最小值为2。我这里是测试用的，当然设置为2。附："),r("a",{attrs:{href:"https://docs.gitlab.com/ee/install/requirements.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("docker@docker-saas:/usr/local/docker/gitlab/config$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" gitlab.rb \n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# unicorn['worker_timeout'] = 60       ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###! Minimum worker_processes is 2 at this moment                       ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("###! See https://gitlab.com/gitlab-org/gitlab-ce/issues/18771")]),t._v("\nunicorn"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_processes'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("   \n")])])])]),t._v(" "),r("li",[r("p",[t._v("进程内存配置。最小默认400MB，最大 650MB，可适当改小。")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("unicorn"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_memory_limit_min'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"200 * 1 << 20"')]),t._v("                                                              \nunicorn"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_memory_limit_max'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"350 * 1 << 20"')]),t._v("\n\n")])])])]),t._v(" "),r("li",[r("p",[t._v("减少数据库缓存，默认256，可适当改小。")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("postgresql"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shared_buffers'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"256MB"')]),t._v("   \n")])])])]),t._v(" "),r("li",[r("p",[t._v("减少数据库并发数，默认8，可适当改小。")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("postgresql"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'max_worker_processes'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" \n")])])])]),t._v(" "),r("li",[r("p",[t._v("减少sidekiq并发数，默认25，可适当改小。")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("sidekiq"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'concurrency'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n")])])])])]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/ouyang_peng/article/details/84066417",target:"_blank",rel:"noopener noreferrer"}},[t._v("【Git学习】解决GitLab内存消耗大的问题"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);