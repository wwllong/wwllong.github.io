(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{713:function(t,e,s){"use strict";s.r(e);var v=s(58),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"ci-cd概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd概述"}},[t._v("#")]),t._v(" CI/CD概述")]),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("p",[t._v("互联网软件的开发和发布，已经形成了一套标准流程，最重要的组成部分就是CI/CD，它们是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。CI/CD 的核心概念是持续集成、持续交付和持续部署。")]),t._v(" "),s("ul",[s("li",[t._v("持续集成：频繁地（一天多次）将代码集成到主干")]),t._v(" "),s("li",[t._v("持续交付：频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。")]),t._v(" "),s("li",[t._v("持续部署：持续交付的下一步，代码通过评审以后，自动部署到生产环境。")])]),t._v(" "),s("h2",{attrs:{id:"持续集成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持续集成"}},[t._v("#")]),t._v(" 持续集成")]),t._v(" "),s("p",[t._v("持续集成（Continuous Integration，简称 CI）指的是，频繁地（一天多次）将代码集成到主干。它的好处主要有两个：")]),t._v(" "),s("ul",[s("li",[t._v("快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。")]),t._v(" "),s("li",[t._v("防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。")])]),t._v(" "),s("p",[t._v("Martin Fowler 说过，"),s("strong",[t._v('"持续集成并不能消除 Bug，而是让它们非常容易发现和改正。"')])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://qiniu.wenwl.site/notes/ci.jpeg",alt:"ci.png"}})]),t._v(" "),s("p",[t._v("持续集成强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。")]),t._v(" "),s("p",[t._v("与持续集成相关的，还有两个概念，分别是持续交付和持续部署。")]),t._v(" "),s("h2",{attrs:{id:"持续交付"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持续交付"}},[t._v("#")]),t._v(" 持续交付")]),t._v(" "),s("p",[t._v("持续交付（Continuous Delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。")]),t._v(" "),s("p",[t._v("持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。\n"),s("img",{attrs:{src:"http://qiniu.wenwl.site/notes/cd-delivery.jpeg",alt:"cd-delivery.jpeg"}})]),t._v(" "),s("p",[t._v("持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。")]),t._v(" "),s("h2",{attrs:{id:"持续部署"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持续部署"}},[t._v("#")]),t._v(" 持续部署")]),t._v(" "),s("p",[t._v("持续部署（Continuous Deployment）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。")]),t._v(" "),s("p",[t._v("持续部署的前提是能自动化完成测试、构建、部署等步骤。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://qiniu.wenwl.site/notes/cd-deployment.jpeg",alt:"cd-deployment.jpeg"}})]),t._v(" "),s("p",[t._v("持续部署与持续交付的主要区别是在代码部署到生产环境这一个环节，持续部署侧重点是自动化部署，而后者则需要手动部署，在实际项目中，更多的是使用持续交付手动去部署到生产环境，因为自动化在实际生活中实施起来比较困难。")])])}),[],!1,null,null,null);e.default=a.exports}}]);