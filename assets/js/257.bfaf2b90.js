(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{915:function(s,t,e){"use strict";e.r(t);var v=e(58),o=Object(v.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"会话机制与多系统的复杂性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#会话机制与多系统的复杂性"}},[s._v("#")]),s._v(" 会话机制与多系统的复杂性")]),s._v(" "),e("p",[s._v("Http协议是无状态的，任何用户都能访问，而会话机制让服务器和浏览器共同维护一个状态，并且保护服务器资源。会话机制能很好得解决单系统的登陆问题，但是由于多系统的复杂性，会话机制已经不适用于多系统。")]),s._v(" "),e("h2",{attrs:{id:"http-无状态协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-无状态协议"}},[s._v("#")]),s._v(" HTTP 无状态协议")]),s._v(" "),e("p",[e("code",[s._v("Web")]),s._v(" 应用采用 "),e("code",[s._v("browser/server")]),s._v(" 架构，"),e("code",[s._v("Http")]),s._v(" 作为通信协议。"),e("code",[s._v("Http")]),s._v(" 是"),e("strong",[s._v("无状态协议")]),s._v("，浏览器的每一次请求，服务器会独立处理，不与之前或之后的请求产生关联，例如下图，三次请求/响应对之间没有任何联系：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://qiniu.wenwl.site/notes/sso-session-1.png",alt:"sso-session-1"}})]),s._v(" "),e("p",[s._v("但这也同时意味着，任何用户都能通过浏览器访问服务器资源，如果想保护服务器的某些资源，必须限制浏览器请求；要限制浏览器请求，必须鉴别浏览器请求，响应合法请求，忽略非法请求；要鉴别浏览器请求，必须清楚浏览器请求状态。既然 "),e("code",[s._v("Http")]),s._v(" 协议无状态，那就让服务器和浏览器共同维护一个状态吧！这就是"),e("strong",[s._v("会话机制")]),s._v("。")]),s._v(" "),e("h2",{attrs:{id:"会话机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#会话机制"}},[s._v("#")]),s._v(" 会话机制")]),s._v(" "),e("p",[s._v("浏览器第一次请求服务器，服务器创建一个会话，并将会话的 "),e("code",[s._v("ID")]),s._v(" 作为响应的一部分发送给浏览器，浏览器存储会话 "),e("code",[s._v("ID")]),s._v("，并在后续第二次和第三次请求中带上会话 "),e("code",[s._v("ID")]),s._v("，服务器取得请求中的会话 "),e("code",[s._v("ID")]),s._v(" 就知道是不是同一个用户了，例如下图，后续请求与第一次请求产生了关联：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://qiniu.wenwl.site/notes/sso-session-2.png",alt:"sso-session-2"}})]),s._v(" "),e("p",[s._v("服务器在内存中有两种保存会话的方式："),e("strong",[s._v("请求参数")]),s._v(" 和 "),e("strong",[s._v("Cookie")]),s._v("。")]),s._v(" "),e("ul",[e("li",[s._v("请求参数：将会话 "),e("code",[s._v("ID")]),s._v(" 作为每一个请求的参数，服务器接收请求自然能解析参数获得会话 "),e("code",[s._v("ID")]),s._v("，并借此判断是否来自同一会话，很明显，这种方式不靠谱。")]),s._v(" "),e("li",[s._v("Cookie：浏览器自己来维护这个会话 "),e("code",[s._v("ID")]),s._v(" ，每次发送 "),e("code",[s._v("http")]),s._v(" 请求时浏览器自动发送会话 "),e("code",[s._v("ID")]),s._v("，"),e("code",[s._v("Cookie")]),s._v(" 机制正好用来做这件事。"),e("code",[s._v("Cookie")]),s._v(" 是浏览器用来存储少量数据的一种机制，数据以 "),e("code",[s._v("key/value")]),s._v(" 形式存储，浏览器发送 "),e("code",[s._v("Http")]),s._v(" 请求时自动附带 "),e("code",[s._v("Cookie")]),s._v(" 信息。")])]),s._v(" "),e("p",[e("code",[s._v("Tomcat")]),s._v(" 会话机制当然也实现了 "),e("code",[s._v("Cookie")]),s._v("，访问 "),e("code",[s._v("Tomcat")]),s._v(" 服务器时，浏览器中可以看到一个名为 "),e("code",[s._v("JSESSIONID")]),s._v(" 的 "),e("code",[s._v("Cookie")]),s._v("，这就是 "),e("code",[s._v("Tomcat")]),s._v(" 会话机制维护的会话 "),e("code",[s._v("ID")]),s._v("，使用了 "),e("code",[s._v("Cookie")]),s._v(" 的请求响应过程如下图")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://qiniu.wenwl.site/notes/sso-session-3.png",alt:"sso-session-3"}})]),s._v(" "),e("h2",{attrs:{id:"登录状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#登录状态"}},[s._v("#")]),s._v(" 登录状态")]),s._v(" "),e("p",[s._v("有了会话机制，登录状态就好明白了，我们假设浏览器第一次请求服务器需要输入用户名与密码验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当前持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“已登录”等等之类的状态，既然是会话的状态，自然要保存在会话对象中，"),e("code",[s._v("Tomcat")]),s._v(" 在会话对象中设置登录状态如下：")]),s._v(" "),e("div",{staticClass:"language-Java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSession")]),s._v(" session "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSession")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsession"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAttribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"isLogin"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),e("p",[s._v("用户再次访问时，"),e("code",[s._v("Tomcat")]),s._v(" 在会话对象中查看登录状态")]),s._v(" "),e("div",{staticClass:"language-Java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HttpSession")]),s._v(" session "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSession")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsession"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAttribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"isLogin"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),e("p",[s._v("实现了登录状态的浏览器请求服务器模型，如下图：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://qiniu.wenwl.site/notes/sso-session-4.png",alt:"sso-session-4"}})]),s._v(" "),e("p",[s._v("每次请求受保护资源时都会检查会话对象中的登录状态，只有 "),e("code",[s._v("isLogin=true")]),s._v(" 的会话才能访问，登录机制因此而实现。")]),s._v(" "),e("h2",{attrs:{id:"多系统登录的复杂性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多系统登录的复杂性"}},[s._v("#")]),s._v(" 多系统登录的复杂性")]),s._v(" "),e("p",[e("code",[s._v("Web")]),s._v(" 系统早已从久远的"),e("strong",[s._v("单系统")]),s._v("发展成为如今由"),e("strong",[s._v("多系统组成的应用群")]),s._v("，面对如此众多的系统，用户难道要一个一个登录、然后一个一个注销吗？"),e("code",[s._v("Web")]),s._v(" 系统由单系统发展成多系统组成的应用群，复杂性应该由系统内部承担，而不是用户。"),e("strong",[s._v("无论 "),e("code",[s._v("Web")]),s._v(" 系统内部多么复杂，对用户而言，都是一个统一的整体")]),s._v("，也就是说，用户访问 "),e("code",[s._v("Web")]),s._v(" 系统的整个应用群与访问单个系统一样，登录/注销只要一次就够了。如下图：")]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("img",{attrs:{src:"https://qiniu.wenwl.site/notes/sso-multisystem-complex-1.png",alt:"sso-multisystem-complex-1"}})]),s._v(" "),e("th",[e("img",{attrs:{src:"https://qiniu.wenwl.site/notes/sso-multisystem-complex-2.png",alt:"sso-multisystem-complex-2"}})])])]),s._v(" "),e("tbody")]),s._v(" "),e("p",[s._v("虽然单系统的登录解决方案很完美，但对于多系统应用群已经不再适用了，为什么呢？首先，单系统登录解决方案的核心是 "),e("code",[s._v("Cookie")]),s._v("，"),e("code",[s._v("Cookie")]),s._v(" 携带会话 "),e("code",[s._v("ID")]),s._v(" 在浏览器与服务器之间维护会话状态。但 "),e("code",[s._v("Cookie")]),s._v(" 是有限制的，这个限制就是 "),e("code",[s._v("Cookie")]),s._v(" 域（通常对应网站的域名），浏览器发送 "),e("code",[s._v("Http")]),s._v(" 请求时会自动携带与该域匹配的 "),e("code",[s._v("Cookie")]),s._v("，而不是所有 "),e("code",[s._v("Cookie")]),s._v("。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://qiniu.wenwl.site/notes/sso-multisystem-complex-3.png",alt:"sso-multisystem-complex-3"}})]),s._v(" "),e("p",[s._v("既然这样，为什么不将 "),e("code",[s._v("Web")]),s._v(" 应用群中所有子系统的域名统一在一个顶级域名下，例如 "),e("code",[s._v("*.baidu.com")]),s._v("，然后将它们的 "),e("code",[s._v("Cookie")]),s._v(" 域设置为 "),e("code",[s._v("baidu.com")]),s._v("，这种做法理论上是可以的，甚至早期很多多系统登录就采用这种"),e("strong",[s._v("同源策略")]),s._v("共享 "),e("code",[s._v("Cookie")]),s._v(" 。然而，可行并不代表好，"),e("strong",[s._v("共享 "),e("code",[s._v("Cookie")]),s._v(" 的方式存在众多局限")]),s._v("：")]),s._v(" "),e("ul",[e("li",[s._v("首先，应用群域名得统一")]),s._v(" "),e("li",[s._v("其次，应用群各系统使用的技术（至少是 "),e("code",[s._v("web")]),s._v(" 服务器）要相同，不然 "),e("code",[s._v("Cookie")]),s._v(" 的 "),e("code",[s._v("key")]),s._v(" 值不同（"),e("code",[s._v("Tomcat")]),s._v(" 为 "),e("code",[s._v("JSESSIONID")]),s._v("），无法维持会话，"),e("strong",[s._v("共享 "),e("code",[s._v("Cookie")]),s._v(" 的方式是无法实现跨语言技术平台登录")]),s._v("的，比如"),e("code",[s._v("Java")]),s._v("、"),e("code",[s._v("Php")]),s._v("、"),e("code",[s._v("Python")]),s._v(" 语言搭建的系统")]),s._v(" "),e("li",[s._v("第三，"),e("code",[s._v("Cookie")]),s._v(" 本身不安全")])]),s._v(" "),e("p",[s._v("因此，我们需要一种全新的登录方式来实现多系统应用群的登录，那就是 "),e("strong",[s._v("单点登录")]),s._v("。")])])}),[],!1,null,null,null);t.default=o.exports}}]);