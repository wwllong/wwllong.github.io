(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{641:function(v,t,_){v.exports=_.p+"assets/img/third-model.45877910.png"},642:function(v,t,_){v.exports=_.p+"assets/img/mvc-model.1ac2d2ab.png"},643:function(v,t,_){v.exports=_.p+"assets/img/third-mvc-model.998c9ae3.png"},965:function(v,t,_){"use strict";_.r(t);var s=_(58),r=Object(s.a)({},(function(){var v=this,t=v.$createElement,s=v._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"三层架构与mvc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三层架构与mvc"}},[v._v("#")]),v._v(" 三层架构与MVC")]),v._v(" "),s("h2",{attrs:{id:"什么是系统架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是系统架构"}},[v._v("#")]),v._v(" 什么是系统架构")]),v._v(" "),s("p",[v._v("系统架构是指整合应用系统程序大的结构。经常提到的系统结构有两种："),s("strong",[v._v("三层架构与MVC")]),v._v("。这两种结构既有区别，又有联系。但这两种结构的使用，均是为了"),s("strong",[v._v("降低系统模块间的耦合度，降低系统的复杂度")]),v._v("。")]),v._v(" "),s("h2",{attrs:{id:"什么是三层架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是三层架构"}},[v._v("#")]),v._v(" 什么是三层架构")]),v._v(" "),s("p",[v._v("三层架构属于系统架构的一种。三层架构是指："),s("strong",[v._v("视图层View")]),v._v("、"),s("strong",[v._v("服务层Service")]),v._v("、"),s("strong",[v._v("持久层DAO")]),v._v("。它们分别完成不同的功能。")]),v._v(" "),s("ul",[s("li",[v._v("View层（视图层）：用于接收用户提交请求的代码")]),v._v(" "),s("li",[v._v("Service层（业务逻辑层）：系统的业务逻辑主要在这里完成")]),v._v(" "),s("li",[v._v("DAO层（数据访问层）：直接操作数据库的代码")])]),v._v(" "),s("p",[v._v("架构层命名原则："),s("strong",[v._v("约定优于配置")])]),v._v(" "),s("p",[v._v("为了"),s("strong",[v._v("更好的降低各层间的耦合度")]),v._v("，在三层架构程序设计中，采用"),s("strong",[v._v("面向抽象编程")]),v._v("。即上层对下层的调用，是通过接口实现的。而下层对上层的真正服务提供者，是下层接口的实现类。"),s("strong",[v._v("服务标准〔接口）是相同的，服务提供者（实现类）可以更换，这就实现了层间解耦合")]),v._v("。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(641),alt:"三层架构"}})]),v._v(" "),s("p",[v._v("三层架构经典案例：c#的petshop项目")]),v._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[v._v("补充")]),v._v(" "),s("p",[v._v("1.为什么要用数据库？数据库解决数据读写、存储、检索效率的问题。")]),v._v(" "),s("p",[v._v("2.关于代码开发，实现高内聚、低耦合的原则：")]),v._v(" "),s("ul",[s("li",[v._v("一个类只做一种事：高内聚")]),v._v(" "),s("li",[v._v("一个方法只做一件事")]),v._v(" "),s("li",[v._v("写且写一次")])]),v._v(" "),s("p",[v._v("3.开发中，业务才是核心，技术辅助业务。通常，业务越复杂，系统的耦合度越高，对于业务的复杂度，使用事务来衡量。")]),v._v(" "),s("ul",[s("li",[v._v("简单业务：只开启一个事务")]),v._v(" "),s("li",[v._v("普通业务：开启三个事务")]),v._v(" "),s("li",[v._v("复杂业务：开启七个事务")])]),v._v(" "),s("p",[v._v("解决办法：多张表之间有依赖关系，说明有强关联，这个时候要想办法分拆业务。")])]),v._v(" "),s("h2",{attrs:{id:"什么是mvc模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvc模式"}},[v._v("#")]),v._v(" 什么是MVC模式")]),v._v(" "),s("p",[v._v("MVC，即"),s("strong",[v._v("Model模型、View视图及Controller控制器")]),v._v("。")]),v._v(" "),s("ul",[s("li",[v._v("View：视图，为用户提供使用界面，与用户直接进行交互。")]),v._v(" "),s("li",[v._v("Model：模型，承载数据，并对用户的提交请求进行计算的模块。分为两类，一类称为"),s("strong",[v._v("数据模型")]),v._v("，一类称为"),s("strong",[v._v("业务模型")]),v._v("。所谓数据模型是指实体类，专门承载业务数据的，如Student、User等。而业务模型则是指Service或Dao对象，专门用于处理用户提交请求。")]),v._v(" "),s("li",[v._v("Controller：控制器，用于将用户求转发给相应的的Model进行处理，并根据Model的计算结果向用户提供相应响应。")])]),v._v(" "),s("h2",{attrs:{id:"mvc架构程序的工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mvc架构程序的工作流程"}},[v._v("#")]),v._v(" MVC架构程序的工作流程")]),v._v(" "),s("ul",[s("li",[v._v("用户通过View页面向服务端提出请求。可以是表单请求、超链接请求、AJAX请求等")]),v._v(" "),s("li",[v._v("服务端Controller控制器接收到请求后对请求进行解析，找到相应的Model对用户请求进行处理")]),v._v(" "),s("li",[v._v("Model处理后，将处理结果再交给Controller")]),v._v(" "),s("li",[v._v("Controller在接到处理结果后，根据处理结果找到作要作为向客户端发回的晌应View页面。页面经渲染（数据填充〕后，再发送给客户端。")])]),v._v(" "),s("p",[s("img",{attrs:{src:_(642),alt:"MVC架构程序的工作流程"}})]),v._v(" "),s("h2",{attrs:{id:"三层架构-与-mvc-模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三层架构-与-mvc-模式"}},[v._v("#")]),v._v(" 三层架构 与 MVC 模式")]),v._v(" "),s("p",[s("img",{attrs:{src:_(643),alt:"MVC架构程序的工作流程"}})]),v._v(" "),s("p",[s("strong",[v._v("MVC模式其实是应用在三层架构中的view层。MVC模式将三层架构中的view层进行了解耦")]),v._v("。传统开发中（servlet服务器小程序）负责处理业务逻辑以及页面展示，之后的JSP技术专门用来处理页面展示，但是实际上JSP就是servlet，所以它也是可以处理业务逻辑的。（类似于.net的.aspx)。"),s("strong",[v._v("view层被进一步划分为Controller、View")]),v._v("。在Java中就是Servlet、JSP。")]),v._v(" "),s("p",[v._v("注意："),s("RouterLink",{attrs:{to:"/design-patterns-advanced/4_dp-mvc.html"}},[v._v("MVC模式并不是一种设计模式")]),v._v("。")],1)])}),[],!1,null,null,null);t.default=r.exports}}]);