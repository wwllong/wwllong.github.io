(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{759:function(s,t,a){"use strict";a.r(t);var e=a(58),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker-compose命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose命令"}},[s._v("#")]),s._v(" Docker Compose命令")]),s._v(" "),a("h2",{attrs:{id:"命令的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令的对象"}},[s._v("#")]),s._v(" 命令的对象")]),s._v(" "),a("p",[s._v("对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。")]),s._v(" "),a("p",[s._v("执行 "),a("code",[s._v("docker-compose [COMMAND] --help")]),s._v(" 或者 "),a("code",[s._v("docker-compose help [COMMAND]")]),s._v(" 可以查看具体某个命令的使用格式。")]),s._v(" "),a("h2",{attrs:{id:"命令格式和选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令格式和选项"}},[s._v("#")]),s._v(" 命令格式和选项")]),s._v(" "),a("p",[a("code",[s._v("docker-compose")]),s._v(" 命令的基本的使用格式：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-f"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("arg"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COMMAND"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("命令选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-f, --file FILE")]),s._v(" 指定使用的 Compose 模板文件，默认为 "),a("code",[s._v("docker-compose.yml")]),s._v("，可以多次指定。")]),s._v(" "),a("li",[a("code",[s._v("-p, --project-name NAME")]),s._v(" 指定项目名称，默认将使用所在目录名称作为项目名。")]),s._v(" "),a("li",[a("code",[s._v("--x-networking")]),s._v(" 使用 Docker 的可拔插网络后端特性")]),s._v(" "),a("li",[a("code",[s._v("--x-network-driver DRIVER")]),s._v(" 指定网络后端的驱动，默认为 "),a("code",[s._v("bridge")])]),s._v(" "),a("li",[a("code",[s._v("--verbose")]),s._v(" 输出更多调试信息。")]),s._v(" "),a("li",[a("code",[s._v("-v, --version")]),s._v(" 打印版本并退出")])]),s._v(" "),a("h2",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),a("p",[s._v("先说一些基本的的常用命令：")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 前台运行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" up\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 后台运行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" up -d\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" start\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" stop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止并移除容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" down\n")])])]),a("h2",{attrs:{id:"build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[s._v("#")]),s._v(" build")]),s._v(" "),a("p",[s._v("构建（重新构建）项目中的服务容器。可以随时在项目目录下运行 "),a("code",[s._v("docker-compose build")]),s._v(" 来重新构建服务。格式为：")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" build "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。")]),s._v(" "),a("p",[s._v("选项包括：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("--force-rm")]),s._v(" 删除构建过程中的临时容器。")]),s._v(" "),a("li",[a("code",[s._v("--no-cache")]),s._v(" 构建镜像过程中不使用 cache（这将加长构建过程）。")]),s._v(" "),a("li",[a("code",[s._v("--pull")]),s._v(" 始终尝试通过 pull 来获取更新版本的镜像。")])]),s._v(" "),a("h2",{attrs:{id:"config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[s._v("#")]),s._v(" config")]),s._v(" "),a("p",[s._v("验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。")]),s._v(" "),a("h2",{attrs:{id:"down"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#down"}},[s._v("#")]),s._v(" down")]),s._v(" "),a("p",[s._v("此命令将会停止 "),a("code",[s._v("up")]),s._v(" 命令所启动的容器，并移除网络")]),s._v(" "),a("h2",{attrs:{id:"exec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[s._v("#")]),s._v(" exec")]),s._v(" "),a("p",[s._v("进入指定的容器。")]),s._v(" "),a("h2",{attrs:{id:"help"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#help"}},[s._v("#")]),s._v(" help")]),s._v(" "),a("p",[s._v("获得一个命令的帮助。")]),s._v(" "),a("h2",{attrs:{id:"images"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#images"}},[s._v("#")]),s._v(" images")]),s._v(" "),a("p",[s._v("列出 Compose 文件中包含的镜像。")]),s._v(" "),a("h2",{attrs:{id:"kill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kill"}},[s._v("#")]),s._v(" kill")]),s._v(" "),a("p",[s._v("通过发送 "),a("code",[s._v("SIGKILL")]),s._v(" 信号来强制停止服务容器。格式为 :")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("。\n")])])]),a("p",[s._v("支持通过 "),a("code",[s._v("-s")]),s._v(" 参数来指定发送的信号，例如通过如下指令发送 "),a("code",[s._v("SIGINT")]),s._v(" 信号。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" -s SIGINT1\n")])])]),a("h2",{attrs:{id:"logs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[s._v("#")]),s._v(" logs")]),s._v(" "),a("p",[s._v("查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 "),a("code",[s._v("--no-color")]),s._v(" 来关闭颜色。该命令在调试问题的时候十分有用。格式为")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" logs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h2",{attrs:{id:"pause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pause"}},[s._v("#")]),s._v(" pause")]),s._v(" "),a("p",[s._v("暂停一个服务容器。格式为 :")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" pause "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h2",{attrs:{id:"port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#port"}},[s._v("#")]),s._v(" port")]),s._v(" "),a("p",[s._v("打印某个容器端口所映射的公共端口。格式为:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" port "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" SERVICE PRIVATE_PORT\n")])])]),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("--protocol=proto")]),s._v(" 指定端口协议，tcp（默认值）或者 udp。")]),s._v(" "),a("li",[a("code",[s._v("--index=index")]),s._v(" 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。")])]),s._v(" "),a("h2",{attrs:{id:"ps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ps"}},[s._v("#")]),s._v(" ps")]),s._v(" "),a("p",[s._v("列出项目中目前的所有容器。格式为:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-q")]),s._v(" 只打印容器的 ID 信息。")])]),s._v(" "),a("h2",{attrs:{id:"pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[s._v("#")]),s._v(" pull")]),s._v(" "),a("p",[s._v("拉取服务依赖的镜像。格式为 :")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" pull "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("--ignore-pull-failures")]),s._v(" 忽略拉取镜像过程中的错误。")])]),s._v(" "),a("h2",{attrs:{id:"push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[s._v("#")]),s._v(" push")]),s._v(" "),a("p",[s._v("推送服务依赖的镜像到 Docker 镜像仓库。")]),s._v(" "),a("h2",{attrs:{id:"restart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restart"}},[s._v("#")]),s._v(" restart")]),s._v(" "),a("p",[s._v("重启项目中的服务。格式为:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" restart "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-t, --timeout TIMEOUT")]),s._v(" 指定重启前停止容器的超时（默认为 10 秒）。")])]),s._v(" "),a("h2",{attrs:{id:"rm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[s._v("#")]),s._v(" rm")]),s._v(" "),a("p",[s._v("删除所有（停止状态的）服务容器。推荐先执行 "),a("code",[s._v("docker-compose stop")]),s._v(" 命令来停止容器。格式为:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-f, --force")]),s._v(" 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。")]),s._v(" "),a("li",[a("code",[s._v("-v")]),s._v(" 删除容器所挂载的数据卷。")])]),s._v(" "),a("h2",{attrs:{id:"run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[s._v("#")]),s._v(" run")]),s._v(" "),a("p",[s._v("在指定服务上执行一个命令。格式为 :")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-p PORT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("KEY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("VAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" SERVICE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("COMMAND"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("ARGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("例如：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" run ubuntu "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ping")]),s._v(" docker.com\n")])])]),a("p",[s._v("将会启动一个 ubuntu 服务容器，并执行 "),a("code",[s._v("ping docker.com")]),s._v(" 命令。")]),s._v(" "),a("p",[s._v("默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。")]),s._v(" "),a("p",[s._v("该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。")]),s._v(" "),a("p",[s._v("两个不同点：")]),s._v(" "),a("ul",[a("li",[s._v("给定命令将会覆盖原有的自动运行命令；")]),s._v(" "),a("li",[s._v("不会自动创建端口，以避免冲突。")])]),s._v(" "),a("p",[s._v("如果不希望自动启动关联的容器，可以使用 "),a("code",[s._v("--no-deps")]),s._v(" 选项，例如")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" run --no-deps web python manage.py shell\n")])])]),a("p",[s._v("将不会启动 web 容器所关联的其它容器。")]),s._v(" "),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-d")]),s._v(" 后台运行容器。")]),s._v(" "),a("li",[a("code",[s._v("--name NAME")]),s._v(" 为容器指定一个名字。")]),s._v(" "),a("li",[a("code",[s._v("--entrypoint CMD")]),s._v(" 覆盖默认的容器启动指令。")]),s._v(" "),a("li",[a("code",[s._v("-e KEY=VAL")]),s._v(" 设置环境变量值，可多次使用选项来设置多个环境变量。")]),s._v(" "),a("li",[a("code",[s._v('-u, --user=""')]),s._v(" 指定运行容器的用户名或者 uid。")]),s._v(" "),a("li",[a("code",[s._v("--no-deps")]),s._v(" 不自动启动关联的服务容器。")]),s._v(" "),a("li",[a("code",[s._v("--rm")]),s._v(" 运行命令后自动删除容器，"),a("code",[s._v("d")]),s._v(" 模式下将忽略。")]),s._v(" "),a("li",[a("code",[s._v("-p, --publish=[]")]),s._v(" 映射容器端口到本地主机。")]),s._v(" "),a("li",[a("code",[s._v("--service-ports")]),s._v(" 配置服务端口并映射到本地主机。")]),s._v(" "),a("li",[a("code",[s._v("-T")]),s._v(" 不分配伪 tty，意味着依赖 tty 的指令将无法运行。")])]),s._v(" "),a("h2",{attrs:{id:"scale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scale"}},[s._v("#")]),s._v(" scale")]),s._v(" "),a("p",[s._v("设置指定服务运行的容器个数。格式为:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" scale "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NUM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("通过 "),a("code",[s._v("service=num")]),s._v(" 的参数来设置数量。例如：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" scale "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("web")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("db")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n")])])]),a("p",[s._v("将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。")]),s._v(" "),a("p",[s._v("一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。")]),s._v(" "),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-t, --timeout TIMEOUT")]),s._v(" 停止容器时候的超时（默认为 10 秒）。")])]),s._v(" "),a("h2",{attrs:{id:"start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[s._v("#")]),s._v(" start")]),s._v(" "),a("p",[s._v("启动已经存在的服务容器。格式为 :")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" start "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h2",{attrs:{id:"stop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop"}},[s._v("#")]),s._v(" stop")]),s._v(" "),a("p",[s._v("停止已经处于运行状态的容器，但不删除它。通过 "),a("code",[s._v("docker-compose start")]),s._v(" 可以再次启动这些容器。格式为:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" stop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-t, --timeout TIMEOUT")]),s._v(" 停止容器时候的超时（默认为 10 秒）。")])]),s._v(" "),a("h2",{attrs:{id:"top"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[s._v("#")]),s._v(" top")]),s._v(" "),a("p",[s._v("查看各个服务容器内运行的进程。")]),s._v(" "),a("h2",{attrs:{id:"unpause"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unpause"}},[s._v("#")]),s._v(" unpause")]),s._v(" "),a("p",[s._v("恢复处于暂停状态中的服务。格式为 :")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" unpause "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h2",{attrs:{id:"up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#up"}},[s._v("#")]),s._v(" up")]),s._v(" "),a("p",[s._v("该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。链接的服务都将会被自动启动，除非已经处于运行状态。可以说，大部分时候都可以直接通过该命令来启动一个项目。格式为:")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" up "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("p",[s._v("默认情况，"),a("code",[s._v("docker-compose up")]),s._v(" 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。当通过 "),a("code",[s._v("Ctrl-C")]),s._v(" 停止命令时，所有容器将会停止。")]),s._v(" "),a("p",[s._v("如果使用 "),a("code",[s._v("docker-compose up -d")]),s._v("，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。")]),s._v(" "),a("p",[s._v("默认情况，如果服务容器已经存在，"),a("code",[s._v("docker-compose up")]),s._v(" 将会尝试停止容器，然后重新创建（保持使用 "),a("code",[s._v("volumes-from")]),s._v(" 挂载的卷），以保证新启动的服务匹配 "),a("code",[s._v("docker-compose.yml")]),s._v(" 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 "),a("code",[s._v("docker-compose up --no-recreate")]),s._v("。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 "),a("code",[s._v("docker-compose up --no-deps -d <SERVICE_NAME>")]),s._v(" 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。")]),s._v(" "),a("p",[s._v("选项：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-d")]),s._v(" 在后台运行服务容器。")]),s._v(" "),a("li",[a("code",[s._v("--no-color")]),s._v(" 不使用颜色来区分不同的服务的控制台输出。")]),s._v(" "),a("li",[a("code",[s._v("--no-deps")]),s._v(" 不启动服务所链接的容器。")]),s._v(" "),a("li",[a("code",[s._v("--force-recreate")]),s._v(" 强制重新创建容器，不能与 "),a("code",[s._v("--no-recreate")]),s._v(" 同时使用。")]),s._v(" "),a("li",[a("code",[s._v("--no-recreate")]),s._v(" 如果容器已经存在了，则不重新创建，不能与 "),a("code",[s._v("--force-recreate")]),s._v(" 同时使用。")]),s._v(" "),a("li",[a("code",[s._v("--no-build")]),s._v(" 不自动构建缺失的服务镜像。")]),s._v(" "),a("li",[a("code",[s._v("-t, --timeout TIMEOUT")]),s._v(" 停止容器时候的超时（默认为 10 秒）。")])]),s._v(" "),a("h2",{attrs:{id:"version"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version"}},[s._v("#")]),s._v(" version")]),s._v(" "),a("p",[s._v("打印版本信息。格式为 :")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker-compose")]),s._v(" version\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);