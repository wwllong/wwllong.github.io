(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{809:function(v,_,t){"use strict";t.r(_);var a=t(58),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"执行引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎"}},[v._v("#")]),v._v(" 执行引擎")]),v._v(" "),t("p",[v._v("执行引擎属于JVM的下层，里面包括"),t("strong",[v._v("解释器、及时编译器、垃圾回收器")]),v._v("。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_1.png",alt:"execution_engine_1"}})]),v._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[v._v("#")]),v._v(" 概述")]),v._v(" "),t("p",[t("strong",[v._v("执行引擎是Java虚拟机核心的组成部分之一")]),v._v("。“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而"),t("strong",[v._v("虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上")]),v._v("，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表，以及其他辅助信息。如果想要让一个Java程序运行起来，那么就离不开执行引擎，因为"),t("strong",[v._v("执行引擎（Execution Engine）的任务就是将字节码指令解释/编译为对应平台上的本地机器指令")]),v._v("。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_2.png",alt:"execution_engine_2"}})]),v._v(" "),t("p",[v._v("简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_3.png",alt:"execution_engine_3"}})]),v._v(" "),t("h3",{attrs:{id:"执行引擎的工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行引擎的工作流程"}},[v._v("#")]),v._v(" 执行引擎的工作流程")]),v._v(" "),t("p",[v._v("执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。")]),v._v(" "),t("ol",[t("li",[v._v("每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。")]),v._v(" "),t("li",[v._v("当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。")])]),v._v(" "),t("p",[v._v("从外观上来看，"),t("strong",[v._v("所有的Java虚拟机的执行引擎输入，输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行过程")]),v._v("。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_4.png",alt:"execution_engine_4"}})]),v._v(" "),t("h2",{attrs:{id:"java代码编译和执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java代码编译和执行过程"}},[v._v("#")]),v._v(" Java代码编译和执行过程")]),v._v(" "),t("p",[v._v("大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下图（2-1）中的各个步骤：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_5.png",alt:"execution_engine_5"}})]),v._v(" "),t("p",[v._v("Java代码编译是由Java源码编译器（"),t("strong",[v._v("前端编译器")]),v._v("，完成图2-1黄色部分流程）来完成，具体流程图如下所示：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_6.png",alt:"execution_engine_6"}})]),v._v(" "),t("p",[v._v("Java字节码的执行是由JVM执行引擎（"),t("strong",[v._v("后端编译器")]),v._v("，完成图2-1绿色/蓝色的部分流程）来完成，流程图如下所示：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_7.png",alt:"execution_engine_7"}})]),v._v(" "),t("h3",{attrs:{id:"解释器-interpreter-与jit编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释器-interpreter-与jit编译器"}},[v._v("#")]),v._v(" 解释器（Interpreter）与JIT编译器")]),v._v(" "),t("ul",[t("li",[v._v("解释器：当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。")]),v._v(" "),t("li",[v._v("JIT（Just In Time Compiler）编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。")])]),v._v(" "),t("h3",{attrs:{id:"为什么java是半编译半解释型语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么java是半编译半解释型语言"}},[v._v("#")]),v._v(" 为什么Java是半编译半解释型语言？")]),v._v(" "),t("p",[v._v("JDK1.0时代，将Java语言定位为“解释执行”还是比较准确的。再后来，Java也发展出可以直接生成本地代码的编译器。现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_8.png",alt:"execution_engine_8"}})]),v._v(" "),t("h2",{attrs:{id:"机器码、指令、汇编语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#机器码、指令、汇编语言"}},[v._v("#")]),v._v(" 机器码、指令、汇编语言")]),v._v(" "),t("h3",{attrs:{id:"机器码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#机器码"}},[v._v("#")]),v._v(" 机器码")]),v._v(" "),t("p",[t("strong",[v._v("各种用二进制编码方式表示的指令，叫做机器指令码")]),v._v("，又叫机器语言。")]),v._v(" "),t("p",[v._v("开始，人们就用它采编写程序，机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。")]),v._v(" "),t("p",[v._v("机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。")]),v._v(" "),t("h3",{attrs:{id:"指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[v._v("#")]),v._v(" 指令")]),v._v(" "),t("p",[v._v("由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。")]),v._v(" "),t("p",[t("strong",[v._v("指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好")]),v._v("。")]),v._v(" "),t("p",[v._v("由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。")]),v._v(" "),t("h3",{attrs:{id:"指令集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令集"}},[v._v("#")]),v._v(" 指令集")]),v._v(" "),t("p",[v._v("不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。 如常见的：")]),v._v(" "),t("ul",[t("li",[v._v("x86指令集，对应的是x86架构的平台")]),v._v(" "),t("li",[v._v("ARM指令集，对应的是ARM架构的平台")])]),v._v(" "),t("h3",{attrs:{id:"汇编语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#汇编语言"}},[v._v("#")]),v._v(" 汇编语言")]),v._v(" "),t("p",[v._v("由于指令的可读性还是太差，于是人们又发明了汇编语言。")]),v._v(" "),t("p",[v._v("在汇编语言中，用"),t("strong",[v._v("助记符（Mnemonics）代替机器指令的操作码")]),v._v("，用"),t("strong",[v._v("地址符号（Symbol）或标号（Label）代替指令或操作数的地址")]),v._v("。")]),v._v(" "),t("p",[v._v("在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。")]),v._v(" "),t("ul",[t("li",[v._v("由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。")])]),v._v(" "),t("h3",{attrs:{id:"高级语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级语言"}},[v._v("#")]),v._v(" 高级语言")]),v._v(" "),t("p",[v._v("为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。")]),v._v(" "),t("p",[t("strong",[v._v("高级语言比机器语言、汇编语言更接近人的语言")]),v._v("。当计算机执行高级语言编写的程序时，"),t("strong",[v._v("仍然需要把程序解释和编译成机器的指令码")]),v._v("，完成这个过程的程序就叫做"),t("strong",[v._v("解释程序或编译程序")]),v._v("。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_9.png",alt:"execution_engine_9"}})]),v._v(" "),t("p",[v._v("高级语言也不是直接翻译成机器指令，而是翻译成汇编语言码，如下面说的C和C++：")]),v._v(" "),t("p",[v._v("C、C++源程序执行过程如下图，它的编译过程又可以分成两个阶段：编译和汇编。")]),v._v(" "),t("ul",[t("li",[v._v("编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码")]),v._v(" "),t("li",[v._v("汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_10.png",alt:"execution_engine_10"}})]),v._v(" "),t("h3",{attrs:{id:"字节码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字节码"}},[v._v("#")]),v._v(" 字节码")]),v._v(" "),t("p",[v._v("字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码。")]),v._v(" "),t("p",[t("strong",[v._v("字节码主要为了实现特定软件运行和软件环境、与硬件环境无关")]),v._v("。")]),v._v(" "),t("p",[v._v("字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。字节码典型的应用为：Java bytecode。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_11.png",alt:"execution_engine_11"}})]),v._v(" "),t("h2",{attrs:{id:"解释器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释器"}},[v._v("#")]),v._v(" 解释器")]),v._v(" "),t("p",[v._v("JVM设计者们的初衷仅仅只是单纯地为了"),t("strong",[v._v("满足Java程序实现跨平台特性")]),v._v("，因此避免采用静态编译的方式直接生成本地机器指令，从而诞生了"),t("strong",[v._v("实现解释器在运行时采用逐行解释字节码执行程序")]),v._v("的想法。")]),v._v(" "),t("p",[v._v("为什么Java源文件不直接翻译成机器指令，而是翻译成字节码文件？可能是因为直接翻译的代价是比较大的。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_12.png",alt:"execution_engine_12"}})]),v._v(" "),t("h3",{attrs:{id:"解释器工作机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释器工作机制"}},[v._v("#")]),v._v(" 解释器工作机制")]),v._v(" "),t("p",[v._v("解释器真正意义上所承担的角色就是一个"),t("strong",[v._v("运行时“翻译者”")]),v._v("，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。")]),v._v(" "),t("p",[v._v("当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。")]),v._v(" "),t("h3",{attrs:{id:"解释器分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释器分类"}},[v._v("#")]),v._v(" 解释器分类")]),v._v(" "),t("p",[v._v("在Java的发展历史里，一共有两套解释执行器，即古老的"),t("strong",[v._v("字节码解释器")]),v._v("、现在普遍使用的"),t("strong",[v._v("模板解释器")]),v._v("。")]),v._v(" "),t("ul",[t("li",[v._v("字节码解释器：在执行时通过"),t("strong",[v._v("纯软件代码模拟字节码的执行")]),v._v("，效率非常低下。")]),v._v(" "),t("li",[v._v("模板解释器："),t("strong",[v._v("将每一条字节码和一个模板函数相关联")]),v._v("，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。\n"),t("ul",[t("li",[v._v("在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。\n"),t("ul",[t("li",[v._v("Interpreter模块：实现了解释器的核心功能")]),v._v(" "),t("li",[v._v("Code模块：用于管理HotSpot VM在运行时生成的本地机器指令")])])])])])]),v._v(" "),t("h3",{attrs:{id:"现状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现状"}},[v._v("#")]),v._v(" 现状")]),v._v(" "),t("p",[v._v("由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、Perl、Ruby等。但是在今天，"),t("strong",[v._v("基于解释器执行已经沦落为低效的代名词")]),v._v("，并且时常被一些C/C++程序员所调侃。")]),v._v(" "),t("p",[v._v("为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是"),t("strong",[v._v("将整个函数体编译成为机器码")]),v._v("，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。")]),v._v(" "),t("p",[v._v("不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。")]),v._v(" "),t("h2",{attrs:{id:"jit编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jit编译器"}},[v._v("#")]),v._v(" JIT编译器")]),v._v(" "),t("h3",{attrs:{id:"java编译的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java编译的概念"}},[v._v("#")]),v._v(" Java编译的概念")]),v._v(" "),t("p",[v._v("Java 语言的“编译期”其实是一段“不确定”的操作过程，因为它可能是指一个"),t("strong",[v._v("前端编译器")]),v._v("（其实叫“编译器的前端”更准确一些）把.java文件转变成.class文件的过程；也可能是指虚拟机的"),t("strong",[v._v("后端运行期编译器")]),v._v("（JIT编译器，Just In Time Compiler）把字节码转变成机器码的过程；还可能是指使用"),t("strong",[v._v("静态提前编译器")]),v._v("（AOT编译器，Ahead of Time Compiler）直接把.java文件编译成本地机器代码的过程。")]),v._v(" "),t("ul",[t("li",[v._v("前端编译器：Sun的Javac、Eclipse JDT中的增量式编译器（ECJ）。")]),v._v(" "),t("li",[v._v("JIT编译器：HotSpot VM的C1、C2编译器。")]),v._v(" "),t("li",[v._v("AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET。")])]),v._v(" "),t("h3",{attrs:{id:"java代码的执行分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java代码的执行分类"}},[v._v("#")]),v._v(" Java代码的执行分类")]),v._v(" "),t("p",[v._v("Java代码的执行分为两类："),t("strong",[v._v("解释执行和编译执行")]),v._v("。")]),v._v(" "),t("ul",[t("li",[v._v("解释执行：将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行 。")]),v._v(" "),t("li",[v._v("编译执行：直接编译成机器码。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行，（不同机器上编译的机器码是不一样，而字节码是可以跨平台的）。")])]),v._v(" "),t("p",[v._v("HotSpot VM是目前市面上高性能虚拟机的代表作之一。它采用"),t("strong",[v._v("解释器与即时编译器并存的架构")]),v._v("。在Java虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。")]),v._v(" "),t("p",[v._v("在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++ 程序一较高下的地步。")]),v._v(" "),t("h3",{attrs:{id:"hotspot-vm执行方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hotspot-vm执行方式"}},[v._v("#")]),v._v(" HotSpot VM执行方式")]),v._v(" "),t("p",[v._v("有些开发人员会感觉到诧异，"),t("strong",[v._v("既然HotSpot VM中已经内置JIT编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢")]),v._v("？比如JRockit VM内部就不包含解释器，字节码全部都依靠即时编译器编译后执行。")]),v._v(" "),t("p",[v._v("首先明确： 当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。 编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间，但编译为本地代码后，执行效率高。")]),v._v(" "),t("p",[v._v("所以： 尽管JRockit VM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。在此模式下，"),t("strong",[v._v("当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率")]),v._v("。")]),v._v(" "),t("p",[v._v("同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_13.png",alt:"execution_engine_13"}})]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("真实案例")]),v._v(" "),t("p",[v._v("注意解释执行与编译执行在线上环境微妙的辩证关系。"),t("strong",[v._v("机器在热机状态可以承受的负载要大于冷机状态")]),v._v("。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死。")]),v._v(" "),t("p",[v._v("在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的1/8。曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的JVM均是解释执行，还没有进行热点代码统计和JIT动态编译，导致机器启动之后，当前1/2发布成功的服务器马上全部宕机，此故障说明了JIT的存在。—阿里团队")])]),v._v(" "),t("p",[v._v("由此可以看出，JIT编译器的对代码的运行优化还是十分显著的，接下来我们看看JIT编译器使用的技术。")]),v._v(" "),t("h3",{attrs:{id:"热点代码及探测技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热点代码及探测技术"}},[v._v("#")]),v._v(" 热点代码及探测技术")]),v._v(" "),t("p",[v._v("当然是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要"),t("strong",[v._v("根据代码被调用执行的频率而定")]),v._v("。关于那些需要被编译为本地代码的字节码，也被称之为“"),t("strong",[v._v("热点代码")]),v._v("”，JIT编译器在运行时会针对那些频繁被调用的“热点代码”做出"),t("strong",[v._v("深度优化")]),v._v("，将其直接编译为对应平台的本地机器指令，以此提升Java程序的执行性能。")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("一个被多次调用的方法，或者是一个方法体内部循环次数较多的循环体都可以被称之为“热点代码”，因此都可以通过JIT编译器编译为本地机器指令")]),v._v("。由于这种编译方式发生在方法的执行过程中，因此被称之为"),t("strong",[v._v("栈上替换")]),v._v("，或简称为OSR（On Stack Replacement）编译。")])]),v._v(" "),t("li",[t("p",[v._v("一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行，这里主要依靠"),t("strong",[v._v("热点探测功能")]),v._v("。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测")]),v._v("。")]),v._v(" "),t("p",[v._v("采用基于计数器的热点探测，HotSpot VM将会为每一个方法都建立2个不同类型的计数器，分别为"),t("strong",[v._v("方法调用计数器")]),v._v("（Invocation Counter）和"),t("strong",[v._v("回边计数器")]),v._v("（Back Edge Counter）。")]),v._v(" "),t("ul",[t("li",[v._v("方法调用计数器用于统计方法的调用次数")]),v._v(" "),t("li",[v._v("回边计数器则用于统计循环体执行的循环次数")])])])]),v._v(" "),t("h4",{attrs:{id:"方法调用计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法调用计数器"}},[v._v("#")]),v._v(" 方法调用计数器")]),v._v(" "),t("p",[v._v("方法调用计数器就用于统计方法被调用的次数，它的默认阀值在Client模式下是"),t("strong",[v._v("1500")]),v._v("次，在Server模式下是"),t("strong",[v._v("10000")]),v._v("次。超过这个阈值，就会触发JIT编译。这个阀值可以通过虚拟机参数 "),t("code",[v._v("-XX:CompileThreshold")]),v._v("来人为设定。")]),v._v(" "),t("p",[v._v("当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本，如果存在，则优先使用编译后的本地代码来执行。如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后"),t("strong",[v._v("判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阀值")]),v._v("。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_14.png",alt:"execution_engine_14"}})]),v._v(" "),t("p",[t("strong",[v._v("热度衰减")])]),v._v(" "),t("p",[v._v("注意，如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即"),t("strong",[v._v("一段时间之内方法被调用的次数")]),v._v("。"),t("strong",[v._v("当超过一定的时间限度")]),v._v("，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被"),t("strong",[v._v("减少一半")]),v._v("，这个过程称为方法调用计数器热度的"),t("strong",[v._v("衰减")]),v._v("（Counter Decay），而这段时间就称为此方法统计的"),t("strong",[v._v("半衰周期")]),v._v("（Counter Half Life Time）。")]),v._v(" "),t("p",[v._v("进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 "),t("code",[v._v("-XX:-UseCounterDecay")]),v._v(" 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。")]),v._v(" "),t("p",[v._v("另外，可以使用"),t("code",[v._v("-XX:CounterHalfLifeTime")]),v._v("参数设置半衰周期的时间，单位是秒。")]),v._v(" "),t("h4",{attrs:{id:"回边计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回边计数器"}},[v._v("#")]),v._v(" 回边计数器")]),v._v(" "),t("p",[v._v("回边计数器的作用是"),t("strong",[v._v("统计一个方法中循环体代码执行的次数")]),v._v("，在字节码中遇到控制流向后跳转的指令称为“"),t("strong",[v._v("回边")]),v._v("”（Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/execution_engine_15.png",alt:"execution_engine_15"}})]),v._v(" "),t("h3",{attrs:{id:"hotspot-vm-可以设置程序执行方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hotspot-vm-可以设置程序执行方法"}},[v._v("#")]),v._v(" HotSpot VM 可以设置程序执行方法")]),v._v(" "),t("p",[v._v("缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，"),t("strong",[v._v("通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行")]),v._v("。如下所示：")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("-Xint")]),v._v("：完全采用解释器模式执行程序；")]),v._v(" "),t("li",[t("code",[v._v("-Xcomp")]),v._v("：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行；")]),v._v(" "),t("li",[t("code",[v._v("-Xmixed")]),v._v("：采用解释器+即时编译器的混合模式共同执行程序。")])]),v._v(" "),t("h3",{attrs:{id:"hotspotvm中-jit-分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hotspotvm中-jit-分类"}},[v._v("#")]),v._v(" HotSpotVM中 JIT 分类")]),v._v(" "),t("p",[v._v("在HotSpot VM中内嵌有两个JIT编译器，分别为"),t("code",[v._v("Client Compiler")]),v._v("和"),t("code",[v._v("Server Compiler")]),v._v("，但大多数情况下我们简称为"),t("code",[v._v("C1编译器")]),v._v(" 和 "),t("code",[v._v("C2编译器")]),v._v("。开发人员可以通过如下命令显式指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("-client")]),v._v("：指定Java虚拟机运行在Client模式下，并使用C1编译器；C1编译器会对字节码进行简单和可靠的优化，耗时短，以达到更快的编译速度。")]),v._v(" "),t("li",[t("code",[v._v("-server")]),v._v("：指定Java虚拟机运行在server模式下，并使用C2编译器。C2进行耗时较长的优化，以及激进优化，但优化的代码执行效率更高。")])]),v._v(" "),t("p",[v._v("此外，还有一种"),t("strong",[v._v("分层编译（Tiered Compilation）策略")]),v._v("：程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化。")]),v._v(" "),t("p",[v._v("不过"),t("strong",[v._v('在Java7版本之后，一旦开发人员在程序中显式指定命令“-server"时，默认将会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务')]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"c1-和-c2编译器不同的优化策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c1-和-c2编译器不同的优化策略"}},[v._v("#")]),v._v(" C1 和 C2编译器不同的优化策略")]),v._v(" "),t("p",[v._v("在不同的编译器上有不同的优化策略。C1编译器上主要有方法内联、去虚拟化、冗余消除：")]),v._v(" "),t("ul",[t("li",[v._v("方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程")]),v._v(" "),t("li",[v._v("去虚拟化：对唯一的实现类进行内联")]),v._v(" "),t("li",[v._v("冗余消除：在运行期间把一些不会执行的代码折叠掉")])]),v._v(" "),t("p",[v._v("C2的优化主要是在全局层面，逃逸分析（前面讲过，并不成熟）是优化的基础。基于逃逸分析在C2上有如下几种优化：")]),v._v(" "),t("ul",[t("li",[v._v("标量替换：用标量值代替聚合对象的属性值")]),v._v(" "),t("li",[v._v("栈上分配：对于未逃逸的对象分配对象在栈而不是堆")]),v._v(" "),t("li",[v._v("同步消除：清除同步操作，通常指synchronized")])]),v._v(" "),t("h3",{attrs:{id:"发展方向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发展方向"}},[v._v("#")]),v._v(" 发展方向")]),v._v(" "),t("h4",{attrs:{id:"graal编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graal编译器"}},[v._v("#")]),v._v(" Graal编译器")]),v._v(" "),t("p",[v._v("自JDK 10起，HotSpot又加入了一个全新的及时编译器："),t("strong",[v._v("Graal编译器")]),v._v("。")]),v._v(" "),t("p",[v._v("编译效果短短几年时间就追平了C2编译器，未来可期。目前，带着实验状态标签，需要使用开关参数"),t("code",[v._v("-XX:+UnlockExperimentalvMOptions -XX:+UseJVMCICompiler")]),v._v("去激活才能使用")]),v._v(" "),t("h4",{attrs:{id:"aot编译器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aot编译器"}},[v._v("#")]),v._v(" AOT编译器")]),v._v(" "),t("p",[v._v("JDK 9引入了AOT编译器（静态提前编译器，Ahead of Time Compiler）。")]),v._v(" "),t("p",[v._v("同时实验性AOT编译工具jaotc，它借助了Graal编译器，将所输入的Java类文件转换为机器码，并存放至生成的动态共享库之中。")]),v._v(" "),t("p",[v._v("所谓AOT编译，是与即时编译相对立的一个概念。我们知道，"),t("strong",[v._v("即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在程序运行之前，便将字节码转换为机器码的过程")]),v._v("。")]),v._v(" "),t("p",[v._v("优点：")]),v._v(" "),t("ul",[t("li",[v._v("Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少Java应用给人带来“第一次运行慢” 的不良体验")])]),v._v(" "),t("p",[v._v("缺点：")]),v._v(" "),t("ul",[t("li",[v._v("破坏了 java “ 一次编译，到处运行”的理念，必须为每个不同的硬件，OS编译对应的发行包")]),v._v(" "),t("li",[v._v("降低了Java链接过程的动态性，加载的代码在编译器就必须全部已知。")]),v._v(" "),t("li",[v._v("还需要继续优化中，最初只支持Linux X64 java base")])])])}),[],!1,null,null,null);_.default=e.exports}}]);