(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{817:function(s,a,t){"use strict";t.r(a);var v=t(58),_=Object(v.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"类加载子系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载子系统"}},[s._v("#")]),s._v(" 类加载子系统")]),s._v(" "),t("p",[s._v("类加载子系统是JVM中非常重要的一个部分，顾名思义，它主要负责JVM加载Class文件。")]),s._v(" "),t("h2",{attrs:{id:"主要作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要作用"}},[s._v("#")]),s._v(" 主要作用")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_1.png",alt:"class_loading_sys_1.png"}})]),s._v(" "),t("ol",[t("li",[s._v("类加载器子系统负责从文件系统或者网络中"),t("strong",[s._v("加载class文件")]),s._v("，class文件在文件开头有特定的文件标识（coffeebabe）")]),s._v(" "),t("li",[t("strong",[s._v("ClassLoader只负责class文件的加载")]),s._v("，至于它是否可以运行，则由执行引擎（Execution Engine）决定。")]),s._v(" "),t("li",[s._v("加载的类信息存放于一块称为"),t("strong",[s._v("方法区")]),s._v("的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是class文件中常量池部分的内存映射）。")])]),s._v(" "),t("p",[s._v("查看class文件的工具： jclasslib bytecode viewer （IDEA有插件） 和 Binary Viewer")]),s._v(" "),t("h2",{attrs:{id:"类加载器与类加载过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器与类加载过程"}},[s._v("#")]),s._v(" 类加载器与类加载过程")]),s._v(" "),t("h3",{attrs:{id:"类加载器classloader的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器classloader的作用"}},[s._v("#")]),s._v(" 类加载器ClassLoader的作用")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_2.png",alt:"class_loading_sys_2.png"}})]),s._v(" "),t("ol",[t("li",[s._v("class文件存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样（变量、方法等）的实例。")]),s._v(" "),t("li",[s._v("class文件加载到JVM中，被称为DNA元数据模板，放在"),t("strong",[s._v("方法区")]),s._v("。")]),s._v(" "),t("li",[s._v("在.class文件 -> JVM -> 最终成为元数据模板，此过程就要一个运输工具（类装载器ClassLoader），扮演一个快递员的角色。")])]),s._v(" "),t("h3",{attrs:{id:"类加载过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[s._v("#")]),s._v(" 类加载过程")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_4.png",alt:"class_loading_sys_4.png"}})]),s._v(" "),t("p",[s._v("类加载过程主要分为加载阶段、链接阶段以及初始化阶段。例如加载下面的示例：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HelloLoader")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("用流程图表示上述示例代码加载过程：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_3.png",alt:"class_loading_sys_3.png"}})]),s._v(" "),t("h4",{attrs:{id:"加载阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载阶段"}},[s._v("#")]),s._v(" 加载阶段")]),s._v(" "),t("ol",[t("li",[s._v("通过一个类的全限定名获取定义此类的二进制字节流")]),s._v(" "),t("li",[s._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构")]),s._v(" "),t("li",[s._v("在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("加载class文件的方式")]),s._v(" "),t("ul",[t("li",[s._v("从"),t("strong",[s._v("本地系统")]),s._v("中直接加载")]),s._v(" "),t("li",[s._v("通过"),t("strong",[s._v("网络")]),s._v("获取，典型场景：Web Applet")]),s._v(" "),t("li",[s._v("从zip"),t("strong",[s._v("压缩包")]),s._v("中读取，成为日后jar、war格式的基础")]),s._v(" "),t("li",[s._v("运行时计算生成，使用最多的是："),t("strong",[s._v("动态代理技术")])]),s._v(" "),t("li",[s._v("由其他文件生成，典型场景："),t("strong",[s._v("JSP应用")])]),s._v(" "),t("li",[s._v("从专有"),t("strong",[s._v("数据库")]),s._v("中提取.class文件，比较少见")]),s._v(" "),t("li",[s._v("从"),t("strong",[s._v("加密文件")]),s._v("中获取，典型的防class文件被反编译的保护措施")])])]),s._v(" "),t("h4",{attrs:{id:"链接阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链接阶段"}},[s._v("#")]),s._v(" 链接阶段")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("验证（Verify）")]),s._v("：")]),s._v(" "),t("ol",[t("li",[s._v("目的在确保class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。")]),s._v(" "),t("li",[s._v("主要包括四种验证，"),t("strong",[s._v("文件格式验证，元数据验证，字节码验证，符号引用验证")]),s._v("。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("准备（Prepare）")]),s._v("：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("为类静变量分配内存并且设置该变量的默认初始值，即零值")]),s._v("。")]),s._v(" "),t("li",[s._v("这里"),t("strong",[s._v("不包含用final修饰的static")]),s._v("，因为final在编译的时候就会分配了，准备阶段会显式初始化；")]),s._v(" "),t("li",[s._v("这里"),t("strong",[s._v("不会为实例变量分配初始化")]),s._v("，类变量会分配在"),t("strong",[s._v("方法区")]),s._v("中，而实例变量是会随着对象一起分配到Java堆中。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("解析（Resolve）")]),s._v("：")]),s._v(" "),t("ol",[t("li",[s._v("将常量池内的"),t("strong",[s._v("符号引用转换为直接引用")]),s._v("的过程。")]),s._v(" "),t("li",[s._v("事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。")]),s._v(" "),t("li",[s._v("符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。")]),s._v(" "),t("li",[s._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info，CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。")])])])]),s._v(" "),t("h4",{attrs:{id:"初始化阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段"}},[s._v("#")]),s._v(" 初始化阶段")]),s._v(" "),t("ol",[t("li",[s._v("初始化阶段就是"),t("strong",[s._v("执行类构造器方法<clinit>")]),s._v("()的过程。")]),s._v(" "),t("li",[s._v("此方法不需定义，是javac编译器自动收集"),t("strong",[s._v("类中的所有类变量的赋值动作和静态代码块中的语句合并而来")]),s._v("。")]),s._v(" "),t("li",[s._v("构造器方法中指令按语句在源文件中出现的"),t("strong",[s._v("顺序执行")]),s._v("。")]),s._v(" "),t("li",[s._v("<clinit>()"),t("strong",[s._v("不同于类的构造器")]),s._v("。（关联：构造器是虚拟机视角下的<init>()）")]),s._v(" "),t("li",[s._v("若该类具有父类，JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕。")]),s._v(" "),t("li",[s._v("虚拟机必须保证一个类的<clinit>()方法"),t("strong",[s._v("在多线程下被同步加锁")]),s._v("(类只加载一次)。")])]),s._v(" "),t("h2",{attrs:{id:"类加载器的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器的分类"}},[s._v("#")]),s._v(" 类加载器的分类")]),s._v(" "),t("p",[s._v("JVM支持两种类型的类加载器。分别为"),t("strong",[s._v("引导类加载器（Bootstrap ClassLoader）"),t("strong",[s._v("和")]),s._v("自定义类加载器（User-Defined ClassLoader）")]),s._v("。")]),s._v(" "),t("p",[s._v("从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将"),t("strong",[s._v("所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器")]),s._v("。")]),s._v(" "),t("p",[s._v("无论类加载器的类型如何划分，在程序中我们"),t("strong",[s._v("最常见的类加载器始终只有3个：引导类加载器、扩展加载器、系统加载器")]),s._v("，如下所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_5.png",alt:"class_loading_sys_5.png"}})]),s._v(" "),t("p",[s._v("注意：这里的四者之间的关系是包含关系。不是上层下层，也不是子父类的继承关系（有点类似上下级）。")]),s._v(" "),t("h3",{attrs:{id:"虚拟机自带类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机自带类加载器"}},[s._v("#")]),s._v(" 虚拟机自带类加载器")]),s._v(" "),t("h4",{attrs:{id:"启动类加载器-引导类加载器-bootstrap-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器-引导类加载器-bootstrap-classloader"}},[s._v("#")]),s._v(" 启动类加载器（引导类加载器，Bootstrap ClassLoader）")]),s._v(" "),t("ul",[t("li",[s._v("这个类加载器使用"),t("strong",[s._v("C/C++语言实现的")]),s._v("，嵌套在JVM内部。")]),s._v(" "),t("li",[s._v("它用来"),t("strong",[s._v("加载Java的核心库")]),s._v("（JAVA_HOME/jre/lib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类")]),s._v(" "),t("li",[s._v("并"),t("strong",[s._v("不继承自java.lang.ClassLoader")]),s._v("，没有父加载器。")]),s._v(" "),t("li",[s._v("加载扩展类和应用程序类加载器，并指定为他们的父类加载器。")]),s._v(" "),t("li",[s._v("出于安全考虑，Bootstrap启动类加载器"),t("strong",[s._v("只加载包名为java、javax、sun等开头的类")]),s._v("。")])]),s._v(" "),t("h4",{attrs:{id:"扩展类加载器-extension-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器-extension-classloader"}},[s._v("#")]),s._v(" 扩展类加载器（Extension ClassLoader）")]),s._v(" "),t("ul",[t("li",[s._v("Java语言编写，"),t("strong",[s._v("由sun.misc.Launcher$ExtClassLoader实现")]),s._v("。")]),s._v(" "),t("li",[s._v("派生于ClassLoader类")]),s._v(" "),t("li",[s._v("父类加载器为启动类加载器")]),s._v(" "),t("li",[s._v("从"),t("strong",[s._v("java.ext.dirs")]),s._v("系统属性所指定的目录中加载类库，或从JDK的安装目录的"),t("strong",[s._v("jre/1ib/ext")]),s._v("子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。")])]),s._v(" "),t("h4",{attrs:{id:"应用程序类加载器-系统类加载器-appclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器-系统类加载器-appclassloader"}},[s._v("#")]),s._v(" 应用程序类加载器（系统类加载器，AppClassLoader）")]),s._v(" "),t("ul",[t("li",[s._v("Java语言编写，由"),t("strong",[s._v("sun.misc.LaunchersAppClassLoader")]),s._v("实现")]),s._v(" "),t("li",[s._v("派生于ClassLoader类")]),s._v(" "),t("li",[s._v("父类加载器为扩展类加载器")]),s._v(" "),t("li",[s._v("它负责加载环境变量"),t("strong",[s._v("classpath")]),s._v("或系统属性"),t("strong",[s._v("java.class.path")]),s._v("指定路径下的类库")]),s._v(" "),t("li",[s._v("该类加载器是"),t("strong",[s._v("程序中默认的类加载器")]),s._v("，一般来说，Java应用的类都是由它来完成加载")]),s._v(" "),t("li",[s._v("通过**ClassLoader#getSystemclassLoader() **方法可以获取到该类加载器")])]),s._v(" "),t("h3",{attrs:{id:"用户自定义类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用户自定义类加载器"}},[s._v("#")]),s._v(" 用户自定义类加载器")]),s._v(" "),t("p",[s._v("在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。 为什么要自定义类加载器？")]),s._v(" "),t("ul",[t("li",[s._v("隔离加载类")]),s._v(" "),t("li",[s._v("修改类加载的方式")]),s._v(" "),t("li",[s._v("扩展加载源")]),s._v(" "),t("li",[s._v("防止源码泄漏")])]),s._v(" "),t("p",[s._v("用户自定义类加载器实现步骤：")]),s._v(" "),t("ol",[t("li",[s._v("开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求")]),s._v(" "),t("li",[s._v("在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass() 方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖loadclass() 方法，而是建议把自定义的类加载逻辑写在findClass()方法中")]),s._v(" "),t("li",[s._v("在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass()  方法及其获取字节码流的方式，使自定义类加载器编写更加简洁")])]),s._v(" "),t("h2",{attrs:{id:"classloader的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classloader的使用"}},[s._v("#")]),s._v(" ClassLoader的使用")]),s._v(" "),t("p",[s._v("ClassLoader类是一个抽象类，除了启动类加载器，其他所有的类加载器都直接或间接继承ClassLoader。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_6.png",alt:"class_loading_sys_6.png"}})]),s._v(" "),t("p",[s._v("sun.misc.Launcher 它是一个java虚拟机的入口应用。")]),s._v(" "),t("p",[s._v("获取ClassLoader的方法：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("方式一：获取当前ClassLoader")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("方式二：获取当前线程上下文的ClassLoader")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getContextClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("方式三：获取系统的ClassLoader")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSystemClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("方式四：获取调用者的ClassLoader")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DriverManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getCallerClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])])])]),s._v(" "),t("h2",{attrs:{id:"双亲委派机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[s._v("#")]),s._v(" 双亲委派机制")]),s._v(" "),t("p",[s._v("Java虚拟机对class文件采用的是"),t("strong",[s._v("按需加载")]),s._v("的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是"),t("strong",[s._v("双亲委派")]),s._v("模式，即把请求交由父类处理，它是一种任务委派模式。")]),s._v(" "),t("h3",{attrs:{id:"工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[s._v("#")]),s._v(" 工作原理")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_7.png",alt:"class_loading_sys_7.png"}})]),s._v(" "),t("ol",[t("li",[s._v("如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；")]),s._v(" "),t("li",[s._v("如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；")]),s._v(" "),t("li",[s._v("如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。")])]),s._v(" "),t("p",[s._v("例子：当我们加载jdbc.jar 用于实现数据库连接的时候，首先我们需要知道的是 jdbc.jar是基于SPI接口进行实现的，所以在加载的时候，会进行双亲委派，最终从引导类加载器中加载SPI核心类，然后再加载SPI接口类，接着载进行反向委派，通过线程上下文类加载器（默认为系统类加载器）进行实现类jdbc.jar的加载。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class_loading_sys_8.png",alt:"class_loading_sys_8.png"}})]),s._v(" "),t("h3",{attrs:{id:"优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[s._v("#")]),s._v(" 优势")]),s._v(" "),t("ul",[t("li",[s._v("避免类的重复加载")]),s._v(" "),t("li",[s._v("保护程序安全，防止核心API被随意篡改\n"),t("ul",[t("li",[s._v("自定义类：java.lang.String")]),s._v(" "),t("li",[s._v("自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）")])])])]),s._v(" "),t("p",[t("strong",[s._v("沙箱安全机制")]),s._v("：在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\\lang\\String.class）。报错信息说没有main方法，就是因为加载的是rt.jar包中的string类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。")]),s._v(" "),t("h2",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),t("h3",{attrs:{id:"如何判断两个class对象是否相同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何判断两个class对象是否相同"}},[s._v("#")]),s._v(" 如何判断两个class对象是否相同")]),s._v(" "),t("p",[s._v("在JVM中表示两个class对象是否为同一个类存在两个必要条件：")]),s._v(" "),t("ol",[t("li",[s._v("类的完整类名必须一致，包括包名。")]),s._v(" "),t("li",[s._v("加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。")])]),s._v(" "),t("p",[s._v("换句话说，在JVM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。")]),s._v(" "),t("h3",{attrs:{id:"对类加载器的引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对类加载器的引用"}},[s._v("#")]),s._v(" 对类加载器的引用")]),s._v(" "),t("p",[s._v("JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么"),t("strong",[s._v("JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中")]),s._v("。当解析一个类型到另一个类型的引用的时候（类型转换），JVM需要保证这两个类型的类加载器是相同的。")]),s._v(" "),t("h3",{attrs:{id:"类的主动使用和被动使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的主动使用和被动使用"}},[s._v("#")]),s._v(" 类的主动使用和被动使用")]),s._v(" "),t("p",[s._v("Java程序对类的使用方式分为：主动使用和被动使用。主动使用，又分为七种情况：")]),s._v(" "),t("ol",[t("li",[s._v("创建类的实例")]),s._v(" "),t("li",[s._v("访问某个类或接口的静态变量，或者对该静态变量赋值")]),s._v(" "),t("li",[s._v("调用类的静态方法")]),s._v(" "),t("li",[s._v('反射（比如：Class.forName（"com.atguigu.Test"））')]),s._v(" "),t("li",[s._v("初始化一个类的子类")]),s._v(" "),t("li",[s._v("Java虚拟机启动时被标明为启动类的类")]),s._v(" "),t("li",[s._v("JDK 7 开始提供的动态语言支持：java.lang.invoke.MethodHandle实例的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化")])]),s._v(" "),t("p",[s._v("除了以上七种情况，其他使用Java类的方式都被看作是对类的"),t("strong",[s._v("被动使用")]),s._v("，都"),t("strong",[s._v("不会导致类的初始化")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("关于字节码文件以及类加载子系统更详细的内容，看中篇：字节码与类加载内容")]),s._v("。")])])}),[],!1,null,null,null);a.default=_.exports}}]);