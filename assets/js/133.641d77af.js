(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{771:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"docker-容器基本操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器基本操作"}},[t._v("#")]),t._v(" Docker 容器基本操作")]),t._v(" "),a("p",[t._v("容器是 Docker 又一核心概念。简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，(传统）虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。")]),t._v(" "),a("p",[t._v("本章将具体介绍如何来管理一个容器，包括容器查询、创建、启动和停止等操作。")]),t._v(" "),a("h2",{attrs:{id:"查询容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询容器"}},[t._v("#")]),t._v(" 查询容器")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("docker ps")]),t._v(" 或者 "),a("code",[t._v("docker container ls")]),t._v(" 命令来查看容器信息。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("wenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询当前运行的容器")]),t._v("\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                       NAMES\n1d8c98d64b8e        tomcat              "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"catalina.sh run"')]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" hours ago         Up "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" hours          "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:8080-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/tcp, :::8080-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/tcp   mystifying_franklin\n6aca5ee42415        redis               "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-entrypoint.s…"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" months ago        Up "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" hours          "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:6379-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("/tcp, :::6379-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("/tcp   redis\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询所有容器运行历史记录（包含运行状态和终止状态）")]),t._v("\nCONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS                     PORTS                                       NAMES\n1d8c98d64b8e        tomcat                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"catalina.sh run"')]),t._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" hours ago         Up "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" hours                 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:8080-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/tcp, :::8080-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("/tcp   mystifying_franklin\n6aca5ee42415        redis                       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-entrypoint.s…"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" months ago        Up "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" hours                 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),t._v(".0.0:6379-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("/tcp, :::6379-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("/tcp   redis\naa9ba599e801        adminer                     "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"entrypoint.sh docke…"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" months ago        Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" minutes ago                                               mysql_adminer_1_a20b87b12b6b\nb4b3f94f7916        mysql                       "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-entrypoint.s…"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" months ago        Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" minutes ago                                               mysql_db_1_69414e4fbf22\nbab4361d0aae        rabbitmq:3.8.3-management   "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-entrypoint.s…"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" months ago       Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" minutes ago                                               rabbitmq\n")])])]),a("h2",{attrs:{id:"容器创建和运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器创建和运行"}},[t._v("#")]),t._v(" 容器创建和运行")]),t._v(" "),a("p",[t._v("启动容器主要命令为"),a("code",[t._v("docker run")]),t._v("，启动的方式主要有两种：一种是基于镜像新建一个容器并启动，另一种是将在终止状态（"),a("code",[t._v("Exited")]),t._v("）的容器重新启动。")]),t._v(" "),a("h3",{attrs:{id:"基于镜像新建容器并启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于镜像新建容器并启动"}},[t._v("#")]),t._v(" 基于镜像新建容器并启动")]),t._v(" "),a("p",[t._v("利用 "),a("code",[t._v("docker run")]),t._v(" 命令新建并启动：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用tomcat镜像创建一个容器，命名为tomcat，宿主机端口8888（左）映射容器端口8080（右侧）")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v(":8080 --name tomcat tomcat \nNOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("java.base/java.lang"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALL-UNNAMED --add-opens"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("java.base/java.io"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALL-UNNAMED --add-\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 篇幅有限忽略")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("-May-2021 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":44:59.699 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http-nio-8080"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("-May-2021 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":44:59.743 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" org.apache.catalina.startup.Catalina.start Server startup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("313")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" milliseconds\n")])])]),a("p",[t._v("运行上诉命令，当看到Server startup 即运行成功。但是这种运行方式是阻塞在控制台的，当中断命令容器就会被终止。这显然是不可取的，我们应该要以守护态运行（后台运行）容器，后续会介绍。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Docker创建容器标准操作")]),t._v(" "),a("p",[t._v("当利用 "),a("code",[t._v("docker run")]),t._v(" 来创建容器时，Docker 在后台运行的标准操作包括：")]),t._v(" "),a("ul",[a("li",[t._v("检查本地是否存在指定的镜像，不存在就从公有仓库下载")]),t._v(" "),a("li",[t._v("利用镜像创建并启动一个容器")]),t._v(" "),a("li",[t._v("分配一个文件系统，并在只读的镜像层外面挂载一层可读写层")]),t._v(" "),a("li",[t._v("从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去")]),t._v(" "),a("li",[t._v("从地址池配置一个 ip 地址给容器")]),t._v(" "),a("li",[t._v("执行用户指定的应用程序")]),t._v(" "),a("li",[t._v("执行完毕后容器被终止")])])]),t._v(" "),a("h3",{attrs:{id:"重启终止状态的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重启终止状态的容器"}},[t._v("#")]),t._v(" 重启终止状态的容器")]),t._v(" "),a("p",[t._v("利用 "),a("code",[t._v("docker container start [CONTAINER ID or NAMES]")]),t._v(" 命令，重启终止状态的容器：")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("docker ps -a")]),t._v(" 查看全部容器的列表，可以使用【CONTAINER ID】或者【NAMES】来重新启动【 STATUS 】为 Exited 的容器，这里以启动MySql为例：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个是先前被终止的MySql容器ID")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container start b4b3f94f7916 \nb4b3f94f7916\n")])])]),a("h3",{attrs:{id:"守护态运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#守护态运行"}},[t._v("#")]),t._v(" 守护态运行")]),t._v(" "),a("p",[t._v("更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 "),a("code",[t._v("-d")]),t._v(" 参数来实现。")]),t._v(" "),a("p",[t._v("先前的创建并运行容器命令 "),a("code",[t._v("docker run -p 8888:8080 --name tomcat tomcat")]),t._v(" ，容器会把输出的结果打印到宿主机上面，如果使用了 "),a("code",[t._v("-d")]),t._v(" 参数运行容器：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("wenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v(":8080 --name tomcat tomcat \n95bfac1f70fbf903278d99a4a91d924c212f10f7e8335b275d789c59d20216f1do\n")])])]),a("p",[t._v("使用 "),a("code",[t._v("-d")]),t._v(" 参数启动后会返回一个唯一的 id，此时容器会在后台运行并不会把输出的结果打印到宿主机上面，要获取容器的输出信息，可以通过"),a("code",[t._v("docker logs [CONTAINER ID or NAMES]")]),t._v(" 或者 "),a("code",[t._v("docker container logs [CONTAINER ID or NAMES]")]),t._v(" 命令查看：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器log信息，ID可以换成NAMES")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" logs 95bfac1f70fbf903278d99a4a91d924c212f10f7e8335b275d789c59d20216f1 \nNOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("java.base/java.lang"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALL-UNNAMED --add-opens"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("java.base/java.io"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALL-UNNAMED --add-opens"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("java.base/java.util"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALL-UNNAMED --add-opens"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("java.base/java.util.concurrent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALL-UNNAMED --add-opens"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("java.rmi/sun.rmi.transport"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("ALL-UNNAMED\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("-May-2021 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":41:40.630 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" org.apache.catalina.startup.VersionLoggerListener.log Server version name:   Apache Tomcat/9.0.46\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 篇幅有限忽略")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("-May-2021 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":41:41.934 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http-nio-8080"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),t._v("-May-2021 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":41:41.973 INFO "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" org.apache.catalina.startup.Catalina.start Server startup "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("232")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" milliseconds\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("容器是否会长久运行和 "),a("code",[t._v("docker run")]),t._v(" 指定的命令有关，和 "),a("code",[t._v("-d")]),t._v(" 参数无关。")]),t._v(" "),a("p",[t._v("在启动容器的时候，使用 "),a("code",[t._v("-- name")]),t._v(" 给容器起别名，可以更加方便的操作容器。")])]),t._v(" "),a("h2",{attrs:{id:"容器交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器交互"}},[t._v("#")]),t._v(" 容器交互")]),t._v(" "),a("p",[t._v("在使用 "),a("code",[t._v("-d")]),t._v(" 参数时，容器启动后会进入后台。某些时候需要进入容器进行操作，这个时候可以使用 "),a("code",[t._v("docker attach")]),t._v(" 命令或 "),a("code",[t._v("docker exec")]),t._v(" 命令，建立"),a("strong",[t._v("伪终端")]),t._v("与Docker容器进行交互，推荐大家使用 "),a("code",[t._v("docker exec")]),t._v(" 命令，原因见下文。")]),t._v(" "),a("h3",{attrs:{id:"attach-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attach-命令"}},[t._v("#")]),t._v(" attach 命令")]),t._v(" "),a("p",[a("code",[t._v("docker attach")]),t._v(" 是 Docker 自带的命令：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并启动容器")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d ubuntu /bin/sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"while true; do echo hello world; sleep 1; done"')]),t._v("\nb918befc4b2930170d9bcbc042a7e60a938c567ed04fe056251dd9c3f3e3d977\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器列表")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\nCONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                                                                                                                                NAMES\nb918befc4b29        ubuntu                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/sh -c \'while t…"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" minutes ago       Up "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" minutes\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 建立交互终端")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" attach b918befc4b29\nhello world\nhello world\nhello world\n^C "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里强制退出，后续想重新连接，发现容器已经被终止。")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" attach b918befc4b29\nYou cannot attach to a stopped container, start it first\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("用attach命令的建立的交互终端，当这个终端（stdin）exit，会导致容器的停止。")])]),t._v(" "),a("h3",{attrs:{id:"exec命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exec命令"}},[t._v("#")]),t._v(" exec命令")]),t._v(" "),a("p",[a("code",[t._v("docker exec")]),t._v(" 后边可以跟多个参数，这里主要说明 "),a("code",[t._v("-i")]),t._v("和"),a("code",[t._v("-t")]),t._v(" 参数，更多参数说明请使用 "),a("code",[t._v("docker exec --help")]),t._v(" 查看。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-i")]),t._v(" 参数：让容器的标准输入保持打开。")]),t._v(" "),a("li",[a("code",[t._v("-t")]),t._v(" 参数：让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上。")])]),t._v(" "),a("p",[t._v("只用 "),a("code",[t._v("-i")]),t._v(" 参数时，没有我们熟悉的 Linux 命令提示符界面，但命令执行结果仍然可以返回，只有两者一起使用时 "),a("code",[t._v("-it")]),t._v(" ，则可以看到我们熟悉的 Linux 命令提示符：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并启动容器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d ubuntu /bin/sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"while true; do echo hello world; sleep 1; done"')]),t._v("\nb62795961c531f9e8ea351d038902a5ac9eb53048651178b146cf30d0947d939\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看容器列表")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\nCONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                                                                                                                                NAMES\nb62795961c53        ubuntu                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/sh -c \'while t…"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" seconds ago       Up "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" seconds                                                                                                                                             quizzical_taussig\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 建立交互终端（-i）")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -i b62795961c53 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nbin\nboot\ndev\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n^C "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里强制退出，重新连接（-it）")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it b62795961c53 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\nroot@b62795961c53:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls")]),t._v("\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("用exec命令的建立的交互终端，当这个终端（stdin）exit，不会导致容器的停止。")])]),t._v(" "),a("p",[t._v("这就是为什么推荐大家使用 "),a("code",[t._v("docker exec")]),t._v(" 的原因。")]),t._v(" "),a("p",[t._v("顺带一提，我们知道容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的，除此之外，并没有其它的资源，我们可以在伪终端中利用 "),a("code",[t._v("ps")]),t._v(" 或 "),a("code",[t._v("top")]),t._v(" 来查看进程信息：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("root@b62795961c53:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ps")]),t._v("\n    PID TTY          TIME CMD\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("114")]),t._v(" pts/0    00:00:00 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("412")]),t._v(" pts/0    00:00:00 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n")])])]),a("p",[t._v("可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。")]),t._v(" "),a("h2",{attrs:{id:"终止和删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终止和删除容器"}},[t._v("#")]),t._v(" 终止和删除容器")]),t._v(" "),a("h3",{attrs:{id:"终止容器运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终止容器运行"}},[t._v("#")]),t._v(" 终止容器运行")]),t._v(" "),a("p",[t._v("可以使用"),a("code",[t._v("docker stop")]),t._v(" 或者 "),a("code",[t._v("docker container stop")]),t._v(" 来终止一个运行中的容器。")]),t._v(" "),a("p",[t._v("值得注意的是：当 Docker 容器中指定的应用终结时，容器也自动终止。例如只启动了一个终端的容器，用户通过 "),a("code",[t._v("exit")]),t._v(" 命令或 "),a("code",[t._v("Ctrl+d")]),t._v(" 来退出终端时，所创建的容器立刻终止。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动容器")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8888")]),t._v(":8080 --name tomcat tomcat\n52da0ad3c93b1b862aa7ff84dc5eb93fcea93fe86362701f39420d61feee51d1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 终止容器")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" stop tomcat\ntomcat\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启容器")]),t._v("\nwenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container start tomcat\ntomcat\n")])])]),a("p",[t._v("如前面章节所说，终止状态的容器信息可以用 "),a("code",[t._v("docker ps -a")]),t._v("或者"),a("code",[t._v("docker container ls -a")]),t._v(" 命令看到，并且可以通过 "),a("code",[t._v("docker container start")]),t._v(" 命令来重新启动，此外，"),a("code",[t._v("docker container restart")]),t._v(" 命令会将一个运行态的容器终止，然后再重新启动它。")]),t._v(" "),a("h3",{attrs:{id:"删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[t._v("#")]),t._v(" 删除容器")]),t._v(" "),a("p",[t._v("通常删除容器之前，需要先终止容器再删除：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CONTAINER ID or NAMES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制删除命令，但实质上也是先停止，再删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("CONTAINER ID or NAMES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("批量所有终止的容器：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("wenwl@ubuntu:~$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" container prune\nWARNING"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" This will remove all stopped containers.\nAre you sure you want to continue? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("y/N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" y\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);