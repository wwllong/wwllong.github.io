(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{814:function(t,v,_){"use strict";_.r(v);var a=_(58),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[t._v("#")]),t._v(" 垃圾收集器")]),t._v(" "),_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),_("p",[t._v("垃圾收集器（Garbage Collector）没有在JVM规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。")]),t._v(" "),_("p",[t._v("由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。")]),t._v(" "),_("p",[t._v("从不同角度分析垃圾收集器，可以将GC分为不同的类型。")]),t._v(" "),_("h2",{attrs:{id:"垃圾收集器分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器分类"}},[t._v("#")]),t._v(" 垃圾收集器分类")]),t._v(" "),_("ol",[_("li",[t._v("按线程数分，可以分为串行垃圾回收器和并行垃圾回收器。")])]),t._v(" "),_("ul",[_("li",[t._v("串行垃圾回收器：指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停（STW），直至垃圾收集工作结束。\n"),_("ul",[_("li",[t._v("在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，"),_("strong",[t._v("串行回收默认被应用在客户端的"),_("code",[t._v("Client")]),t._v("模式下的JVM中")]),t._v("。")])])]),t._v(" "),_("li",[t._v("并行垃圾回收器：和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“Stop-the-World”机制。\n"),_("ul",[_("li",[t._v("在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_1.png",alt:"gc_collector_1"}})]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器。")])]),t._v(" "),_("ul",[_("li",[t._v("并发式垃圾回收器：指垃圾回收线程与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。")]),t._v(" "),_("li",[t._v("独占式垃圾回收器：指垃圾回收线程一旦运行，就停止应用程序中的所有用户线程（Stop the world），直到垃圾回收过程完全结束。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_2.png",alt:"gc_collector_2"}})]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("按碎片处理方式分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。\n"),_("ul",[_("li",[t._v("压缩式垃圾回收器：回收器在回收完成后，会对存活对象进行压缩整理，消除回收后的碎片。")]),t._v(" "),_("li",[t._v("非压缩式垃圾回收器：回收器在回收完成后，不进行上述操作。")])])]),t._v(" "),_("li",[t._v("按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。")])]),t._v(" "),_("h2",{attrs:{id:"垃圾收集器性能指标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器性能指标"}},[t._v("#")]),t._v(" 垃圾收集器性能指标")]),t._v(" "),_("p",[t._v("垃圾收集器性能评估指标主要有以下几点：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("吞吐量")]),t._v("：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）")]),t._v(" "),_("li",[t._v("垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。")]),t._v(" "),_("li",[_("strong",[t._v("暂停时间")]),t._v("：执行垃圾收集时，程序的工作线程被暂停的时间。")]),t._v(" "),_("li",[t._v("收集频率：相对于应用程序的执行，收集操作发生的频率。")]),t._v(" "),_("li",[_("strong",[t._v("内存占用")]),t._v("：Java堆区所占的内存大小。")]),t._v(" "),_("li",[t._v("快速：一个对象从诞生到被回收所经历的时间。")])]),t._v(" "),_("p",[t._v("其中"),_("strong",[t._v("吞吐量、暂停时间、内存占用 这三者共同构成一个“不可能三角”")]),t._v("。三者总体的表现会随着技术进步而越来越好，一款优秀的收集器通常最多同时满足其中的两项。其中，"),_("strong",[t._v("暂停时间的重要性日益凸显")]),t._v("。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量，而内存的扩大，对延迟反而带来负面效果。")]),t._v(" "),_("p",[t._v("简单来说，"),_("strong",[t._v("主要抓住两点：吞吐量、暂停时间")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"吞吐量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量"}},[t._v("#")]),t._v(" 吞吐量")]),t._v(" "),_("p",[t._v("吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即"),_("strong",[t._v("吞吐量 = 运行用户代码时间 /（运行用户代码时间+垃圾收集时间）")]),t._v("。比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。")]),t._v(" "),_("p",[t._v("这种情况下，应用程序能容忍较高的暂停时间，因此，"),_("strong",[t._v("高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("吞吐量优先，意味着在单位时间内，STW的时间最短")]),t._v("：0.2 + 0.2 = 0.4")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_3.png",alt:"gc_collector_3"}})]),t._v(" "),_("h3",{attrs:{id:"暂停时间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#暂停时间"}},[t._v("#")]),t._v(" 暂停时间")]),t._v(" "),_("p",[t._v("暂停时间是指一个时间段内应用程序线程暂停，让GC线程执行的状态。例如，GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的。")]),t._v(" "),_("p",[_("strong",[t._v("暂停时间优先，意味着尽可能让单次STW的时间最短")]),t._v("：0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 0.5")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_4.png",alt:"gc_collector_4"}})]),t._v(" "),_("h3",{attrs:{id:"吞吐量-vs-暂停时间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量-vs-暂停时间"}},[t._v("#")]),t._v(" 吞吐量 vs 暂停时间")]),t._v(" "),_("p",[t._v("高吞吐量较好：这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。"),_("strong",[t._v("直觉上，吞吐量越高程序运行越快")]),t._v("。")]),t._v(" "),_("p",[t._v("低暂停时间（低延迟）较好：从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。因此，"),_("strong",[t._v("具有低的较大暂停时间是非常重要的，特别是对于一个交互式应用程序")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("因为如果选择以吞吐量优先，那么"),_("strong",[t._v("必然需要降低内存回收的执行频率")]),t._v("，但是这样会导致"),_("strong",[t._v("GC需要更长的暂停时间")]),t._v("来执行内存回收。")]),t._v(" "),_("li",[t._v("相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也"),_("strong",[t._v("只能频繁地执行内存回收")]),t._v("，但这又"),_("strong",[t._v("引起了年轻代内存的缩减和导致程序吞吐量的下降")]),t._v("。")])]),t._v(" "),_("p",[t._v("在设计或使用GC算法时，我们必须确定我们的目标："),_("strong",[t._v("一个GC算法只可能针对两个目标之一")]),t._v("（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。")]),t._v(" "),_("p",[t._v("现在标准："),_("strong",[t._v("在最大吞吐量优先的情况下，降低停顿时间")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_vs.jpg",alt:"gc_collector_vs"}})]),t._v(" "),_("h2",{attrs:{id:"不同垃圾回收器概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不同垃圾回收器概述"}},[t._v("#")]),t._v(" 不同垃圾回收器概述")]),t._v(" "),_("p",[t._v("垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。")]),t._v(" "),_("h3",{attrs:{id:"垃圾回收器发展史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器发展史"}},[t._v("#")]),t._v(" 垃圾回收器发展史")]),t._v(" "),_("p",[t._v("有了虚拟机，就一定需要收集垃圾的机制("),_("code",[t._v("Garbage Collection")]),t._v(")，对应的产品我们称为"),_("code",[t._v("Garbage Collector")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("1999年随JDK1.3.1一起来的是串行方式的serialGc，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本")]),t._v(" "),_("li",[t._v("2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布·")]),t._v(" "),_("li",[t._v("Parallel GC在JDK6之后成为HotSpot默认GC。")]),t._v(" "),_("li",[t._v("2012年，在JDK1.7u4版本中，G1可用。")]),t._v(" "),_("li",[t._v("2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。")]),t._v(" "),_("li",[t._v("2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。")]),t._v(" "),_("li",[t._v('2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 "No-Op(无操作)“ 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）')]),t._v(" "),_("li",[t._v("2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。")]),t._v(" "),_("li",[t._v("2019年9月，JDK13发布。增强ZGC，自动返回未用堆内存给操作系统。")]),t._v(" "),_("li",[t._v("2020年3月，JDK14发布。删除CMS垃圾回收器。扩展ZGC在macos和Windows上的应用")])]),t._v(" "),_("h3",{attrs:{id:"_7种经典的垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7种经典的垃圾收集器"}},[t._v("#")]),t._v(" 7种经典的垃圾收集器")]),t._v(" "),_("p",[t._v("目前主要有7种经典的垃圾收集器，详细介绍可参考"),_("a",{attrs:{href:"https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("GC官方手册"),_("OutboundLink")],1),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("串行回收器：Serial、Serial Old")]),t._v(" "),_("li",[t._v("并行回收器：ParNew、Parallel Scavenge、Parallel old")]),t._v(" "),_("li",[t._v("并发回收器：CMS、G1")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_5.png",alt:"gc_collector_5"}})]),t._v(" "),_("h3",{attrs:{id:"经典收集器与垃圾分代之间的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#经典收集器与垃圾分代之间的关系"}},[t._v("#")]),t._v(" 经典收集器与垃圾分代之间的关系")]),t._v(" "),_("ul",[_("li",[t._v("新生代收集器：Serial、ParNew、Parallel Scavenge；")]),t._v(" "),_("li",[t._v("老年代收集器：Serial Old、Parallel Old、CMS；")]),t._v(" "),_("li",[t._v("整堆收集器：G1；")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_classic_7.jpg",alt:"gc_collector_classic_7"}})]),t._v(" "),_("h3",{attrs:{id:"经典收集器的组合关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#经典收集器的组合关系"}},[t._v("#")]),t._v(" 经典收集器的组合关系")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_group_7.jpg",alt:"gc_collector_group_7"}})]),t._v(" "),_("ol",[_("li",[t._v("两个收集器间有连线，表明它们可以搭配使用：Serial+Serial Old、Serial+CMS、ParNew+Serial Old、ParNew+CMS、Parallel Scavenge+Serial Old、Parallel Scavenge+Parallel Old、G1；")]),t._v(" "),_("li",[t._v("其中Serial Old作为CMS出现"),_("code",[t._v("Concurrent Mode Failure")]),t._v("失败的后备预案。")]),t._v(" "),_("li",[t._v("红色虚线：由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial Old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214）。")]),t._v(" "),_("li",[t._v("绿色虚线：JDK14中弃用Parallel Scavenge和Serial Old的GC组合（JEP366）")]),t._v(" "),_("li",[t._v("绿色虚框：JDK14中删除CMS垃圾回收器（JEP363）")])]),t._v(" "),_("h3",{attrs:{id:"不同的垃圾收集器概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不同的垃圾收集器概述"}},[t._v("#")]),t._v(" 不同的垃圾收集器概述")]),t._v(" "),_("p",[t._v("为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。")]),t._v(" "),_("p",[t._v("虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。")]),t._v(" "),_("p",[t._v("所以"),_("strong",[t._v("我们选择的只是对具体应用最合适的收集器")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"如何查看默认垃圾收集器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何查看默认垃圾收集器"}},[t._v("#")]),t._v(" 如何查看默认垃圾收集器")]),t._v(" "),_("p",[_("code",[t._v("-XX:+PrintCommandLineFlags")]),t._v("：查看命令行相关参数（包含使用的垃圾收集器）")]),t._v(" "),_("p",[t._v("或者使用命令行指令："),_("code",[t._v("jinfo -flag 相关垃圾回收器参数 进程ID")])]),t._v(" "),_("h2",{attrs:{id:"serial回收器-串行回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#serial回收器-串行回收"}},[t._v("#")]),t._v(" Serial回收器：串行回收")]),t._v(" "),_("p",[t._v("Serial收集器是"),_("strong",[t._v("最基本、历史最悠久")]),t._v("的垃圾收集器了，JDK1.3之前它是回收新生代唯一的选择。")]),t._v(" "),_("p",[t._v("Serial收集器作为HotSpot中"),_("code",[t._v("Client")]),t._v("模式下的默认新生代垃圾收集器。")]),t._v(" "),_("p",[_("strong",[t._v("Serial收集器采用复制算法、串行回收和STW机制的方式执行内存回收")]),t._v("。")]),t._v(" "),_("p",[t._v("除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial Old收集器。"),_("strong",[t._v("Serial Old收集器同样也采用了串行回收和STW机制，只不过内存回收算法使用的是标记-压缩算法")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("Serial Old是运行在"),_("code",[t._v("Client")]),t._v("模式下默认的老年代的垃圾回收器")]),t._v(" "),_("li",[t._v("Serial 0ld在"),_("code",[t._v("Server")]),t._v("模式下主要有两个用途\n"),_("ul",[_("li",[t._v("与新生代的Parallel Scavenge配合使用")]),t._v(" "),_("li",[t._v("作为老年代CMS收集器的后备垃圾收集方案")])])])]),t._v(" "),_("h3",{attrs:{id:"执行过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行过程"}},[t._v("#")]),t._v(" 执行过程")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_9.png",alt:"gc_collector_9"}})]),t._v(" "),_("p",[t._v("这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它"),_("strong",[t._v("只会使用一个CPU或一条收集线程去完成垃圾收集工作")]),t._v("，更重要的是在它进行垃圾收集时，"),_("strong",[t._v("必须暂停其他所有的工作线程（Stop The World）")]),t._v("，直到它收集结束")]),t._v(" "),_("p",[t._v("优势：简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。运行在Client模式下的虚拟机是个不错的选择。")]),t._v(" "),_("ul",[_("li",[t._v("在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。")])]),t._v(" "),_("p",[t._v("缺点：他的优势也是它的缺点，在限定单核cpu才可以用。现在很多运行环境不是单核的了，这种垃圾收集器大家了解即可，而且对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java Web应用程序中是不会采用串行垃圾收集器的。")]),t._v(" "),_("h3",{attrs:{id:"参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("-XX:+UseSerialGC")]),t._v("：指定年轻代和老年代都使用串行收集器。"),_("strong",[t._v("等价于新生代用Serial GC，且老年代用Serial Old GC")]),t._v("。")])]),t._v(" "),_("h2",{attrs:{id:"parnew回收器-并行回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parnew回收器-并行回收"}},[t._v("#")]),t._v(" ParNew回收器：并行回收")]),t._v(" "),_("p",[t._v("如果说Serial GC是年轻代中的单线程垃圾收集器，那么"),_("strong",[t._v("ParNew收集器则是Serial收集器的多线程版本")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("Par是Parallel的缩写，New：只能处理的是新生代")])]),t._v(" "),_("p",[t._v("ParNew收集器除了"),_("strong",[t._v("采用并行回收")]),t._v("的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是"),_("strong",[t._v('采用复制算法、"Stop-the-World"机制')]),t._v("。")]),t._v(" "),_("p",[t._v("ParNew是很多JVM运行在"),_("code",[t._v("Server")]),t._v("模式下新生代的默认垃圾收集器。"),_("strong",[t._v("除Serial外，目前只有ParNew GC能与CMS收集器配合工作")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("对于新生代，回收次数频繁，使用并行方式高效。")]),t._v(" "),_("li",[t._v("对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）")])]),t._v(" "),_("h3",{attrs:{id:"执行过程-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行过程-2"}},[t._v("#")]),t._v(" 执行过程")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_10.png",alt:"gc_collector_10"}})]),t._v(" "),_("p",[t._v("注意，由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比Serial收集器更高效？")]),t._v(" "),_("ul",[_("li",[t._v("ParNew 收集器运行在多CPU的环境下，由于可以充分利用多CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。")]),t._v(" "),_("li",[t._v("但是"),_("strong",[t._v("在单个CPU的环境下，ParNew收集器不比Serial收集器更高效")]),t._v("。虽然Serial收集器是基于串行回收，但是由于CPU不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。")])]),t._v(" "),_("h3",{attrs:{id:"参数-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参数-2"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("-XX:+UseParNewGC")]),t._v("：手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代")]),t._v(" "),_("li",[_("code",[t._v("-XX:ParallelGCThreads")]),t._v("：限制线程数量，默认开启和CPU数据相同的线程数。")])]),t._v(" "),_("h2",{attrs:{id:"parallel回收器-吞吐量优先"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#parallel回收器-吞吐量优先"}},[t._v("#")]),t._v(" Parallel回收器：吞吐量优先")]),t._v(" "),_("p",[t._v("HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了"),_("strong",[t._v('复制算法、并行回收和"Stop the World"机制')]),t._v("。")]),t._v(" "),_("p",[t._v("那么Parallel 收集器的出现是否多此一举？")]),t._v(" "),_("ul",[_("li",[t._v("和ParNew收集器不同，Parallel Scavenge收集器的目标则是"),_("strong",[t._v("达到一个可控制的吞吐量")]),t._v("（Throughput），它也被称为"),_("strong",[t._v("吞吐量优先的垃圾收集器")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("自适应调节策略")]),t._v("也是Parallel Scavenge与ParNew一个重要区别。")])]),t._v(" "),_("p",[t._v("高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要"),_("strong",[t._v("适合在后台运算而不需要太多交互的任务")]),t._v("。因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。")]),t._v(" "),_("h3",{attrs:{id:"执行过程-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行过程-3"}},[t._v("#")]),t._v(" 执行过程")]),t._v(" "),_("p",[t._v("Parallel Scavenge收集器在JDK1.6时提供了用于执行老年代垃圾收集的Parallel Old收集器，用来代替老年代的Serial Old收集器，它采用了"),_("strong",[t._v("标记-压缩算法")]),t._v("，但同样也是基于"),_("strong",[t._v('并行回收和"Stop-the-World"机制')]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_11.png",alt:"gc_collector_11"}})]),t._v(" "),_("p",[_("strong",[t._v("在程序吞吐量优先的应用场景中，Parallel收集器和Parallel Old收集器的组合，在Server模式下的内存回收性能很不错")]),t._v("。在Java8中默认是此垃圾收集器。")]),t._v(" "),_("h3",{attrs:{id:"参数-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参数-3"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("-XX:+UseParallelGC")]),t._v("：手动指定年轻代使用Parallel并行收集器执行内存回收任务。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("-XX:+UseParallelOldGC")]),t._v(" ：手动指定老年代都是使用并行回收收集器。")]),t._v(" "),_("ul",[_("li",[t._v("分别适用于新生代和老年代。在JDK8中是默认开启的。")]),t._v(" "),_("li",[t._v("上面两个参数，默认开启一个，另一个也会被开启。（互相激活）")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("-XX:ParallelGCThreads")]),t._v(": 设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。")]),t._v(" "),_("p",[_("span",{staticClass:"katex"},[_("span",{staticClass:"katex-mathml"},[_("math",[_("semantics",[_("mrow",[_("mi",[t._v("P")]),_("mi",[t._v("a")]),_("mi",[t._v("r")]),_("mi",[t._v("a")]),_("mi",[t._v("l")]),_("mi",[t._v("l")]),_("mi",[t._v("e")]),_("mi",[t._v("l")]),_("mi",[t._v("G")]),_("mi",[t._v("C")]),_("mi",[t._v("T")]),_("mi",[t._v("h")]),_("mi",[t._v("r")]),_("mi",[t._v("e")]),_("mi",[t._v("a")]),_("mi",[t._v("d")]),_("mi",[t._v("s")]),_("mo",[t._v("=")]),_("mrow",[_("mo",{attrs:{fence:"true"}},[t._v("{")]),_("mtable",{attrs:{rowspacing:"0.3599999999999999em",columnalign:"left left",columnspacing:"1em"}},[_("mtr",[_("mtd",[_("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[_("mrow",[_("mi",[t._v("C")]),_("mi",[t._v("P")]),_("mi",[t._v("U")]),_("mi",{attrs:{mathvariant:"normal"}},[t._v("_")]),_("mi",[t._v("C")]),_("mi",[t._v("o")]),_("mi",[t._v("u")]),_("mi",[t._v("n")]),_("mi",[t._v("t")])],1)],1)],1),_("mtd",[_("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[_("mrow",[_("mtext",[t._v("(")]),_("mi",[t._v("C")]),_("mi",[t._v("P")]),_("mi",[t._v("U")]),_("mi",{attrs:{mathvariant:"normal"}},[t._v("_")]),_("mi",[t._v("C")]),_("mi",[t._v("o")]),_("mi",[t._v("u")]),_("mi",[t._v("n")]),_("mi",[t._v("t")]),_("mo",[t._v("<")]),_("mo",[t._v("=")]),_("mn",[t._v("8")]),_("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1)],1)],1)],1),_("mtr",[_("mtd",[_("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[_("mrow",[_("mn",[t._v("3")]),_("mo",[t._v("+")]),_("mo",{attrs:{stretchy:"false"}},[t._v("(")]),_("mn",[t._v("5")]),_("mo",[t._v("∗")]),_("mi",[t._v("C")]),_("mi",[t._v("P")]),_("mi",[t._v("U")]),_("mi",{attrs:{mathvariant:"normal"}},[t._v("＿")]),_("mi",[t._v("C")]),_("mi",[t._v("o")]),_("mi",[t._v("u")]),_("mi",[t._v("n")]),_("mi",[t._v("t")]),_("mi",{attrs:{mathvariant:"normal"}},[t._v("/")]),_("mn",[t._v("8")]),_("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1)],1)],1),_("mtd",[_("mstyle",{attrs:{scriptlevel:"0",displaystyle:"false"}},[_("mrow",[_("mtext",[t._v("(")]),_("mi",[t._v("C")]),_("mi",[t._v("P")]),_("mi",[t._v("U")]),_("mi",{attrs:{mathvariant:"normal"}},[t._v("_")]),_("mi",[t._v("C")]),_("mi",[t._v("o")]),_("mi",[t._v("u")]),_("mi",[t._v("n")]),_("mi",[t._v("t")]),_("mo",[t._v(">")]),_("mn",[t._v("8")]),_("mo",{attrs:{stretchy:"false"}},[t._v(")")])],1)],1)],1)],1)],1)],1)],1),_("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("ParallelGCThreads =  \\begin{cases}  CPU\\_Count & \\text (CPU\\_Count <= 8) \\\\  3 + (5 * CPU＿Count / 8) & \\text (CPU\\_Count > 8)  \\end{cases}")])],1)],1)],1),_("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[_("span",{staticClass:"base"},[_("span",{staticClass:"strut",staticStyle:{height:"0.69444em","vertical-align":"0em"}}),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[t._v("P")]),_("span",{staticClass:"mord mathdefault"},[t._v("a")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),_("span",{staticClass:"mord mathdefault"},[t._v("a")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),_("span",{staticClass:"mord mathdefault"},[t._v("e")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),_("span",{staticClass:"mord mathdefault"},[t._v("G")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[t._v("T")]),_("span",{staticClass:"mord mathdefault"},[t._v("h")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),_("span",{staticClass:"mord mathdefault"},[t._v("e")]),_("span",{staticClass:"mord mathdefault"},[t._v("a")]),_("span",{staticClass:"mord mathdefault"},[t._v("d")]),_("span",{staticClass:"mord mathdefault"},[t._v("s")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),_("span",{staticClass:"mrel"},[t._v("=")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}})]),_("span",{staticClass:"base"},[_("span",{staticClass:"strut",staticStyle:{height:"3.0000299999999998em","vertical-align":"-1.25003em"}}),_("span",{staticClass:"minner"},[_("span",{staticClass:"mopen delimcenter",staticStyle:{top:"0em"}},[_("span",{staticClass:"delimsizing size4"},[t._v("{")])]),_("span",{staticClass:"mord"},[_("span",{staticClass:"mtable"},[_("span",{staticClass:"col-align-l"},[_("span",{staticClass:"vlist-t vlist-t2"},[_("span",{staticClass:"vlist-r"},[_("span",{staticClass:"vlist",staticStyle:{height:"1.69em"}},[_("span",{staticStyle:{top:"-3.69em"}},[_("span",{staticClass:"pstrut",staticStyle:{height:"3.008em"}}),_("span",{staticClass:"mord"},[_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[t._v("P")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("U")]),_("span",{staticClass:"mord",staticStyle:{"margin-right":"0.02778em"}},[t._v("_")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault"},[t._v("o")]),_("span",{staticClass:"mord mathdefault"},[t._v("u")]),_("span",{staticClass:"mord mathdefault"},[t._v("n")]),_("span",{staticClass:"mord mathdefault"},[t._v("t")])])]),_("span",{staticStyle:{top:"-2.25em"}},[_("span",{staticClass:"pstrut",staticStyle:{height:"3.008em"}}),_("span",{staticClass:"mord"},[_("span",{staticClass:"mord"},[t._v("3")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),_("span",{staticClass:"mbin"},[t._v("+")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),_("span",{staticClass:"mopen"},[t._v("(")]),_("span",{staticClass:"mord"},[t._v("5")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),_("span",{staticClass:"mbin"},[t._v("∗")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[t._v("P")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("U")]),_("span",{staticClass:"mord cjk_fallback"},[t._v("＿")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault"},[t._v("o")]),_("span",{staticClass:"mord mathdefault"},[t._v("u")]),_("span",{staticClass:"mord mathdefault"},[t._v("n")]),_("span",{staticClass:"mord mathdefault"},[t._v("t")]),_("span",{staticClass:"mord"},[t._v("/")]),_("span",{staticClass:"mord"},[t._v("8")]),_("span",{staticClass:"mclose"},[t._v(")")])])])]),_("span",{staticClass:"vlist-s"},[t._v("​")])]),_("span",{staticClass:"vlist-r"},[_("span",{staticClass:"vlist",staticStyle:{height:"1.19em"}},[_("span")])])])]),_("span",{staticClass:"arraycolsep",staticStyle:{width:"1em"}}),_("span",{staticClass:"col-align-l"},[_("span",{staticClass:"vlist-t vlist-t2"},[_("span",{staticClass:"vlist-r"},[_("span",{staticClass:"vlist",staticStyle:{height:"1.69em"}},[_("span",{staticStyle:{top:"-3.69em"}},[_("span",{staticClass:"pstrut",staticStyle:{height:"3.008em"}}),_("span",{staticClass:"mord"},[_("span",{staticClass:"mord text"},[_("span",{staticClass:"mord"},[t._v("(")])]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[t._v("P")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("U")]),_("span",{staticClass:"mord",staticStyle:{"margin-right":"0.02778em"}},[t._v("_")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault"},[t._v("o")]),_("span",{staticClass:"mord mathdefault"},[t._v("u")]),_("span",{staticClass:"mord mathdefault"},[t._v("n")]),_("span",{staticClass:"mord mathdefault"},[t._v("t")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),_("span",{staticClass:"mrel"},[t._v("<")]),_("span",{staticClass:"mrel"},[t._v("=")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),_("span",{staticClass:"mord"},[t._v("8")]),_("span",{staticClass:"mclose"},[t._v(")")])])]),_("span",{staticStyle:{top:"-2.25em"}},[_("span",{staticClass:"pstrut",staticStyle:{height:"3.008em"}}),_("span",{staticClass:"mord"},[_("span",{staticClass:"mord text"},[_("span",{staticClass:"mord"},[t._v("(")])]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.13889em"}},[t._v("P")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.10903em"}},[t._v("U")]),_("span",{staticClass:"mord",staticStyle:{"margin-right":"0.02778em"}},[t._v("_")]),_("span",{staticClass:"mord mathdefault",staticStyle:{"margin-right":"0.07153em"}},[t._v("C")]),_("span",{staticClass:"mord mathdefault"},[t._v("o")]),_("span",{staticClass:"mord mathdefault"},[t._v("u")]),_("span",{staticClass:"mord mathdefault"},[t._v("n")]),_("span",{staticClass:"mord mathdefault"},[t._v("t")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),_("span",{staticClass:"mrel"},[t._v(">")]),_("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2777777777777778em"}}),_("span",{staticClass:"mord"},[t._v("8")]),_("span",{staticClass:"mclose"},[t._v(")")])])])]),_("span",{staticClass:"vlist-s"},[t._v("​")])]),_("span",{staticClass:"vlist-r"},[_("span",{staticClass:"vlist",staticStyle:{height:"1.19em"}},[_("span")])])])])])]),_("span",{staticClass:"mclose nulldelimiter"})])])])])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("-XX:MaxGCPauseMillis")]),t._v(": 设置垃圾收集器最大停顿时间（即STW的时间），单位是毫秒。")]),t._v(" "),_("ul",[_("li",[t._v("为了尽可能地把停顿时间控制在"),_("code",[t._v("MaxGCPauseMills")]),t._v("以内，收集器在工作时会调整Java堆大小或者其他一些参数。")]),t._v(" "),_("li",[t._v("对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合时使用Parallel，进行控制。")]),t._v(" "),_("li",[_("strong",[t._v("该参数使用需谨慎")]),t._v("。")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("-XX:GCTimeRatio")]),t._v(": 垃圾收集时间占总时间的比例（=1/（N+1）），用于衡量吞吐量的大小。")]),t._v(" "),_("ul",[_("li",[t._v("取值范围（0, 100），默认值99，也就是垃圾回收时间不超过1%。")]),t._v(" "),_("li",[t._v("与前一个"),_("code",[t._v("-XX:MaxGCPauseMillis")]),t._v("参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("-XX:+UseAdaptivesizePolicy")]),t._v(": "),_("strong",[t._v("设置Parallel Scavenge收集器具有自适应调节策略")])]),t._v(" "),_("ul",[_("li",[t._v("在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。")]),t._v(" "),_("li",[t._v("在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMills），让虚拟机自己完成调优工作。")])])])]),t._v(" "),_("h2",{attrs:{id:"cms回收器-低延迟"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cms回收器-低延迟"}},[t._v("#")]),t._v(" CMS回收器：低延迟")]),t._v(" "),_("p",[t._v("在JDK1.5时期，HotSpot推出了一款在"),_("strong",[t._v("强交互应用")]),t._v("中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，"),_("strong",[t._v("这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作")]),t._v("。")]),t._v(" "),_("p",[t._v("CMS收集器的关注点是"),_("strong",[t._v("尽可能缩短垃圾收集时用户线程的停顿时间")]),t._v("。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。")]),t._v(" "),_("ul",[_("li",[t._v("目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验，CMS收集器就非常符合这类应用的需求。")])]),t._v(" "),_("p",[t._v("CMS的垃圾收集算法"),_("strong",[t._v('采用标记-清除算法，并且也会"Stop-the-World"')]),t._v("，由于采用这种算法，所以它的弊端之一就是内存碎片化。不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中"),_("strong",[t._v("使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("在G1出现之前，CMS使用还是非常广泛的，一直到今天，仍然有很多系统使用CMS GC")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"执行过程-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#执行过程-4"}},[t._v("#")]),t._v(" 执行过程")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_12.png",alt:"gc_collector_12"}})]),t._v(" "),_("p",[t._v("CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("初始标记")]),t._v("（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务"),_("strong",[t._v("仅仅只是标记出GCRoots能直接关联到的对象")]),t._v("。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的"),_("strong",[t._v("速度非常快")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("并发标记")]),t._v("（Concurrent-Mark）阶段："),_("strong",[t._v("从GC Roots的直接关联对象开始遍历整个对象图的过程")]),t._v("，这个过程"),_("strong",[t._v("耗时较长但是不需要停顿用户线程")]),t._v("，用户线程可以与垃圾收集线程一起"),_("strong",[t._v("并发运行")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("重新标记")]),t._v("（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了"),_("strong",[t._v("修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象进行重新标记记录")]),t._v("，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也"),_("strong",[t._v("远比并发标记阶段的时间短")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("并发清除")]),t._v("（Concurrent-Sweep）阶段：此阶段"),_("strong",[t._v("清理删除掉标记阶段判断的已经死亡的对象，释放内存空间")]),t._v("。由于不需要移动存活对象，所以这个阶段也是可以"),_("strong",[t._v("与用户线程同时并发")]),t._v("的。")])]),t._v(" "),_("p",[t._v("尽管CMS收集器采用的是并发回收（非独占式），但是"),_("strong",[t._v("在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制")]),t._v("暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“Stop-the-World”，只是尽可能地缩短暂停时间。")]),t._v(" "),_("p",[_("strong",[t._v("由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的")]),t._v("。")]),t._v(" "),_("p",[t._v("另外，由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，"),_("strong",[t._v("还应该确保应用程序用户线程有足够的内存可用")]),t._v("。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是"),_("strong",[t._v("当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行")]),t._v("。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次"),_("code",[t._v("Concurrent Mode Failure")]),t._v("失败，这时虚拟机将启动后备预案："),_("strong",[t._v("临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了")]),t._v("。")]),t._v(" "),_("p",[t._v("CMS收集器的垃圾收集算法采用的是标记-清除算法，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将"),_("strong",[t._v("会产生一些内存碎片")]),t._v("。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择"),_("strong",[t._v("空闲列表")]),t._v("（Free List）执行内存分配。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_13.png",alt:"gc_collector_13"}})]),t._v(" "),_("p",[t._v("有人会觉得既然Mark Sweep会造成内存碎片，那么为什么不把算法换成Mark Compact？")]),t._v(" "),_("ul",[_("li",[t._v("答案其实很简单，因为"),_("strong",[t._v("当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢")]),t._v("？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。"),_("strong",[t._v("Mark Compact更适合“Stop the World” 这种场景下使用")]),t._v("。")])]),t._v(" "),_("h3",{attrs:{id:"优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),_("p",[t._v("优点：")]),t._v(" "),_("ul",[_("li",[t._v("并发收集")]),t._v(" "),_("li",[t._v("低延迟")])]),t._v(" "),_("p",[t._v("缺点：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("会产生内存碎片")]),t._v("，导致并发清除后，用户线程可用的空间不足，"),_("strong",[t._v("在无法分配大对象的情况下，不得不提前触发FullGC")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("CMS收集器对CPU资源非常敏感")]),t._v("。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。")]),t._v(" "),_("li",[_("strong",[t._v("CMS收集器无法处理浮动垃圾")]),t._v("。可能出现"),_("code",[t._v("Concurrent Mode Failure")]),t._v("失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么"),_("strong",[t._v("在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收")]),t._v("，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。")])]),t._v(" "),_("h3",{attrs:{id:"参数-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参数-4"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("-XX:+UseConcMarkSweepGC")]),t._v("：手动指定使用CMS收集器执行内存回收任务。\n开启该参数后会自动将-xx:+UseParNewGC打开。即：ParNew（Young区用）+CMS（Old区用）+ Serial Old的组合。")]),t._v(" "),_("li",[_("code",[t._v("-XX:CMSInitiatingOccupanyFraction")]),t._v("：设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。\n"),_("ul",[_("li",[t._v("JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次CMS回收。JDK6及以上版本默认值为92%。")]),t._v(" "),_("li",[t._v("如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Full GC的执行次数。")])])]),t._v(" "),_("li",[_("code",[t._v("-XX:+UseCMSCompactAtFullCollection")]),t._v(": 用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。")]),t._v(" "),_("li",[_("code",[t._v("-XX:CMSFullGCsBeforeCompaction")]),t._v(": 设置在执行多少次Full GC后对内存空间进行压缩整理。")]),t._v(" "),_("li",[_("code",[t._v("-XX:ParallelcMSThreads")]),t._v(": 设置CMS的线程数量。\n"),_("ul",[_("li",[t._v("CMS默认启动的线程数是（ParallelGCThreads+3）/4，"),_("code",[t._v("ParallelGCThreads")]),t._v("是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。")])])])]),t._v(" "),_("h3",{attrs:{id:"jdk后续版本中cms的变化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk后续版本中cms的变化"}},[t._v("#")]),t._v(" JDK后续版本中CMS的变化")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("JDK9新特性：CMS被标记为"),_("code",[t._v("Deprecate")]),t._v("了（JEP291）")]),t._v(" "),_("p",[t._v("如果对JDK9及以上版本的HotSpot虚拟机使用参数"),_("code",[t._v("-XX: +UseConcMarkSweepGC")]),t._v("来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。")])]),t._v(" "),_("li",[_("p",[t._v("JDK14新特性：删除CMS垃圾回收器（JEP363）")]),t._v(" "),_("p",[t._v("移除了CMS垃圾收集器，如果在JDK14中使用"),_("code",[t._v("-XX:+UseConcMarkSweepGC")]),t._v("的话，JVM不会报错，只是给出一个warning信息，但是不会exit，JVM会自动回退以默认GC方式启动JVM。")])])]),t._v(" "),_("h2",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),_("p",[t._v("HotSpot有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC这三个GC有什么不同呢？")]),t._v(" "),_("p",[t._v("请记住以下口令：")]),t._v(" "),_("ul",[_("li",[t._v("如果你想要最小化地使用内存和并行开销，请选Serial GC；")]),t._v(" "),_("li",[t._v("如果你想要最大化应用程序的吞吐量，请选Parallel GC；")]),t._v(" "),_("li",[t._v("如果你想要最小化GC的中断或停顿时间，请选CMS GC。")])]),t._v(" "),_("h2",{attrs:{id:"g1回收器-区域化分代式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器-区域化分代式"}},[t._v("#")]),t._v(" G1回收器：区域化分代式")]),t._v(" "),_("p",[t._v("既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First（G1）？")]),t._v(" "),_("ul",[_("li",[t._v("原因就在于应用程序所应对的"),_("strong",[t._v("业务越来越庞大、复杂，用户越来越多")]),t._v("，没有GC就不能保证应用程序正常进行，而"),_("strong",[t._v("经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化")]),t._v("。G1（Garbage-First）垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。")])]),t._v(" "),_("p",[t._v("也就是说为了适应现在不断扩大的内存和不断增加的处理器数量，垃圾回收器的发展方向是"),_("strong",[t._v("进一步降低暂停时间（Pause Time），同时兼顾良好的吞吐量")]),t._v("。")]),t._v(" "),_("p",[t._v("官方给"),_("strong",[t._v("G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"g1简介与名称由来"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1简介与名称由来"}},[t._v("#")]),t._v(" G1简介与名称由来")]),t._v(" "),_("p",[t._v("G1（Garbage-First）是一款面向服务端应用的垃圾收集器，"),_("strong",[t._v("主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征")]),t._v("。")]),t._v(" "),_("p",[t._v("因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（"),_("code",[t._v("Region")]),t._v("）（物理上不连续的）。"),_("strong",[t._v("使用不同的"),_("code",[t._v("Region")]),t._v("来表示Eden、幸存者0区，幸存者1区，老年代等")]),t._v("。")]),t._v(" "),_("p",[t._v("G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个"),_("code",[t._v("Region")]),t._v("里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个"),_("em",[t._v("优先列表")]),t._v("，"),_("strong",[t._v("每次根据允许的收集时间，优先回收价值最大的"),_("code",[t._v("Region")])]),t._v("。由于这种方式的"),_("strong",[t._v("侧重点在于回收垃圾最大量的区间（"),_("code",[t._v("Region")]),t._v("）")]),t._v("，所以我们给G1一个名字："),_("strong",[t._v("垃圾优先（Garbage First）")]),t._v("。")]),t._v(" "),_("p",[t._v("G1 GC在JDK1.7版本正式启用，移除了Experimenta1的标识，是"),_("strong",[t._v("JDK9以后的默认垃圾回收器")]),t._v("，取代了CMS回收器以及Parallel + Parallel Old组合，被Oracle官方称为“全功能的垃圾收集器”。与此同时，CMS已经在JDK9中被标记为废弃（"),_("code",[t._v("deprecated")]),t._v("）。在JDK8中还不是默认的垃圾回收器，需要使用"),_("code",[t._v("-XX:+UseG1GC")]),t._v("来启用。")]),t._v(" "),_("h3",{attrs:{id:"特点-优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点-优势"}},[t._v("#")]),t._v(" 特点（优势）")]),t._v(" "),_("p",[t._v("与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：")]),t._v(" "),_("h4",{attrs:{id:"并行与并发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并行与并发"}},[t._v("#")]),t._v(" 并行与并发")]),t._v(" "),_("ul",[_("li",[t._v("并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程是STW的。")]),t._v(" "),_("li",[t._v("并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况。")])]),t._v(" "),_("h4",{attrs:{id:"分代收集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分代收集"}},[t._v("#")]),t._v(" 分代收集")]),t._v(" "),_("ul",[_("li",[t._v("从分代上看，"),_("strong",[t._v("G1依然属于分代型垃圾回收器")]),t._v("，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。")]),t._v(" "),_("li",[_("strong",[t._v("将堆空间分为若干个区域（"),_("code",[t._v("Region")]),t._v("），这些区域中包含了逻辑上的年轻代和老年代")]),t._v("。")]),t._v(" "),_("li",[t._v("和之前的各类回收器不同，它同时"),_("strong",[t._v("兼顾年轻代和老年代")]),t._v("。对比其他回收器，或者工作在年轻代，或者工作在老年代；")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_14.png",alt:"gc_collector_14"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_15.png",alt:"gc_collector_15"}})]),t._v(" "),_("h4",{attrs:{id:"空间整合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#空间整合"}},[t._v("#")]),t._v(" 空间整合")]),t._v(" "),_("p",[t._v("G1针对CMS使用的“标记-清除”算法，导致的内存碎片、若干次GC后进行一次碎片整理的问题提出了新的解决方案。")]),t._v(" "),_("p",[t._v("G1将内存划分为一个个的"),_("code",[t._v("Region")]),t._v("。内存的回收是以"),_("code",[t._v("Region")]),t._v("作为基本单位的。"),_("strong",[t._v("Region之间是复制算法，但整体上实际可看作是标记-压缩（Mark-Compact）算法")]),t._v("，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC，"),_("strong",[t._v("尤其是当Java堆非常大的时候，G1的优势更加明显")]),t._v("。")]),t._v(" "),_("h4",{attrs:{id:"可预测的停顿时间模型-即-软实时soft-real-time"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#可预测的停顿时间模型-即-软实时soft-real-time"}},[t._v("#")]),t._v(" 可预测的停顿时间模型（即：软实时soft real-time）")]),t._v(" "),_("p",[t._v("这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，"),_("strong",[t._v("能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过M毫秒")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。")]),t._v(" "),_("li",[t._v("G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，"),_("strong",[t._v("每次根据允许的收集时间，优先回收价值最大的"),_("code",[t._v("Region")])]),t._v("。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率")]),t._v(" "),_("li",[t._v("相比于CMS GC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。")])]),t._v(" "),_("h3",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),_("p",[t._v("相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集"),_("strong",[t._v("产生的内存占用（Footprint）还是程序运行时的额外执行负载（Overload）都要比CMS要高")]),t._v("。")]),t._v(" "),_("p",[t._v("从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而"),_("strong",[t._v("G1在大内存应用上则发挥其优势")]),t._v("，"),_("strong",[t._v("平衡点在6-8GB之间")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"参数-5"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参数-5"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("-XX:+UseG1GC")]),t._v("：手动指定使用G1垃圾收集器执行内存回收任务")]),t._v(" "),_("li",[_("code",[t._v("-XX:G1HeapRegionSize")]),t._v("：设置每个"),_("code",[t._v("Region")]),t._v("的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域，默认是堆内存的1/2000。")]),t._v(" "),_("li",[_("code",[t._v("-XX:MaxGCPauseMillis")]),t._v("：设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到），默认值是200ms（人的平均反应速度）")]),t._v(" "),_("li",[_("code",[t._v("-XX:+ParallelGCThread")]),t._v("：设置STW工作线程数的值。最多设置为8（上面说过Parallel回收器的线程计算公式，当CPU_Count > 8时，ParallelGCThreads 也会大于8）")]),t._v(" "),_("li",[_("code",[t._v("-XX:ConcGCThreads")]),t._v("： 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1/4左右。")]),t._v(" "),_("li",[_("code",[t._v("-XX:InitiatingHeapOccupancyPercent")]),t._v(": 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC，默认值是45。")])]),t._v(" "),_("h3",{attrs:{id:"常见操作步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见操作步骤"}},[t._v("#")]),t._v(" 常见操作步骤")]),t._v(" "),_("p",[t._v("G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：")]),t._v(" "),_("ul",[_("li",[t._v("第一步：开启G1垃圾收集器")]),t._v(" "),_("li",[t._v("第二步：设置堆的最大内存")]),t._v(" "),_("li",[t._v("第三步：设置最大的停顿时间")])]),t._v(" "),_("p",[t._v("G1中提供了三种垃圾回收模式："),_("code",[t._v("Young GC")]),t._v("、"),_("code",[t._v("Mixed GC")]),t._v("和"),_("code",[t._v("Full GC")]),t._v("，在不同的条件下被触发（后面会讲到）。")]),t._v(" "),_("h3",{attrs:{id:"适用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("面向服务端应用，针对具有大内存、多处理器的机器")]),t._v("。（在普通大小的堆里表现并不惊喜）")]),t._v(" "),_("li",[t._v("最主要的应用是需要"),_("strong",[t._v("低GC延迟")]),t._v("，并具有大堆的应用程序提供解决方案。如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次GC停顿时间不会过长）。")]),t._v(" "),_("li",[t._v("用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用G1可能比CMS好：\n"),_("ul",[_("li",[t._v("超过50%的Java堆被活动数据占用；")]),t._v(" "),_("li",[t._v("对象分配频率或年代提升频率变化很大；")]),t._v(" "),_("li",[t._v("GC停顿时间过长（长于0.5至1秒）")])])])]),t._v(" "),_("p",[t._v("HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器使用内置的JVM线程执行GC的多线程操作，而"),_("strong",[t._v("G1 GC可以采用应用线程承担后台运行的GC工作")]),t._v("，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。")]),t._v(" "),_("h3",{attrs:{id:"分区region-化整为零"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分区region-化整为零"}},[t._v("#")]),t._v(" 分区Region：化整为零")]),t._v(" "),_("p",[t._v("使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立"),_("code",[t._v("Region")]),t._v("块，每个"),_("code",[t._v("Region")]),t._v("块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过"),_("code",[t._v("-XX:G1HeapRegionSize")]),t._v("设定。"),_("strong",[t._v("所有的"),_("code",[t._v("Region")]),t._v("大小相同，且在JVM生命周期内不会被改变")]),t._v("。虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分"),_("code",[t._v("Region")]),t._v("（不需要连续）的集合。"),_("strong",[t._v("通过"),_("code",[t._v("Region")]),t._v("的动态分配方式实现逻辑上的连续")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_16.png",alt:"gc_collector_16"}})]),t._v(" "),_("p",[t._v("一个"),_("code",[t._v("Region")]),t._v("有可能属于Eden，Survivor或者Old/Tenured内存区域。但是"),_("strong",[t._v("一个Region只可能属于一个角色")]),t._v("。图中的E表示该Region属于Eden内存区域，S表示属于Survivor内存区域，O表示属于Old内存区域。图中空白的表示未使用的内存空间。")]),t._v(" "),_("p",[t._v("G1垃圾收集器还增加了一种新的内存区域，叫做"),_("code",[t._v("Humongous")]),t._v("内存区域，如图中的H块。专门用于存储大对象，"),_("strong",[t._v("G1认为大小超过一个"),_("code",[t._v("Region")]),t._v("容量一半的对象即可判定为大对象")]),t._v("，就放到"),_("code",[t._v("Humongous")]),t._v("内存区域。")]),t._v(" "),_("p",[t._v("设置H的原因：对于堆中的大对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象，那么它就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个"),_("code",[t._v("Humongous")]),t._v("区，它用来专门存放大对象。"),_("strong",[t._v("如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储")]),t._v("。为了能找到连续的H区，有时候不得不启动Full GC，G1的大多数行为都把H区作为老年代的一部分来看待。")]),t._v(" "),_("p",[t._v("分区的有点之一就是："),_("strong",[t._v("每个"),_("code",[t._v("Region")]),t._v("都是通过指针碰撞来分配空间")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_17.png",alt:"gc_collector_17"}})]),t._v(" "),_("h3",{attrs:{id:"g1的回收过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1的回收过程"}},[t._v("#")]),t._v(" G1的回收过程")]),t._v(" "),_("p",[t._v("G1 GC的垃圾回收过程主要包括如下三个环节：")]),t._v(" "),_("ul",[_("li",[t._v("年轻代GC（Young GC）: 并行的独占式收集器")]),t._v(" "),_("li",[t._v("老年代并发标记过程（Concurrent Marking）")]),t._v(" "),_("li",[t._v("混合回收（Mixed GC）：如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_18.png",alt:"gc_collector_18"}})]),t._v(" "),_("p",[t._v("流程用顺时针来看："),_("strong",[t._v("Young GC -> Young GC + Concurrent Mark -> Mixed GC顺序")]),t._v("，进行垃圾回收。")]),t._v(" "),_("p",[t._v("应用程序分配内存时候，"),_("strong",[t._v("当年轻代的Eden区用尽时开始年轻代回收")]),t._v("过程；G1的年轻代收集阶段是一个"),_("strong",[t._v("并行的独占式收集器")]),t._v("。在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后"),_("strong",[t._v("从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及")]),t._v("。")]),t._v(" "),_("p",[t._v("当堆内存使用"),_("strong",[t._v("达到一定值（默认45%）"),_("strong",[t._v("时，开始")]),t._v("老年代并发标记")]),t._v("过程。")]),t._v(" "),_("p",[_("strong",[t._v("标记完成马上开始混合回收过程")]),t._v("。对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。同时，这个老年代"),_("code",[t._v("Region")]),t._v("是和年轻代一起被回收的。")]),t._v(" "),_("p",[t._v("举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。")]),t._v(" "),_("h3",{attrs:{id:"remembered-set"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#remembered-set"}},[t._v("#")]),t._v(" Remembered Set")]),t._v(" "),_("p",[t._v("针对一个对象被不同区域"),_("code",[t._v("Region")]),t._v("引用的问题，GC怎么处理？")]),t._v(" "),_("p",[t._v("我们知道一个"),_("code",[t._v("Region")]),t._v("不可能是孤立的，一个"),_("code",[t._v("Region")]),t._v("中的对象可能被其他任意"),_("code",[t._v("Region")]),t._v("中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？其实在其他的分代收集器，也存在这样的问题（而G1更突出）回收新生代也不得不同时扫描老年代？ 如果这样的话显而会降低"),_("code",[t._v("MinorGC")]),t._v("的效率。")]),t._v(" "),_("p",[t._v("具体解决方法：")]),t._v(" "),_("p",[t._v("无论G1还是其他分代收集器，"),_("strong",[t._v("JVM都是使用"),_("code",[t._v("Remembered Set")]),t._v("来避免全局扫描")]),t._v("。")]),t._v(" "),_("p",[t._v("每个"),_("code",[t._v("Region")]),t._v("都有一个对应的"),_("code",[t._v("Remembered Set")]),t._v("；")]),t._v(" "),_("p",[t._v("每次"),_("code",[t._v("Reference")]),t._v("类型数据写操作时，都会产生一个"),_("code",[t._v("Write Barrier")]),t._v("暂时中断操作；然后检查将要写入的引用指向的对象是否和该"),_("code",[t._v("Reference")]),t._v("类型数据在不同的"),_("code",[t._v("Region")]),t._v("。（其他收集器则是检查老年代对象是否引用了新生代对象）；")]),t._v(" "),_("p",[t._v("如果不同，则通过"),_("code",[t._v("CardTable")]),t._v("把相关引用信息记录到引用指向对象的所在"),_("code",[t._v("Region")]),t._v("对应的"),_("code",[t._v("Remembered Set")]),t._v("中；")]),t._v(" "),_("p",[_("strong",[t._v("当进行垃圾收集时，在GC根节点的枚举范围加入"),_("code",[t._v("Remembered Set")])]),t._v("；就可以保证不进行全局扫描，也不会有遗漏。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_19.png",alt:"gc_collector_19"}})]),t._v(" "),_("h3",{attrs:{id:"g1回收过程一-年轻代gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程一-年轻代gc"}},[t._v("#")]),t._v(" G1回收过程一：年轻代GC")]),t._v(" "),_("p",[t._v("JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。")]),t._v(" "),_("p",[t._v("年轻代垃圾回收"),_("strong",[t._v("只会回收Eden区和Survivor区")]),t._v("。首先G1停止应用程序的执行（"),_("strong",[t._v("STW")]),t._v("），G1创建"),_("strong",[t._v("回收集")]),t._v("（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_20.png",alt:"gc_collector_20"}})]),t._v(" "),_("p",[t._v("然后开始如下回收过程：")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("第一阶段，扫描根")]),t._v("。根是指"),_("code",[t._v("static")]),t._v("变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同"),_("code",[t._v("RSet")]),t._v("记录的外部引用作为扫描存活对象的入口。")]),t._v(" "),_("li",[_("strong",[t._v("第二阶段，更新"),_("code",[t._v("RSet")])]),t._v("。处理"),_("code",[t._v("dirty card queue")]),t._v("（见备注）中的"),_("code",[t._v("card")]),t._v("，更新"),_("code",[t._v("RSet")]),t._v("。此阶段完成后，RSet可以准确的反映老年代对所在的内存分段中对象的引用。")]),t._v(" "),_("li",[_("strong",[t._v("第三阶段，处理"),_("code",[t._v("RSet")])]),t._v("。识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。")]),t._v(" "),_("li",[_("strong",[t._v("第四阶段，复制对象")]),t._v("。此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到Old区中空的内存分段。如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。")]),t._v(" "),_("li",[_("strong",[t._v("第五阶段，处理引用")]),t._v("。处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("dirty card queue")]),t._v(" "),_("p",[t._v("对于程序中的赋值语句的操作，JVM会在之前和之后执行特殊的操作以在dirty card queue中入队一个保存了对象引用信息的card。")]),t._v(" "),_("p",[t._v("在年轻代回收时，G1会对队列中的所有card进行处理，更新RSet，保证RSet实时准确反映引用关系。（不在引用赋值语句直接处理更新RSet时为了性能的需要，因为更新RSet需要线程同步，开销大）")]),t._v(" "),_("p",[t._v("每个Java线程有一个dirty card queue。这个队列有白、绿、黄、红四个颜色，表示应用线程往这个队列放任务的状态。")]),t._v(" "),_("p",[t._v("White，表示没有应用线程往队列里放任务，什么事都不用干。Green，此时Refinement线程开始被激活，开始更新RSet。Yellow，此时全部的Refinement线程都被激活，来更新RSet。Red，这个时候，应用线程也开始参与排空队列的工作。")]),t._v(" "),_("p",[t._v("相关参数："),_("code",[t._v("-XX:G1ConcRefinementXXXZone")]),t._v("=N，其中XXX为相关的颜色，如Green、White。")])]),t._v(" "),_("h3",{attrs:{id:"g1回收过程二-并发标记过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程二-并发标记过程"}},[t._v("#")]),t._v(" G1回收过程二：并发标记过程")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("初始标记阶段")]),t._v("：标记从根节点直接可达的对象。这个阶段是STW的，并且"),_("strong",[t._v("会触发一次年轻代GC")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("根区域扫描（Root Region Scanning）")]),t._v("：G1 GC扫描Survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在YoungGC之前完成。")]),t._v(" "),_("li",[_("strong",[t._v("并发标记（Concurrent Marking）")]),t._v("：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被YoungGC中断。"),_("strong",[t._v("在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收")]),t._v("。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。")]),t._v(" "),_("li",[_("strong",[t._v("再次标记（Remark）")]),t._v("：由于应用程序持续进行，需要修正上一次的标记结果，是STW的。G1中"),_("strong",[t._v("采用了比CMS更快的初始快照算法")]),t._v("：snapshot-at-the-beginning（SATB）。")]),t._v(" "),_("li",[_("strong",[t._v("独占清理（cleanup，STW）")]),t._v("：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫，是STW的。"),_("strong",[t._v("这个阶段并不会实际上去做垃圾的收集")]),t._v("。")]),t._v(" "),_("li",[_("strong",[t._v("并发清理阶段")]),t._v("：识别并清理完全空闲的区域。")])]),t._v(" "),_("h3",{attrs:{id:"g1回收过程三-混合回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收过程三-混合回收"}},[t._v("#")]),t._v(" G1回收过程三：混合回收")]),t._v(" "),_("p",[t._v("当越来越多的对象晋升到老年代Old Region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，除了"),_("strong",[t._v("回收整个Young Region，还会回收一部分的Old Region")]),t._v("。这里需要注意："),_("strong",[t._v("是一部分老年代，而不是全部老年代")]),t._v("。可以选择哪些Old Region进行收集，从而可以"),_("strong",[t._v("对垃圾回收的耗时时间进行控制")]),t._v("。也要注意的是"),_("strong",[t._v("Mixed GC并不是Full GC")]),t._v("。\n"),_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_21.png",alt:"gc_collector_21"}})]),t._v(" "),_("p",[t._v("并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些"),_("strong",[t._v("老年代的内存分段会分8次")]),t._v("（可以通过"),_("code",[t._v("-XX:G1MixedGCCountTarget")]),t._v("设置）被回收")]),t._v(" "),_("p",[_("strong",[t._v("混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段")]),t._v("。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。")]),t._v(" "),_("p",[t._v("由于老年代中的内存分段默认分8次回收，"),_("strong",[t._v("G1会优先回收垃圾多的内存分段")]),t._v("。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，"),_("code",[t._v("-XX:G1MixedGCLiveThresholdPercent")]),t._v("，默认为65%，意思是"),_("strong",[t._v("垃圾占内存分段比例要达到65%才会被回收")]),t._v("。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。")]),t._v(" "),_("p",[t._v("混合回收并不一定要进行8次。有一个阈值"),_("code",[t._v("-XX:G1HeapWastePercent")]),t._v("，默认值为10%，意思是"),_("strong",[t._v("允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于10%，则不再进行混合回收")]),t._v("。因为GC会花费很多的时间但是回收到的内存却很少（意思就是尽可能让混合回收有价值，这个价值判定就是垃圾很多值得回收，否则就不进行回收）。")]),t._v(" "),_("h3",{attrs:{id:"g1回收可选的过程四-full-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收可选的过程四-full-gc"}},[t._v("#")]),t._v(" G1回收可选的过程四：Full GC")]),t._v(" "),_("p",[t._v("G1的初衷就是要避免Full GC的出现。但是如果上述方式不能正常工作，G1仍会停止应用程序的执行（Stop-The-World），使用单线程的内存回收算法进行垃圾回收，这个时候性能就会非常差，应用程序停顿时间会很长。（可以认为是个兜底过程，类似于CMS + Serial Old的配合）")]),t._v(" "),_("p",[t._v("所以我们要尽量避免Full GC的发生，一旦发生我们需要进行调整：")]),t._v(" "),_("ul",[_("li",[t._v("一般来说可能是堆内存太小，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到Full GC，这种情况可以通过增大内存解决。")]),t._v(" "),_("li",[t._v("回收阶段（Evacuation）的时候没有足够的to-space来存放晋升的对象；")]),t._v(" "),_("li",[t._v("并发处理过程完成之前导致的空间耗尽。")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("Evacuation")]),t._v(" "),_("p",[t._v("从Oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分"),_("code",[t._v("Region")]),t._v("，停顿时间是用户可控制的，所以并不迫切去实现，而选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中。另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。")])]),t._v(" "),_("h3",{attrs:{id:"g1回收器优化建议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器优化建议"}},[t._v("#")]),t._v(" G1回收器优化建议")]),t._v(" "),_("p",[t._v("年轻代大小的设置")]),t._v(" "),_("ul",[_("li",[t._v("避免使用"),_("code",[t._v("-Xmn")]),t._v("或"),_("code",[t._v("-XX:NewRatio")]),t._v("等相关选项显式设置年轻代大小")]),t._v(" "),_("li",[t._v("避免固定年轻代的大小，因为会覆盖暂停时间目标")])]),t._v(" "),_("p",[t._v("暂停时间目标不要太过严苛")]),t._v(" "),_("ul",[_("li",[t._v("G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间")]),t._v(" "),_("li",[t._v("评估G1 GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。")])]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("h3",{attrs:{id:"_7种经典垃圾回收器总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7种经典垃圾回收器总结"}},[t._v("#")]),t._v(" 7种经典垃圾回收器总结")]),t._v(" "),_("p",[t._v("截止JDK 1.8，一共有7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("垃圾收集器")]),t._v(" "),_("th",[t._v("分类")]),t._v(" "),_("th",[t._v("作用位置")]),t._v(" "),_("th",[t._v("使用算法")]),t._v(" "),_("th",[t._v("特点")]),t._v(" "),_("th",[t._v("适用场景")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[t._v("Serial")])]),t._v(" "),_("td",[t._v("串行运行")]),t._v(" "),_("td",[t._v("作用于新生代")]),t._v(" "),_("td",[t._v("复制算法")]),t._v(" "),_("td",[t._v("响应速度优先")]),t._v(" "),_("td",[t._v("适用于单CPU环境下的client模式")])]),t._v(" "),_("tr",[_("td",[t._v("ParNew")]),t._v(" "),_("td",[t._v("并行运行")]),t._v(" "),_("td",[t._v("作用于新生代")]),t._v(" "),_("td",[t._v("复制算法")]),t._v(" "),_("td",[t._v("响应速度优先")]),t._v(" "),_("td",[t._v("多CPU环境Server模式下与CMS配合使用")])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("Parallel")])]),t._v(" "),_("td",[t._v("并行运行")]),t._v(" "),_("td",[t._v("作用于新生代")]),t._v(" "),_("td",[t._v("复制算法")]),t._v(" "),_("td",[t._v("吞吐量优先")]),t._v(" "),_("td",[t._v("适用于后台运算而不需要太多交互的场景")])]),t._v(" "),_("tr",[_("td",[t._v("Serial Old")]),t._v(" "),_("td",[t._v("串行运行")]),t._v(" "),_("td",[t._v("作用于老年代")]),t._v(" "),_("td",[t._v("标记-压缩算法")]),t._v(" "),_("td",[t._v("响应速度优先")]),t._v(" "),_("td",[t._v("适用于单CPU环境下的Client模式")])]),t._v(" "),_("tr",[_("td",[t._v("Parallel Old")]),t._v(" "),_("td",[t._v("并行运行")]),t._v(" "),_("td",[t._v("作用于老年代")]),t._v(" "),_("td",[t._v("标记-压缩算法")]),t._v(" "),_("td",[t._v("吞吐量优先")]),t._v(" "),_("td",[t._v("适用于后台运算而不需要太多交互的场景")])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("CMS")])]),t._v(" "),_("td",[t._v("并发运行")]),t._v(" "),_("td",[t._v("作用于老年代")]),t._v(" "),_("td",[t._v("标记-清除算法")]),t._v(" "),_("td",[t._v("响应速度优先")]),t._v(" "),_("td",[t._v("适用于互联网或B／S业务")])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("G1")])]),t._v(" "),_("td",[t._v("并发、并行运行")]),t._v(" "),_("td",[t._v("作用于新生代、老年代")]),t._v(" "),_("td",[t._v("标记-压缩算法、复制算法")]),t._v(" "),_("td",[t._v("响应速度优先")]),t._v(" "),_("td",[t._v("面向服务端应用")])])])]),t._v(" "),_("p",[t._v("GC发展阶段：Serial => Parallel（并行）=> CMS（并发）=> G1 => ZGC")]),t._v(" "),_("h3",{attrs:{id:"垃圾回收器组合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器组合"}},[t._v("#")]),t._v(" 垃圾回收器组合")]),t._v(" "),_("p",[t._v("不同厂商、不同版本的虚拟机实现差距比较大，目前HotSpot虚拟机在 JDK7/8 后所有收集器及组合如下图：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_22.png",alt:"gc_collector_22"}})]),t._v(" "),_("ol",[_("li",[t._v("两个收集器间有连线，表明它们可以搭配使用：Serial+Serial Old、Serial+CMS、ParNew+Serial Old、ParNew+CMS、Parallel Scavenge+Serial Old、Parallel Scavenge+Parallel Old、G1；")]),t._v(" "),_("li",[t._v("其中Serial Old作为CMS出现"),_("code",[t._v("Concurrent Mode Failure")]),t._v("失败的后备预案。")]),t._v(" "),_("li",[t._v("红色虚线：由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial Old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214）。")]),t._v(" "),_("li",[t._v("绿色虚线：JDK14中弃用Parallel Scavenge和Serial Old的GC组合（JEP366）")]),t._v(" "),_("li",[t._v("绿色虚框：JDK14中删除CMS垃圾回收器（JEP363）")])]),t._v(" "),_("h3",{attrs:{id:"怎么选择垃圾回收器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#怎么选择垃圾回收器"}},[t._v("#")]),t._v(" 怎么选择垃圾回收器")]),t._v(" "),_("p",[t._v("Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。")]),t._v(" "),_("p",[t._v("那么怎么选择垃圾收集器？")]),t._v(" "),_("ol",[_("li",[t._v("优先调整堆的大小让JVM自适应完成。")]),t._v(" "),_("li",[t._v("如果内存小于100M，使用串行收集器")]),t._v(" "),_("li",[t._v("如果是单核、单机程序，并且没有停顿时间的要求，选择串行收集器")]),t._v(" "),_("li",[t._v("如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择")]),t._v(" "),_("li",[t._v("如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器\n官方推荐G1，性能高。现在互联网的项目，基本都是使用G1。")])]),t._v(" "),_("p",[t._v("最后需要明确一个观点：")]),t._v(" "),_("ol",[_("li",[t._v("没有最好的收集器，更没有万能的收集。")]),t._v(" "),_("li",[_("strong",[t._v("调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器")]),t._v("。")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("面试")]),t._v(" "),_("p",[t._v("对于GC，面试官t通常会循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。 这里较通用、基础性的部分如下：")]),t._v(" "),_("ul",[_("li",[t._v("垃圾收集的算法有哪些？如何判断一个对象是否可以回收？")]),t._v(" "),_("li",[t._v("垃圾收集器工作的基本流程。")])]),t._v(" "),_("p",[t._v("另外，大家需要多关注垃圾回收器这一章的各种常用的参数。")])]),t._v(" "),_("h2",{attrs:{id:"新发展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新发展"}},[t._v("#")]),t._v(" 新发展")]),t._v(" "),_("p",[t._v("GC仍然处于飞速发展之中，目前的默认选项"),_("strong",[t._v("G1 GC在不断的进行改进")]),t._v("，很多我们原来认为的缺点，例如串行的Full GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK 10以后，Full GC已经是并行运行，在很多场景下，其表现还略优于Parallel GC的并行Full GC实现。")]),t._v(" "),_("p",[t._v("即使是Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，"),_("strong",[t._v("在Serverless等新的应用场景下，Serial GC找到了新的舞台")]),t._v("。")]),t._v(" "),_("p",[t._v("比较不幸的是CMS GC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK 9中已经被标记为废弃，并在JDK 14版本中移除。")]),t._v(" "),_("h3",{attrs:{id:"jdk-11-新特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jdk-11-新特性"}},[t._v("#")]),t._v(" JDK 11 新特性")]),t._v(" "),_("p",[_("a",{attrs:{href:"http://openidk.iava.net/jeps/318",target:"_blank",rel:"noopener noreferrer"}},[t._v("Epsilon"),_("OutboundLink")],1),t._v('：A No-Op GarbageCollector（Epsilon垃圾回收器，"No-Op（无操作）"回收器）')]),t._v(" "),_("p",[_("a",{attrs:{href:"http://openidk.iava.net/jeps/333",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZGC"),_("OutboundLink")],1),t._v("：A Scalable Low-Latency Garbage Collector（Experimental）（ZGC，可伸缩的低延迟垃圾回收器，处于实验性阶段）")]),t._v(" "),_("p",[t._v("现在G1回收器已成为默认回收器好几年了。我们还看到了引入了两个新的收集器：ZGC（JDK11出现）和Shenandoah（Open JDK12）。主打特点：低停顿时间")]),t._v(" "),_("h3",{attrs:{id:"openjdk-12的shenandoash-gc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#openjdk-12的shenandoash-gc"}},[t._v("#")]),t._v(" OpenJDK 12的Shenandoash GC")]),t._v(" "),_("p",[t._v("OpenJDK 12的 Shenandoash GC：低停顿时间的GC（实验性）")]),t._v(" "),_("p",[t._v("Shenandoah，无疑是众多GC中最孤独的一个。它是第一款不由Oracle公司团队领导开发的HotSpot垃圾收集器，不可避免的受到官方的排挤。比如号称OpenJDK和OracleJDK没有区别的Oracle公司仍拒绝在OracleJDK12中支持Shenandoah。")]),t._v(" "),_("p",[t._v("Shenandoah垃圾回收器最初由Red Hat进行的一项垃圾收集器研究项目Pauseless GC的实现，旨在针对JVM上的内存回收实现低停顿的需求，在2014年贡献给OpenJDK。")]),t._v(" "),_("p",[t._v("Red Hat研发Shenandoah团队对外宣称，Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内，不过实际使用性能将取决于实际工作堆的大小和工作负载。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_23.png",alt:"gc_collector_23"}})]),t._v(" "),_("p",[t._v("这是RedHat在2016年发表的论文数据，测试内容是使用Es对200GB的维基百科数据进行索引。从结果看：")]),t._v(" "),_("ul",[_("li",[t._v("停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。")]),t._v(" "),_("li",[t._v("而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。")])]),t._v(" "),_("p",[t._v("总结")]),t._v(" "),_("ul",[_("li",[t._v("Shenandoah GC的弱项：高运行负担下的吞吐量下降。")]),t._v(" "),_("li",[t._v("Shenandoah GC的强项：低延迟时间。")]),t._v(" "),_("li",[t._v("Shenandoah GC的工作过程大致分为九个阶段，这里就不再赘述。在之前"),_("a",{attrs:{href:"https://www.bilibili.com/video/BV1jJ411M7kQ?from=search&seid=12339069673726242866",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 12新特性"),_("OutboundLink")],1),t._v("视频里有过介绍。")])]),t._v(" "),_("h3",{attrs:{id:"令人震惊、革命性的zgc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#令人震惊、革命性的zgc"}},[t._v("#")]),t._v(" 令人震惊、革命性的ZGC")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/12/gctuning/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZGC"),_("OutboundLink")],1),t._v("与Shenandoah目标高度相似，"),_("strong",[t._v("在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟")]),t._v("。")]),t._v(" "),_("p",[t._v("《深入理解Java虚拟机》一书中这样定义ZGC：ZGC收集器是一款基于"),_("code",[t._v("Region")]),t._v("内存布局的，（暂时）不设分代的，使用了"),_("strong",[t._v("读屏障、染色指针和内存多重映射等技术")]),t._v("来实现"),_("strong",[t._v("可并发的标记-压缩算法")]),t._v("的，以"),_("strong",[t._v("低延迟为首要目标")]),t._v("的一款垃圾收集器。")]),t._v(" "),_("p",[t._v("ZGC的工作过程可以分为4个阶段："),_("strong",[t._v("并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射")]),t._v("等。")]),t._v(" "),_("p",[_("strong",[t._v("ZGC几乎在所有地方并发执行的，除了初始标记的是STW的")]),t._v("。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_24.png",alt:"gc_collector_24"}})]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_25.png",alt:"gc_collector_25"}})]),t._v(" "),_("p",[t._v("在ZGC的强项停顿时间测试上，它毫不留情的将Parallel、G1拉开了两个数量级的差距。无论平均停顿、95％停顿、99％停顿、99.9％停顿，还是最大停顿时间，ZGC都能毫不费劲控制在10毫秒以内。")]),t._v(" "),_("p",[t._v("虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。 "),_("strong",[t._v("未来将在服务端、大内存、低延迟应用的首选垃圾收集器")]),t._v("。")]),t._v(" "),_("p",[t._v("JEP 364：ZGC应用在macOS上，JEP 365：ZGC应用在Windows上，直到JDK14之前，ZGC仅Linux才支持。")]),t._v(" "),_("p",[t._v("尽管许多使用ZGC的用户都使用类Linux的环境，但在Windows和macos上，人们也需要ZGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，ZGC特性被移植到了Windows和macos上。现在mac或Windows上也能使用ZGC了，示例如下：")]),t._v(" "),_("div",{staticClass:"language-shell extra-class"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[t._v("-XX:+UnlockExperimentalVMOptions -XX:+UseZGC\n")])])]),_("p",[t._v("推荐书籍：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_26.png",alt:"gc_collector_27"}})]),t._v(" "),_("h3",{attrs:{id:"其他垃圾回收器-aligc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他垃圾回收器-aligc"}},[t._v("#")]),t._v(" 其他垃圾回收器：AliGC")]),t._v(" "),_("p",[t._v("AliGC是阿里巴巴JVM团队基于G1算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/gc_collector_27.png",alt:"gc_collector_27"}})]),t._v(" "),_("p",[t._v("当然，其它厂商也提供了各种别具一格的GC实现，例如比较有名的低延迟GC："),_("a",{attrs:{href:"https://www.infoq.com/articles/azul_gc_in_detail",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zing"),_("OutboundLink")],1),t._v("，有兴趣可以自行研究。")])])}),[],!1,null,null,null);v.default=s.exports}}]);