(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{639:function(r,t,n){r.exports=n.p+"assets/img/spring-framework-runningtime.7fe0ed38.png"},960:function(r,t,n){"use strict";n.r(t);var s=n(58),a=Object(s.a)({},(function(){var r=this,t=r.$createElement,s=r._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[s("h1",{attrs:{id:"spring简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring简介"}},[r._v("#")]),r._v(" Spring简介")]),r._v(" "),s("h2",{attrs:{id:"什么是spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring"}},[r._v("#")]),r._v(" 什么是Spring")]),r._v(" "),s("p",[r._v("Spring是于2003年兴起的一个轻量级的Java开发框架，它是为了解决企业级应用开发的复杂度问题而创建的。（实际上就是耦合度）。Spring的核心是控制反转（IoC）和面向切面程(AOP)。简单来说，Spring是一个分层的JavaSE/EE "),s("strong",[r._v("full-stack")]),r._v("（一站式）轻量级开源框架。")]),r._v(" "),s("p",[s("strong",[r._v("Spring的主要作用就是为代码“解耦”，降低代码间的耦合度。"),s("strong",[r._v("所以Spring又可以称为")]),r._v("胶水框架")]),r._v("。")]),r._v(" "),s("p",[r._v("根据功能的不同，可以将一个系统中的代码分为"),s("strong",[r._v("主业务逻辑")]),r._v("与"),s("strong",[r._v("系统级业务逻辑")]),r._v("（交叉业务逻辑）两类。它们各自具有鲜明的特点：")]),r._v(" "),s("ul",[s("li",[r._v("主业务逻辑：主业务代码间逻辑逻辑紧密，有具体的专业业务应用场景，复用性相对较低。例如：银行业务、物流业务、电商业务、在线教育业务等。")]),r._v(" "),s("li",[r._v("系统级业务逻辑（交叉业务逻辑）：系统级业务相对功能独立，没有具体的专业业务应用场景，主要是为主业务提供系统级服务，如日志、安全、事务、数据库连接等，复用性强。例如：JDBC连接数据库的逻辑（加载驱动、创建连接、开启事务、SQL操作【主业务逻辑】、提交事务、释放连接）。")])]),r._v(" "),s("p",[r._v("Spring根据代码的功能特点，将降低耦合的方式分为了两类："),s("strong",[r._v("IoC")]),r._v("与"),s("strong",[r._v("AOP")]),r._v("。")]),r._v(" "),s("ul",[s("li",[s("p",[r._v('IoC（控制反转）：使得主业务在相互调用过程中，不用再自己维护关系了，即不用再自己创建要使用的对象了。而是由Spring容器统一管理，自动"注入"。')])]),r._v(" "),s("li",[s("p",[r._v("AOP（面向切面）：使得系统级服务得到\n了最大复用，且不用再由程序员手工将系统级服务“混杂“到主业务逻辑中了，而是由Spring容器统一完成“织入”。")])])]),r._v(" "),s("h2",{attrs:{id:"spring体系结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring体系结构"}},[r._v("#")]),r._v(" Spring体系结构")]),r._v(" "),s("p",[r._v("Spring 4.x 的官方文档给出的Spring框架模块介绍：")]),r._v(" "),s("p",[r._v("Spring框架包含组织为约20个模块的功能。这些模块分为核心容器（ Core Container），数据访问/集成（Data Access/Integration），Web，AOP（Aspect Oriented Programming，面向方面​​的编程），检测，消息传递和测试（Test），如下图所示。")]),r._v(" "),s("p",[s("img",{attrs:{src:n(639),alt:"Spring架构"}})]),r._v(" "),s("p",[r._v("注意：暂时未找到官方文档对于Spring 5.x架构的说明，Spring 5.x版本变动较大，更多是使用spring-boot框架，但是可以从"),s("a",{attrs:{href:"https://docs.spring.io/spring/docs/4.3.25.RELEASE/spring-framework-reference/htmlsingle/#spring-introduction",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring 4.x"),s("OutboundLink")],1),r._v("了解Spring大致体系结构。")]),r._v(" "),s("h2",{attrs:{id:"spring的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring的特点"}},[r._v("#")]),r._v(" Spring的特点")]),r._v(" "),s("h3",{attrs:{id:"非侵入式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非侵入式"}},[r._v("#")]),r._v(" 非侵入式")]),r._v(" "),s("p",[r._v("所谓非侵入式是指，Spring框架的API不会出现在业务逻辑上出现。即业务逻辑是POJO.由于业务逻辑中没有Spring的API，所以业务逻辑可以从Spring框架快速的移植到其他框架，即与环境无关。")]),r._v(" "),s("h3",{attrs:{id:"容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[r._v("#")]),r._v(" 容器")]),r._v(" "),s("p",[r._v("Spring作为一个容器，可以管理对象的生命周期、对象与对象之问的依赖关系。可以通过配置文件，来定义对象。以及设置与其他对象的依赖关系。")]),r._v(" "),s("h3",{attrs:{id:"ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[r._v("#")]),r._v(" IoC")]),r._v(" "),s("p",[r._v("控制反转（Inversion of Control），即"),s("strong",[r._v("创建被调用者的实例不是由调用者完成，而是由Spring容器完成，并注入调用者上。")])]),r._v(" "),s("p",[r._v("当应了IoC，一个对象依赖的其他对象会通过"),s("strong",[r._v("被动的方式")]),r._v("传递进来。而不是这个对象自已创建或者查找依赖对象。即，"),s("strong",[r._v("不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。")])]),r._v(" "),s("h3",{attrs:{id:"aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[r._v("#")]),r._v(" AOP")]),r._v(" "),s("p",[r._v("面向切面编程（AOP。Aspect Orient Programming）是一种编程思想，是对面向对象编程OOP的补充，很多框架都实现了对AOP编程思想的实现。Spring也提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如日志和事务管理）进行开发。应用对象只实现他们应该做的：完成业务逻辑。他们并不负责其他的系统级关注点，例如日志或事务支持。")]),r._v(" "),s("p",[r._v("我们可以把日志、安全、事务管理等服务理解成一个“切面”，那么以前这些服务一直是直接写在业务逻辑代码中的，这有两点不好：首先逻辑不纯净；其次这些服务被很多业务逻辑反复使用，可以完全剥离出来做到"),s("strong",[r._v("复用")]),r._v("。那么AOP就是这些问题的解决方案，可以把这些服务剥离出来形成一个“切面”，以期复用，然后将“切面”动态的“织入”到业务逻辑中，让业务逻辑能够享受到此“切面”的服务。")])])}),[],!1,null,null,null);t.default=a.exports}}]);