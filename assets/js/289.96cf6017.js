(window.webpackJsonp=window.webpackJsonp||[]).push([[289],{951:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"python的内置函数-type-和-isinstance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python的内置函数-type-和-isinstance"}},[t._v("#")]),t._v(" Python的内置函数 type() 和 isinstance()")]),t._v(" "),a("h2",{attrs:{id:"type函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type函数"}},[t._v("#")]),t._v(" type函数")]),t._v(" "),a("p",[t._v("type()主要有两个功能：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("查看一个变量（对象）的类型，语法：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("当调用type方法传入一个参数时，会返回这个对象的类型。这个时候type()通常与object.__class__功能相同。")])]),t._v(" "),a("li",[a("p",[t._v("创建一个类，语法：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code")])])])]),t._v(" "),a("p",[t._v("type(name, bases, dict)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\nname：类的名称。\n\nbases：基类的元组。（Python中允许多继承）。\n\ndict：字典，类的属性，是一个dict字典类型。\n\n```python\nif __name__ == "__main__":\n  ClassVar = type("ClassVar", (object,), dict(name="type test"))\n  a = ClassVar()\n  print(type(a))\n  print(a.name)\n    \n"""\n<class \'__main__.ClassVar\'>\ntype test\n""" \n')])])]),a("p",[t._v("通过type() 定义创建的类和通过 class Xxx ... 定义创建的类是一样的。这种可以很方便地"),a("strong",[t._v("在运行期间动态创建类的特性")]),t._v("，体现了Python作为一种解释型动态语言与静态语言（如Java、C++）的最大区别。")]),t._v(" "),a("h2",{attrs:{id:"isinstance函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isinstance函数"}},[t._v("#")]),t._v(" isinstance函数")]),t._v(" "),a("p",[t._v("isinstance()作用是判断一个对象是不是某个类型的实例。与type()有点类似。语法为：")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" classinfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("object：实例对象")]),t._v(" "),a("p",[t._v("classinfo：期望的类型，可以是直接或间接类名、基本类型或者由它们组成的元组。对于基本类型来说classinfo可以是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("int, float, bool, complex, str, list, dict, set, tuple\n")])])]),a("p",[t._v("如果object是classinfo的一个实例或classinfo子类的一个实例，则返回True，否则返回False")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\nTrue\nFalse\nTrue\n"""')]),t._v("\n")])])]),a("h2",{attrs:{id:"type函数和isinstance函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type函数和isinstance函数的区别"}},[t._v("#")]),t._v(" type函数和isinstance函数的区别")]),t._v(" "),a("p",[t._v("type()和isinstance()的区别：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("type() 不会认为子类是一种父类类型，不考虑继承关系。")])]),t._v(" "),a("li",[a("p",[t._v("isinstance() 会认为子类是一种父类类型，考虑继承关系。")])])]),t._v(" "),a("p",[t._v("如果要判断两个类型是否相同推荐使用 isinstance()。此外，如果想要知道子类和父类之间的继承关系，可以使用另一个内置函数issubclass()或者object.__bases__。")])])}),[],!1,null,null,null);s.default=e.exports}}]);