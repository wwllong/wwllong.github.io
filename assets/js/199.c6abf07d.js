(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{847:function(t,a,e){"use strict";e.r(a);var s=e(58),o=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"jvm优化之jit优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jvm优化之jit优化"}},[t._v("#")]),t._v(" JVM优化之JIT优化")]),t._v(" "),e("blockquote",[e("p",[t._v("随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。 ——《深入理解Java虚拟机》")])]),t._v(" "),e("p",[t._v("这里主要是即时编译对代码的优化，例如逃逸分析、栈上分配、同步省略、标量替换都基本不需要开发人员介入。例如，在JDK 6u23版本之后，HotSpot中默认就已经开启了逃逸分析。 了解以下参数，详见"),e("RouterLink",{attrs:{to:"/java-vm/1_7_heap.html#堆是分配对象的唯一选择吗"}},[t._v("是分配对象的唯一选择吗?")])],1),t._v(" "),e("ul",[e("li",[e("code",[t._v("XX:+DoEscapeAnalysis")]),t._v(":显式开启逃逸分析")]),t._v(" "),e("li",[e("code",[t._v("-XX:+PrintEscapeAnalysis")]),t._v(":查看逃逸分析的筛选结果")]),t._v(" "),e("li",[e("code",[t._v("-XX:+EliminateAllocations")]),t._v("：开启标量替换。")])])])}),[],!1,null,null,null);a.default=o.exports}}]);