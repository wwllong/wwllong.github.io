(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{829:function(_,v,t){"use strict";t.r(v);var a=t(58),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"class文件结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class文件结构"}},[_._v("#")]),_._v(" class文件结构")]),_._v(" "),t("p",[_._v("JDK8 官方地址："),t("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("class文件结构描述"),t("OutboundLink")],1)]),_._v(" "),t("p",[_._v("视频："),t("a",{attrs:{href:"https://www.bilibili.com/video/BV1PJ411n7xZ",target:"_blank",rel:"noopener noreferrer"}},[_._v("尚硅谷宋红康JVM全套教程（详解java虚拟机）- 中篇"),t("OutboundLink")],1)]),_._v(" "),t("h2",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[_._v("#")]),_._v(" 概述")]),_._v(" "),t("p",[_._v("本质上任何一个class文件都对应着唯一一个类或接口定义的信息，但反过来说，class文件实际上它并不一定是以磁盘文件的形式存在，因为"),t("strong",[_._v("class文件是一组以8位字节为基础单位的二进制流")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"class文件格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class文件格式"}},[_._v("#")]),_._v(" class文件格式")]),_._v(" "),t("p",[_._v("class文件的结构不像XML等描述语言，由于它"),t("strong",[_._v("没有任何分隔符号")]),_._v("，所以在其中的数据项，无论是字节顺序还是数量，都是被严格限定的，哪个字节代表什么含义、长度是多少、先后顺序如何，都不允许改变。")]),_._v(" "),t("p",[_._v("class文件格式是采用一种类似于C语言结构体的方式进行数据存储的，这种结构中只有两种数据类型："),t("strong",[_._v("无符号数和表")]),_._v("。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("数据类型")]),_._v(" "),t("th",[_._v("说明")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("无符号数")]),_._v(" "),t("td",[t("strong",[_._v("基本的数据类型")]),_._v("。 以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节。用来描述数字、索引引用、数量值或按照utf-8编码构成的字符串值。")])]),_._v(" "),t("tr",[t("td",[_._v("表")]),_._v(" "),t("td",[_._v("由多个无符号数或其他表作为数据项构成的"),t("strong",[_._v("复合数据结构")]),_._v("。所有的表都以“_info”结尾。 由于"),t("strong",[_._v("表没有固定长度")]),_._v("，所以通常会在其前面加上"),t("strong",[_._v("个数说明，即长度")]),_._v("。")])])])]),_._v(" "),t("h2",{attrs:{id:"class文件结构概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class文件结构概览"}},[_._v("#")]),_._v(" class文件结构概览")]),_._v(" "),t("p",[_._v("class 文件的结构并不是一成不变的，随着Java虚拟机的不断发展，总是不可避免地会对class文件结构作出一些调整，但是其基本结构和框架都是稳定的，以下是在JDK8官方的class文件结构基础上，分门别类的文件结构：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th"),_._v(" "),t("th",[_._v("类型")]),_._v(" "),t("th",[_._v("名称")]),_._v(" "),t("th",[_._v("说明")]),_._v(" "),t("th",[_._v("长度")]),_._v(" "),t("th",[_._v("数量")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("魔数")]),_._v(" "),t("td",[_._v("u4")]),_._v(" "),t("td",[_._v("magic")]),_._v(" "),t("td",[_._v("魔数,识别Class文件格式")]),_._v(" "),t("td",[_._v("4个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("版本号")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("minor_version")]),_._v(" "),t("td",[_._v("副版本号(小版本)")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("major_version")]),_._v(" "),t("td",[_._v("主版本号(大版本)")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("常量池集合")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("constant_pool_count")]),_._v(" "),t("td",[_._v("常量池计数器")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("cp_info")]),_._v(" "),t("td",[_._v("constant_pool")]),_._v(" "),t("td",[_._v("常量池表")]),_._v(" "),t("td",[_._v("n个字节")]),_._v(" "),t("td",[t("strong",[_._v("constant_pool_count - 1")])])]),_._v(" "),t("tr",[t("td",[_._v("访问标识")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("access_flags")]),_._v(" "),t("td",[_._v("访问标识")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("索引集合")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("this_class")]),_._v(" "),t("td",[_._v("类索引")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("super_class")]),_._v(" "),t("td",[_._v("父类索引")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("interfaces_count")]),_._v(" "),t("td",[_._v("接口计数器")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("interfaces")]),_._v(" "),t("td",[_._v("接口索引集合")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("interfaces_count")])]),_._v(" "),t("tr",[t("td",[_._v("字段表集合")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("fields_count")]),_._v(" "),t("td",[_._v("字段计数器")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("field_info")]),_._v(" "),t("td",[_._v("fields")]),_._v(" "),t("td",[_._v("字段表")]),_._v(" "),t("td",[_._v("n个字节")]),_._v(" "),t("td",[_._v("fields_count")])]),_._v(" "),t("tr",[t("td",[_._v("方法表集合")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("methods_count")]),_._v(" "),t("td",[_._v("方法计数器")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("method_info")]),_._v(" "),t("td",[_._v("methods")]),_._v(" "),t("td",[_._v("方法表")]),_._v(" "),t("td",[_._v("n个字节")]),_._v(" "),t("td",[_._v("methods_count")])]),_._v(" "),t("tr",[t("td",[_._v("属性表集合")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("attributes_count")]),_._v(" "),t("td",[_._v("属性计数器")]),_._v(" "),t("td",[_._v("2个字节")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("attribute_info")]),_._v(" "),t("td",[_._v("attributes")]),_._v(" "),t("td",[_._v("属性表")]),_._v(" "),t("td",[_._v("n个字节")]),_._v(" "),t("td",[_._v("attributes_count")])])])]),_._v(" "),t("h2",{attrs:{id:"解析示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析示例"}},[_._v("#")]),_._v(" 解析示例")]),_._v(" "),t("p",[_._v("视频中老师用的解析例子：")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("public")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("class")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("Demo")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("private")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("int")]),_._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("public")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("int")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[_._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n        num "),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v("+")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("return")]),_._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])]),t("p",[_._v("可能用到的相关文档：")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://qiniu.wenwl.site/notes/jvm/class-demo/Demo%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E8%A7%A3%E6%9E%90.xlsx",target:"_blank",rel:"noopener noreferrer"}},[_._v("Demo字节码的解析.xlsx"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://qiniu.wenwl.site/notes/jvm/class-demo/%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.xls",target:"_blank",rel:"noopener noreferrer"}},[_._v("字节码指令执行过程.xls"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://qiniu.wenwl.site/notes/jvm/class-demo/%E5%B8%B8%E9%87%8F%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BB%93%E6%9E%84.xls",target:"_blank",rel:"noopener noreferrer"}},[_._v("常量类型和结构.xls"),t("OutboundLink")],1)])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class-demo/class_demo_1.png",alt:"class_demo_1.png"}})]),_._v(" "),t("h2",{attrs:{id:"魔数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#魔数"}},[_._v("#")]),_._v(" 魔数")]),_._v(" "),t("p",[t("strong",[_._v("魔数，Magic Number")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("每个class文件开头的"),t("strong",[_._v("4个字节")]),_._v("的无符号整数称为魔数（Magic Number")])]),_._v(" "),t("li",[t("p",[_._v("它的唯一作用是确定这个文件是否为一个能被虚拟机接受的有效合法的Class文件。即：魔数是Class文件的标识符。\n魔数值固定为"),t("strong",[_._v("0xCAFEBABE")]),_._v("，不会改变。")])]),_._v(" "),t("li",[t("p",[_._v("如果一个class文件不以"),t("code",[_._v("0xCAFEBABE")]),_._v("开头，虚拟机在进行文件校验的时候就会直接抛出以下错误：")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("Error")]),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("A")]),_._v(" JNI error has occurred"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" please check your installation and "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("try")]),_._v(" again\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("Exception")]),_._v(" in thread "),t("span",{pre:!0,attrs:{class:"token string"}},[_._v('"main"')]),_._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[_._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),_._v("lang"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")])]),_._v("ClassFormatError")]),t("span",{pre:!0,attrs:{class:"token operator"}},[_._v(":")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("Incompatible")]),_._v(" magic value "),t("span",{pre:!0,attrs:{class:"token number"}},[_._v("1885430635")]),_._v(" in "),t("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("class")]),_._v(" file "),t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("StringTest")]),_._v("\n")])])])]),_._v(" "),t("li",[t("p",[_._v("使用魔数而不是扩展名来进行识别主要是基于安全方面的考虑，因为文件扩展名可以随意地改动。")])])]),_._v(" "),t("h2",{attrs:{id:"文件版本号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件版本号"}},[_._v("#")]),_._v(" 文件版本号")]),_._v(" "),t("p",[_._v("紧接着魔数的 4 个字节存储的是Class文件的版本号，包括主版本号和副版本号。")]),_._v(" "),t("p",[_._v("其中第5个和第6个字节所代表的含义是编译的副版本号"),t("code",[_._v("minor_version")]),_._v("，而第7个和第8个字节是编译的主版本号"),t("code",[_._v("major_version")]),_._v("(注意，副版本号在前，主版本号在后)。")]),_._v(" "),t("p",[_._v("它们共同构成了class文件的格式版本号。譬如某个class文件的主版本号为M，副版本号为m，那么这个Class文件的格式版本号就确定为M.m。")]),_._v(" "),t("p",[_._v("版本号和Java编译器的对应关系如下表：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("主版本（十进制）")]),_._v(" "),t("th",[_._v("副版本（十进制）")]),_._v(" "),t("th",[_._v("编译器版本")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("45")]),_._v(" "),t("td",[_._v("3")]),_._v(" "),t("td",[_._v("1.1")])]),_._v(" "),t("tr",[t("td",[_._v("46")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.2")])]),_._v(" "),t("tr",[t("td",[_._v("47")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.3")])]),_._v(" "),t("tr",[t("td",[_._v("48")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.4")])]),_._v(" "),t("tr",[t("td",[_._v("49")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.5")])]),_._v(" "),t("tr",[t("td",[_._v("50")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.6")])]),_._v(" "),t("tr",[t("td",[_._v("51")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.7")])]),_._v(" "),t("tr",[t("td",[_._v("52")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.8")])]),_._v(" "),t("tr",[t("td",[_._v("53")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.9")])]),_._v(" "),t("tr",[t("td",[_._v("54")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.10")])]),_._v(" "),t("tr",[t("td",[_._v("55")]),_._v(" "),t("td",[_._v("0")]),_._v(" "),t("td",[_._v("1.11")])])])]),_._v(" "),t("p",[_._v("Java的版本号是从 45 开始的，JDK 1.1之后的每个JDK大版本发布主版本号向上加1。")]),_._v(" "),t("ul",[t("li",[_._v("不同版本的Java编译器编译的class文件对应的版本是不一样的。"),t("strong",[_._v("目前，高版本的Java虚拟机可以执行由低版本编译器生成的Class文件，但是低版本的Java虚拟机不能执行由高版本编译器生成的Class文件（向下兼容）")]),_._v("。否则JVM会抛出"),t("code",[_._v("java.lang.UnsupportedClassVersionError异常")]),_._v("。")]),_._v(" "),t("li",[_._v("在实际应用中，由于开发环境和生产环境的不同，可能会导致该问题的发生。因此，需要我们在开发时，特别注意开发编译的JDK版本和生产环境中的JDK版本是否一致。")]),_._v(" "),t("li",[_._v("虚拟机JDK版本为1.k（k>=2）时，对应的class文件格式版本号的范围为45.0 - 44+k.0（含两端）。")])]),_._v(" "),t("h2",{attrs:{id:"常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量池"}},[_._v("#")]),_._v(" 常量池")]),_._v(" "),t("p",[t("strong",[_._v("常量池是class文件中内容最为丰富的区域之一")]),_._v("。常量池对于Class文件中的字段和方法解析也有着至关重要的作用。随着Java虚拟机的不断发展，常量池的内容也日渐丰富。可以说，"),t("strong",[_._v("常量池是整个class文件的基石")]),_._v("。")]),_._v(" "),t("p",[_._v("在版本号之后，紧跟着的是"),t("strong",[_._v("常量池的数量")]),_._v("，以及"),t("strong",[_._v("若干个常量池表项")]),_._v("。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("类型")]),_._v(" "),t("th",[_._v("名称")]),_._v(" "),t("th",[_._v("数量")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("u2（无符号数）")]),_._v(" "),t("td",[_._v("constant_pool_count")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("cp_info（表）")]),_._v(" "),t("td",[_._v("constant_pool")]),_._v(" "),t("td",[_._v("constant_pool_count - 1")])])])]),_._v(" "),t("p",[_._v("由上表可见，class文件使用了一个前置的"),t("strong",[_._v("常量池计数器")]),_._v("（"),t("code",[_._v("constant_pool_count")]),_._v("）加"),t("strong",[_._v("若干个连续的数据项")]),_._v("（constant_pool）的形式来描述常量池内容，常量池表，我们把这一系列连续常量池数据称为常量池集合。其中常量池表项的结构是这样的：")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[_._v("cp_info "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    u1 tag"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    u1 info"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])]),t("p",[t("strong",[_._v("常量池表项中，用于存放编译时期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放")]),_._v("。")]),_._v(" "),t("h3",{attrs:{id:"常量池计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量池计数器"}},[_._v("#")]),_._v(" 常量池计数器")]),_._v(" "),t("p",[_._v("常量池计数器，constant_pool_count。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("由于常量池的数量不固定，时长时短，所以需要放置两个字节来表示常量池容量计数值。")])]),_._v(" "),t("li",[t("p",[_._v("常量池容量计数值（u2类型）："),t("strong",[_._v("从1开始，表示常量池中有多少项常量")]),_._v("。即"),t("code",[_._v("constant_pool_count")]),_._v("=1表示常量池中有0个常量项。")])]),_._v(" "),t("li",[t("p",[_._v("Demo中的值为："),t("code",[_._v("0x0016")]),_._v("，也就是22。需要注意的是，这"),t("strong",[_._v("实际上只有21项常量")]),_._v("，索引为范围是1-21，为什么呢？")]),_._v(" "),t("p",[_._v("通常我们写代码时都是从0开始的，但是这里的常量池却是从1开始，因为它把第0项常量空出来了。这是为了满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义，这种情况可用索引值0来表示。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class-demo/class_demo_2.png",alt:"class_demo_2.png"}})])])]),_._v(" "),t("h3",{attrs:{id:"常量池表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量池表"}},[_._v("#")]),_._v(" 常量池表")]),_._v(" "),t("p",[t("code",[_._v("constant_pool")]),_._v("是一种表结构，"),t("strong",[_._v("以 1 ~ constant_pool_count - 1 为索引")]),_._v("，表明了后面有多少个常量项。")]),_._v(" "),t("p",[_._v("常量池主要存放两大类常量项："),t("strong",[_._v("字面量（Literal）和符号引用（Symbolic References）")]),_._v("。")]),_._v(" "),t("p",[_._v("它包含了class文件结构及其子结构中"),t("strong",[_._v("引用的所有字符串常量、类或接口名、字段名和其他常量")]),_._v("。常量池中的每一项都具备相同的特征，"),t("strong",[_._v("第1个字节作为类型标记，用于确定该项的格式，这个字节称为"),t("code",[_._v("tag byte")]),_._v("（标记字节、标签字节）")]),_._v("。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("类型")]),_._v(" "),t("th",[_._v("标志(或标识)")]),_._v(" "),t("th",[_._v("描述")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("CONSTANT_Utf8_info")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("UTF-8编码的字符串")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_Integer_info")]),_._v(" "),t("td",[_._v("3")]),_._v(" "),t("td",[_._v("整型字面量")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_Float_info")]),_._v(" "),t("td",[_._v("4")]),_._v(" "),t("td",[_._v("浮点型字面量")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_Long_info")]),_._v(" "),t("td",[_._v("5")]),_._v(" "),t("td",[_._v("长整型字面量")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_Double_info")]),_._v(" "),t("td",[_._v("6")]),_._v(" "),t("td",[_._v("双精度浮点型字面量")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_Class_info")]),_._v(" "),t("td",[_._v("7")]),_._v(" "),t("td",[_._v("类或接口的符号引用")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_String_info")]),_._v(" "),t("td",[_._v("8")]),_._v(" "),t("td",[_._v("字符串类型字面量")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_Fieldref_info")]),_._v(" "),t("td",[_._v("9")]),_._v(" "),t("td",[_._v("字段的符号引用")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_Methodref_info")]),_._v(" "),t("td",[_._v("10")]),_._v(" "),t("td",[_._v("类中方法的符号引用")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_InterfaceMethodref_info")]),_._v(" "),t("td",[_._v("11")]),_._v(" "),t("td",[_._v("接口中方法的符号引用")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_NameAndType_info")]),_._v(" "),t("td",[_._v("12")]),_._v(" "),t("td",[_._v("字段或方法的符号引用")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_MethodHandle_info")]),_._v(" "),t("td",[_._v("15")]),_._v(" "),t("td",[_._v("表示方法句柄")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_MethodType_info")]),_._v(" "),t("td",[_._v("16")]),_._v(" "),t("td",[_._v("标志方法类型")])]),_._v(" "),t("tr",[t("td",[_._v("CONSTANT_InvokeDynamic_info")]),_._v(" "),t("td",[_._v("18")]),_._v(" "),t("td",[_._v("表示一个动态方法调用点")])])])]),_._v(" "),t("h4",{attrs:{id:"字面量和符号引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字面量和符号引用"}},[_._v("#")]),_._v(" 字面量和符号引用")]),_._v(" "),t("p",[_._v("在对这些常量解读前，我们需要搞清楚几个概念。")]),_._v(" "),t("p",[_._v("前面说到常量池主要存放两大类常量：字面量（Literal）和符号引用（Symbolic References），更具体的常量如下表：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("常量")]),_._v(" "),t("th",[_._v("具体的常量")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("字面量")]),_._v(" "),t("td",[_._v("文本字符串")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("声明为"),t("code",[_._v("final")]),_._v("的常量值")])]),_._v(" "),t("tr",[t("td",[_._v("符号引用")]),_._v(" "),t("td",[_._v("类和接口的全限定名")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("字段的名称和描述符")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("方法的名称和描述符")])])])]),_._v(" "),t("p",[t("strong",[_._v("全限定名")]),_._v("："),t("code",[_._v("com/atguigu/test/Demo")]),_._v("这个就是类的全限定名，仅仅是类的全类名的“.“替换成”/”。此外，为了使连续的多个全限定名之间不产生混淆，在使用时最后一般会加入一个 "),t("code",[_._v("“;”")]),_._v(" 表示全限定名结束。")]),_._v(" "),t("p",[t("strong",[_._v("简单名称")]),_._v("：指没有类型和参数修饰的方法或者字段名称，上面例子中的类的"),t("code",[_._v("add()")]),_._v("方法和"),t("code",[_._v("num")]),_._v("字段的简单名称分别是"),t("code",[_._v("add")]),_._v("和"),t("code",[_._v("num")]),_._v("。")]),_._v(" "),t("p",[t("strong",[_._v("描述符")]),_._v("："),t("strong",[_._v("用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值")]),_._v("。根据描述符规则，基本数据类型（byte、char、double、float、int、long、short、boolean）以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示，详见下表：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标志符")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("B")]),_._v(" "),t("td",[_._v("基本数据类型byte")])]),_._v(" "),t("tr",[t("td",[_._v("C")]),_._v(" "),t("td",[_._v("基本数据类型char")])]),_._v(" "),t("tr",[t("td",[_._v("D")]),_._v(" "),t("td",[_._v("基本数据类型double")])]),_._v(" "),t("tr",[t("td",[_._v("F")]),_._v(" "),t("td",[_._v("基本数据类型float")])]),_._v(" "),t("tr",[t("td",[_._v("I")]),_._v(" "),t("td",[_._v("基本数据类型int")])]),_._v(" "),t("tr",[t("td",[_._v("J")]),_._v(" "),t("td",[_._v("基本数据类型long")])]),_._v(" "),t("tr",[t("td",[_._v("S")]),_._v(" "),t("td",[_._v("基本数据类型short")])]),_._v(" "),t("tr",[t("td",[_._v("Z")]),_._v(" "),t("td",[_._v("基本数据类型boolean")])]),_._v(" "),t("tr",[t("td",[_._v("V")]),_._v(" "),t("td",[_._v("代表void类型")])]),_._v(" "),t("tr",[t("td",[_._v("L")]),_._v(" "),t("td",[_._v("对象类型，比如："),t("code",[_._v("Ljava/lang/Object;")])])]),_._v(" "),t("tr",[t("td",[_._v("[")]),_._v(" "),t("td",[_._v("数组类型，代表一维数组。比如：`double[] is [D")])])])]),_._v(" "),t("p",[_._v("用"),t("strong",[_._v("描述符来描述方法时，按照先参数列表，后返回值的顺序描述≈，参数列表按照参数的严格顺序放在一组小括号“()”之内")]),_._v("。如方法"),t("code",[_._v("java.lang.String toString()")]),_._v("的描述符为"),t("code",[_._v("()Ljava/lang/String;")]),_._v(" ，方法"),t("code",[_._v("int abc(int[]x, int y)")]),_._v("的描述符为"),t("code",[_._v("([II)I")]),_._v("。")]),_._v(" "),t("p",[t("strong",[_._v("补充说明, 符号引用和直接引用")]),_._v("：")]),_._v(" "),t("p",[_._v("虚拟机在加载Class文件时才会进行"),t("RouterLink",{attrs:{to:"/java-vm/1_5_vm_statck.html#方法调用的原理"}},[_._v("动态链接")]),_._v("，也就是说，"),t("strong",[_._v("class文件中不会保存各个方法和字段的最终内存布局信息")]),_._v("。因此，这些字段和方法的符号引用不经过转换是无法直接被虚拟机使用的。"),t("strong",[_._v("当虚拟机运行时，需要从常量池中获得对应的符号引用，再在类加载过程中的解析阶段将其替换为直接引用，并翻译到具体的内存地址中")]),_._v("。")],1),_._v(" "),t("p",[_._v("这里说明下符号引用和直接引用的区别与关联：")]),_._v(" "),t("ul",[t("li",[_._v("符号引用：符号引用以"),t("strong",[_._v("一组符号")]),_._v("来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。"),t("strong",[_._v("符号引用与虚拟机实现的内存布局无关")]),_._v("，引用的目标并不一定已经加载到了内存中。")]),_._v(" "),t("li",[_._v("直接引用：直接引用可以是"),t("strong",[_._v("直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的")]),_._v("，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定已经存在于内存之中了。")])]),_._v(" "),t("h4",{attrs:{id:"常量类型和结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量类型和结构"}},[_._v("#")]),_._v(" 常量类型和结构")]),_._v(" "),t("p",[_._v("常量池中每一项常量都是一个表，JDK 1.7之后共有14种不同的表结构数据。如下表格所示：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class-demo/class_demo_3.png",alt:"class_demo_3.png"}})]),_._v(" "),t("p",[_._v("根据上图每个类型的描述我们也可以知道每个类型是用来描述常量池中哪些内容（主要是字面量、符号引用）的。比如:\n"),t("code",[_._v("CONSTANT_Integer_info")]),_._v("是用来描述常量池中字面量信息的，而且只是整型字面量信息。")]),_._v(" "),t("p",[_._v("其中标志为15、16、18的常量项类型是用来支持动态语言调用的（JDK 1.7时才加入的）。")]),_._v(" "),t("p",[t("strong",[_._v("细节说明")]),_._v(":")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("CONSTANT_Class_info")]),_._v("结构用于表示类或接口")]),_._v(" "),t("li",[t("code",[_._v("CONSTAT_Fieldref_info")]),_._v("、"),t("code",[_._v("CONSTAHT_Methodref_info")]),_._v("和"),t("code",[_._v("CONSTANIT_InterfaceMethodref_info")]),_._v("结构表示字段、方法和接口方法")]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_String_info")]),_._v("结构用于表示示"),t("code",[_._v("String")]),_._v("类型的常量对象")]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_Integer_info")]),_._v("和"),t("code",[_._v("CONSTANT_Float_info")]),_._v("表示4字节（int和float）的数值常量")]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_Long_info")]),_._v("和"),t("code",[_._v("CONSTAT_Double_info")]),_._v("结构表示8字作（long和double）的数值常量\n"),t("ul",[t("li",[_._v("在class文件的常最池表中，所有的8字节常量均占两个表成员（项）的空问。如果一个"),t("code",[_._v("CONSTAHT_Long_info")]),_._v("和"),t("code",[_._v("CNSTAHT_Double_info")]),_._v("结构在常量池中的索引位n，则常量池中一个可用的索引位n+2，此时常量池长中索引为n+1的项仍然有效但必须视为不可用的。")])])]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_NameAndType_info")]),_._v("结构用于表示字段或方法，但是和之前的3个结构不同，"),t("code",[_._v("CONSTANT_NameAndType_info")]),_._v("结构没有指明该字段或方法所属的类或接口。")]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_Utf8_info")]),_._v("用于表示字符常量的值")]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_MethodHandle_info")]),_._v("结构用于表示方法句柄")]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_MethodType_info")]),_._v("结构表示方法类型")]),_._v(" "),t("li",[t("code",[_._v("CONSTANT_InvokeDynamic_info")]),_._v("结构表示"),t("code",[_._v("invokedynamic")]),_._v("指令所用到的引导方法(bootstrap method)、引导方法所用到的动态调用名称(dynamic invocation name)、参数和返回类型，并可以给引导方法传入一系列称为静态参数（static argument）的常量。")])]),_._v(" "),t("p",[_._v("解析方法：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("一个字节一个字节的解析")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://qiniu.wenwl.site/notes/jvm/class-demo/dee11497-9912-42d7-8d30-b7b15093cfe9.png",alt:"class_demo_3.png"}})])]),_._v(" "),t("li",[t("p",[_._v("使用javap命令解析：javap-verbose Demo.class或jclasslib工具会更方便。")])])]),_._v(" "),t("h4",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("ul",[t("li",[_._v("这14种表（或者常量项结构）的共同点是：表开始的第一位是一个u1类型的标志位（tag），代表当前这个常量项使用的是哪种表结构，即哪种常量类型。")]),_._v(" "),t("li",[_._v("在常量池列表中，"),t("code",[_._v("CONSTANT_Utf8_info")]),_._v("常量项是一种使用改进过的UTF-8编码格式来存储诸如文字字符串、类或者接口的全限定名、字段或者方法的简单名称以及描述符等常量字符串信息。")]),_._v(" "),t("li",[_._v("这14种常量项结构还有一个特点是，其中13个常量项占用的字节固定，"),t("strong",[_._v("只有"),t("code",[_._v("CONSTANT_Utf8_info")]),_._v("占用字节不固定，其大小由"),t("code",[_._v("length")]),_._v("决定")]),_._v("。为什么呢？"),t("strong",[_._v("因为从常量池存放的内容可知，其存放的是字面量和符号引用，最终这些内容都会是一个字符串，这些字符串的大小是在编写程序时才确定")]),_._v("，比如你定义一个类，类名可以取长取短，所以在没编译前，大小不固定，编译后，通过utf-8编码，就可以知道其长度。")])]),_._v(" "),t("h3",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("常量池：可以理解为class文件之中的资源仓库，它是"),t("strong",[_._v("class文件结构中与其他项目关联最多的数据类型")]),_._v("（后面的很多数据类型都会指向此处），也是占用class文件空间最大的数据项目之一。")])]),_._v(" "),t("li",[t("p",[_._v("常量池中为什么要包含这些内容？")]),_._v(" "),t("p",[_._v("Java代码在进行"),t("code",[_._v("Javac")]),_._v("编译的时候，并不像C和C++那样有“连接”这一步骤，而是在虚拟机加载c1ass文件的时候进行动态链接。也就是说，"),t("strong",[_._v("在class文件中不会保存各个方法、字段的最终内存布局信息，因此这些字段、方法的符号引用不经过运行期转换的话无法得到真正的内存入口地址，也就无法直接被虚拟机使用")]),_._v("。当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。关于类的创建和动态链接的内容，在虚拟机类加载过程时再进行详细讲解。")])])]),_._v(" "),t("h2",{attrs:{id:"访问标识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问标识"}},[_._v("#")]),_._v(" 访问标识")]),_._v(" "),t("p",[_._v("访问标识，access_flag（访问标志、访问标记）")]),_._v(" "),t("p",[_._v("在常量池后，紧跟着访问标记。该标记使用两个字节表示，用于识别一些类或者接口层次的访问信息，包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为"),t("code",[_._v("final")]),_._v("等等。（简单来说，就是记录类是如何声明的及其访问的权限）。各种访问标记如下所示：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标志名称")]),_._v(" "),t("th",[_._v("标志值")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("ACC_PUBLIC")]),_._v(" "),t("td",[_._v("0x0001")]),_._v(" "),t("td",[_._v("标志为public类型")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_FINAL")]),_._v(" "),t("td",[_._v("0x0010")]),_._v(" "),t("td",[_._v("标志被声明为final，只有类可以设置")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_SUPER")]),_._v(" "),t("td",[_._v("0x0020")]),_._v(" "),t("td",[_._v("标志允许使用invokespecial字节码指令的新语义，JDK1.0.2之后编译出来的类的这个标志默认为真。（使用增强的方法调用父类方法）")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_INTERFACE")]),_._v(" "),t("td",[_._v("0x0200")]),_._v(" "),t("td",[_._v("标志这是一个接口")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_ABSTRACT")]),_._v(" "),t("td",[_._v("0x0400")]),_._v(" "),t("td",[_._v("是否为abstract类型，对于接口或者抽象类来说，次标志值为真，其他类型为假")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_SYNTHETIC")]),_._v(" "),t("td",[_._v("0x1000")]),_._v(" "),t("td",[_._v("标志此类并非由用户代码产生（即：由编译器产生的类，没有源码对应）")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_ANNOTATION")]),_._v(" "),t("td",[_._v("0x2000")]),_._v(" "),t("td",[_._v("标志这是一个注解")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_ENUM")]),_._v(" "),t("td",[_._v("0x4000")]),_._v(" "),t("td",[_._v("标志这是一个枚举")])])])]),_._v(" "),t("ul",[t("li",[_._v("类的访问权限通常为"),t("code",[_._v("ACC_")]),_._v("开头的常量。")]),_._v(" "),t("li",[_._v("每一种类型的表示都是通过设置访问标记的32位中的特定位来实现的。比如，若是"),t("code",[_._v("public final")]),_._v("的类，则该标记为"),t("code",[_._v("ACC_PUBLIC | ACC_FINAL")]),_._v("。(记录的值是累加的，即 1 + 10 = 11，类似linux的权限值累加)")]),_._v(" "),t("li",[_._v("使用"),t("code",[_._v("ACC_SUPER")]),_._v("可以让类更准确地定位到父类的方法"),t("code",[_._v("super.method()")]),_._v("，现代编译器都会设置并且使用这个标记。")])]),_._v(" "),t("p",[t("strong",[_._v("补充说明")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v("带有"),t("code",[_._v("ACC_INTERFACE")]),_._v("标志的class文件表示的是接口而不是类，反之则表示的是类而不是接口。\n"),t("ul",[t("li",[_._v("如果一个class文件被设置了"),t("code",[_._v("ACC_INTERFACE")]),_._v("标志，那么同时也得设置"),t("code",[_._v("ACC_ABSTRACT")]),_._v("标志。同时它不能再设置"),t("code",[_._v("ACC_FINAL")]),_._v("、"),t("code",[_._v("ACC_SUPER")]),_._v(" 或"),t("code",[_._v("ACC_ENUM")]),_._v("标志。")]),_._v(" "),t("li",[_._v("如果没有设置"),t("code",[_._v("ACC_INTERFACE")]),_._v("标志，那么这个class文件可以具有上表中除"),t("code",[_._v("ACC_ANNOTATION")]),_._v("外的其他所有标志。当然，"),t("code",[_._v("ACC_FINAL")]),_._v("和"),t("code",[_._v("ACC_ABSTRACT")]),_._v("这类互斥的标志除外，因为这两个标志不得同时设置。")])])]),_._v(" "),t("li",[t("code",[_._v("ACC_SUPER")]),_._v("标志用于确定类或接口里面的"),t("code",[_._v("invokespecial")]),_._v("指令使用的是哪一种执行语义。"),t("strong",[_._v("针对Java虚拟机指令集的编译器都应当设置这个标志")]),_._v("。对于Java SE 8及后续版本来说，无论class文件中这个标志的实际值是什么，也不管class文件的版本号是多少，Java虚拟机都认为每个class文件均设置了ACC_SUPER标志。\n"),t("ul",[t("li",[t("code",[_._v("ACC_SUPER")]),_._v("标志是为了向后兼容由旧Java编译器所编译的代码而设计的。目前的"),t("code",[_._v("ACC_SUPER")]),_._v("标志在由JDK 1.0.2之前的编译器所生成的"),t("code",[_._v("access_flags")]),_._v("中是没有确定含义的，如果设置了该标志，那么0racle的Java虚拟机实现会将其忽略。")])])]),_._v(" "),t("li",[t("code",[_._v("ACC_SYNTHETIC")]),_._v("标志意味着该类或接口是由编译器生成的，而不是由源代码生成的。")]),_._v(" "),t("li",[_._v("注解类型必须设置"),t("code",[_._v("ACC_ANNOTATION")]),_._v("标志。如果设置了"),t("code",[_._v("ACC_ANNOTATION")]),_._v("标志，那么也必须设置"),t("code",[_._v("ACC_INTERFACE")]),_._v("标志。")]),_._v(" "),t("li",[t("code",[_._v("ACC_ENUM")]),_._v("标志表明该类或其父类为枚举类型。")])]),_._v(" "),t("h2",{attrs:{id:"索引集合-类索引、父类索引、接口索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引集合-类索引、父类索引、接口索引"}},[_._v("#")]),_._v(" 索引集合：类索引、父类索引、接口索引")]),_._v(" "),t("p",[_._v("在访问标记后，会指定该类的类别、父类类别以及实现的接口，格式如下：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th"),_._v(" "),t("th",[_._v("长度")]),_._v(" "),t("th",[_._v("名称")]),_._v(" "),t("th",[_._v("说明")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("类索引")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("this_class")]),_._v(" "),t("td",[_._v("类索引")])]),_._v(" "),t("tr",[t("td",[_._v("父类索引")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("super_class")]),_._v(" "),t("td",[_._v("父类索引")])]),_._v(" "),t("tr",[t("td",[_._v("接口索引集合")]),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("interfaces_count")]),_._v(" "),t("td",[_._v("接口索引长度")])]),_._v(" "),t("tr",[t("td"),_._v(" "),t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("interfaces[interfaces_count]")]),_._v(" "),t("td",[_._v("接口索引集合")])])])]),_._v(" "),t("p",[_._v("通过这三项数据来确定这个类的继承关系：")]),_._v(" "),t("ul",[t("li",[_._v("类索引用于确定这个类的全限定名")]),_._v(" "),t("li",[_._v("父类索引用于确定这个类的父类的全限定名。由于Java语言不允许多重继承，所以父类索引只有一个，除了"),t("code",[_._v("java.lang.Object")]),_._v("之外，所有的Java类都有父类，因此除了"),t("code",[_._v("java.lang.Objec")]),_._v("t外，所有Java类的父类索引都不为0。")]),_._v(" "),t("li",[_._v("接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按"),t("code",[_._v("implements")]),_._v("语句（如果这个类本身是一个接口，则应当是"),t("code",[_._v("extends")]),_._v("语句）后的接口顺序从左到右排列在接口索引集合中。")])]),_._v(" "),t("h3",{attrs:{id:"类索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类索引"}},[_._v("#")]),_._v(" 类索引")]),_._v(" "),t("p",[_._v("this_class，类索引：2字节无符号整数，指向常量池的索引。它提供了类的全限定名，如"),t("code",[_._v("com/atguigu/java1/Demo")]),_._v("。this_class的值必须是对常量池表中某项的一个有效索引值。常量池在这个索引处的成员必须为"),t("code",[_._v("CONSTANT_Class_info")]),_._v("类型结构体，该结构体表示这个class文件所定义的类或接口。")]),_._v(" "),t("h3",{attrs:{id:"父类索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#父类索引"}},[_._v("#")]),_._v(" 父类索引")]),_._v(" "),t("p",[_._v("super_class，父类索引：2字节无符号整数，指向常量池的索引。它提供了当前类的父类的全限定名。如果我们没有继承任何类，其默认继承的是"),t("code",[_._v("java/lang/object")]),_._v("类，同时，由于Java不支持多继承，所以其父类只有一个。")]),_._v(" "),t("p",[t("code",[_._v("super_class")]),_._v("指向的父类不能是"),t("code",[_._v("final")]),_._v("。")]),_._v(" "),t("h3",{attrs:{id:"接口索引集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口索引集合"}},[_._v("#")]),_._v(" 接口索引集合")]),_._v(" "),t("p",[_._v("interfaces，接口索引集合：指向常量池索引集合，它提供了一个符号引用到所有已实现的接口。"),t("strong",[_._v("由于一个类可以实现多个接口，因此需要以数组形式保存多个接口的索引")]),_._v("，表示接口的每个索引也是一个指向常量池的"),t("code",[_._v("CONSTANT_Class")]),_._v("（当然这里就必须是接口，而不是类）。")]),_._v(" "),t("ul",[t("li",[_._v("interfaces_count（接口计数器）: 表示当前类或接口的直接超接口数量。")]),_._v(" "),t("li",[_._v("interfaces[]（接口索引集合）: interfaces[]中每个成员的值必须是对常量池表中某项的有效索引值，它的长度为"),t("code",[_._v("interfaces_count")]),_._v("。每个成员"),t("code",[_._v("interfaces[i]")]),_._v("必须为"),t("code",[_._v("CONSTANT_Class_info")]),_._v("结构，其中 0 <= i < interfaces_count。在interfaces[]中，各成员所表示的接口顺序和对应的源代码中给定的接口顺序（从左至右）一样，即interfaces[0]对应的是源代码中最左边的接口。")])]),_._v(" "),t("h2",{attrs:{id:"字段表结合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段表结合"}},[_._v("#")]),_._v(" 字段表结合")]),_._v(" "),t("p",[_._v("在索引节之后就是fields，字段表结合：")]),_._v(" "),t("ul",[t("li",[_._v("用于描述接口或类中声明的变量。字段（field）包括"),t("strong",[_._v("类变量以及实例变量")]),_._v("，但是不包括方法内部、代码块内部声明的局部变量。")]),_._v(" "),t("li",[_._v("字段叫什么名字、字段被定义为什么数据类型，这些都是无法固定的，只能引用常量池中的常量来描述。")]),_._v(" "),t("li",[_._v("它指向常量池索引集合，它描述了每个字段的完整信息（方法签名）。比如**字段的标识符、访问修饰符（public、private或protected）、是类变量还是实例变量（static修饰符）、是否是常量（final修饰符）**等。")])]),_._v(" "),t("p",[_._v("注意事项：")]),_._v(" "),t("ul",[t("li",[_._v("字段表集合中"),t("strong",[_._v("不会列出从父类或者实现的接口中继承而来的字段")]),_._v("，但有可能列出原本Java代码之中不存在的字段。譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。")]),_._v(" "),t("li",[_._v("在Java语言中字段是无法重载的，两个字段的数据类型、修饰符不管是否相同，都必须使用不一样的名称，但是对于字节码来讲，如果两个字段的描述符不一致，那字段重名就是合法的。")])]),_._v(" "),t("h3",{attrs:{id:"字段计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段计数器"}},[_._v("#")]),_._v(" 字段计数器")]),_._v(" "),t("p",[_._v("fields_count，字段计数器：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("fields_count")]),_._v("的值表示当前class文件fields表的成员个数，使用两个字节来表示。")]),_._v(" "),t("li",[t("code",[_._v("fields")]),_._v("表中每个成员都是一个"),t("code",[_._v("field_info")]),_._v("结构，用于表示该类或接口所声明的所有类字段或者实例字段，不包括方法内部声明的变量，也不包括从父类或父接口继承的那些字段。")])]),_._v(" "),t("h3",{attrs:{id:"字段表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段表"}},[_._v("#")]),_._v(" 字段表")]),_._v(" "),t("p",[_._v("fields，字段表：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("fields")]),_._v("表中的每个成员都必须是一个"),t("code",[_._v("field_info")]),_._v("结构的数据项，用于表示当前类或接口中某个字短的完整描述。")]),_._v(" "),t("li",[_._v("一个字段表的信息包括如下这些信息，这些信息（修饰符）都是布尔值，要么有，要么没有：\n"),t("ul",[t("li",[_._v("作用域（public、private、protected修饰符）")]),_._v(" "),t("li",[_._v("是实例变量还是类变量（static修饰符）")]),_._v(" "),t("li",[_._v("可变形（final）")]),_._v(" "),t("li",[_._v("并发可见性（volatile修饰符，是否强制从主内存读写）")]),_._v(" "),t("li",[_._v("可否序列化（transient修饰符）")]),_._v(" "),t("li",[_._v("字段数据类型（基本数据类型、对象、数组）")]),_._v(" "),t("li",[_._v("字段名称")])])])]),_._v(" "),t("p",[_._v("字段表作为一个表，也有他自己的结构：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标志名称")]),_._v(" "),t("th",[_._v("标志值")]),_._v(" "),t("th",[_._v("含义")]),_._v(" "),t("th",[_._v("数量")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("access_flags")]),_._v(" "),t("td",[_._v("访问标志")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("name_index")]),_._v(" "),t("td",[_._v("字段名索引")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("descriptor_index")]),_._v(" "),t("td",[_._v("描述符索引")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("attributes_count")]),_._v(" "),t("td",[_._v("属性计数器")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("attribute_info")]),_._v(" "),t("td",[_._v("attributes")]),_._v(" "),t("td",[_._v("属性集合")]),_._v(" "),t("td",[_._v("attributes_count")])])])]),_._v(" "),t("h4",{attrs:{id:"访问标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问标志"}},[_._v("#")]),_._v(" 访问标志")]),_._v(" "),t("p",[_._v("我们知道，一个字段可以被各种关键字去修饰，比如：作用域修饰符（public、private、protected）、static修饰符、final修饰符、volatile修饰符等等。因此，其可像类的访问标志那样，使用一些标志来标记字段，字段的访问标志有如下这些：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标志名称")]),_._v(" "),t("th",[_._v("标志值")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("ACC_PUBLIC")]),_._v(" "),t("td",[_._v("0x0001")]),_._v(" "),t("td",[_._v("字段是否为public")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_PRIVATE")]),_._v(" "),t("td",[_._v("0x0002")]),_._v(" "),t("td",[_._v("字段是否为private")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_PROTECTED")]),_._v(" "),t("td",[_._v("0x0004")]),_._v(" "),t("td",[_._v("字段是否为protected")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_STATIC")]),_._v(" "),t("td",[_._v("0x0008")]),_._v(" "),t("td",[_._v("字段是否为static")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_FINAL")]),_._v(" "),t("td",[_._v("0x0010")]),_._v(" "),t("td",[_._v("字段是否为final")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_VOLATILE")]),_._v(" "),t("td",[_._v("0x0040")]),_._v(" "),t("td",[_._v("字段是否为volatile")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_TRANSTENT")]),_._v(" "),t("td",[_._v("0x0080")]),_._v(" "),t("td",[_._v("字段是否为transient")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_SYNCHETIC")]),_._v(" "),t("td",[_._v("0x1000")]),_._v(" "),t("td",[_._v("字段是否为由编译器自动产生")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_ENUM")]),_._v(" "),t("td",[_._v("0x4000")]),_._v(" "),t("td",[_._v("字段是否为enum")])])])]),_._v(" "),t("h4",{attrs:{id:"字段名索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字段名索引"}},[_._v("#")]),_._v(" 字段名索引")]),_._v(" "),t("p",[_._v("根据字段名索引的值，指向常量池中的索引。")]),_._v(" "),t("h4",{attrs:{id:"描述符索引"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#描述符索引"}},[_._v("#")]),_._v(" 描述符索引")]),_._v(" "),t("p",[_._v("描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。根据"),t("strong",[_._v("描述符规则，基本数据类型（byte，char，double，float，int，long，short，boolean）及代表无返回值的void类型都用一个大写字符来表示，而对象则用字符L加对象的全限定名来表示")]),_._v("，如下所示：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标志符")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("B")]),_._v(" "),t("td",[_._v("基本数据类型byte")])]),_._v(" "),t("tr",[t("td",[_._v("C")]),_._v(" "),t("td",[_._v("基本数据类型char")])]),_._v(" "),t("tr",[t("td",[_._v("D")]),_._v(" "),t("td",[_._v("基本数据类型double")])]),_._v(" "),t("tr",[t("td",[_._v("F")]),_._v(" "),t("td",[_._v("基本数据类型float")])]),_._v(" "),t("tr",[t("td",[_._v("I")]),_._v(" "),t("td",[_._v("基本数据类型int")])]),_._v(" "),t("tr",[t("td",[_._v("J")]),_._v(" "),t("td",[_._v("基本数据类型long")])]),_._v(" "),t("tr",[t("td",[_._v("S")]),_._v(" "),t("td",[_._v("基本数据类型short")])]),_._v(" "),t("tr",[t("td",[_._v("Z")]),_._v(" "),t("td",[_._v("基本数据类型boolean")])]),_._v(" "),t("tr",[t("td",[_._v("V")]),_._v(" "),t("td",[_._v("代表void类型")])]),_._v(" "),t("tr",[t("td",[_._v("L")]),_._v(" "),t("td",[_._v("对象类型，比如："),t("code",[_._v("Ljava/lang/Object;")])])]),_._v(" "),t("tr",[t("td",[_._v("[")]),_._v(" "),t("td",[_._v("数组类型，代表一维数组。比如：`double[][][] is [[[D")])])])]),_._v(" "),t("h4",{attrs:{id:"属性集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性集合"}},[_._v("#")]),_._v(" 属性集合")]),_._v(" "),t("p",[_._v("一个字段还可能拥有一些属性，用于存储更多的额外信息，比如初始化值、一些注释信息等。属性个数存放在"),t("code",[_._v("attribute_count")]),_._v("中，属性具体内容存放在"),t("code",[_._v("attributes")]),_._v("数组中。")]),_._v(" "),t("p",[_._v("以常量属性为例，结构为：")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ConstantValue_attribute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n\tu2 attribute_name_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n\tu4 attribute_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("// 对于常量属性而言，attribute_length值恒为2。")]),_._v("\n  u2 constantvalue_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])]),t("p",[_._v("更加详细的内容看，后面的属性表集合。")]),_._v(" "),t("h2",{attrs:{id:"方法表集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法表集合"}},[_._v("#")]),_._v(" 方法表集合")]),_._v(" "),t("p",[_._v("methods：指向常量池索引集合，它完整描述了每个方法的签名。")]),_._v(" "),t("ul",[t("li",[_._v("在字节码文件中，"),t("strong",[_._v("每一个"),t("code",[_._v("method_info")]),_._v("项都对应着一个类或者接口中的方法信息")]),_._v("。比如方法的访问修饰符（public、private或protected），方法的返回值类型以及方法的参数信息等。")]),_._v(" "),t("li",[_._v("如果这个方法不是抽象的或者不是"),t("code",[_._v("native")]),_._v("的，那么字节码中会体现出来。")]),_._v(" "),t("li",[_._v("一方面，"),t("code",[_._v("methods")]),_._v("表只描述当前类或接口中声明的方法，不包括从父类或父接口继承的方法。")]),_._v(" "),t("li",[_._v("另一方面，methods表有可能会出现由编译器自动添加的方法，最典型的便是编译器产生的方法信息，比如：类（接口）初始化方法<clinit>()和实例初始化方法<init>()）。")])]),_._v(" "),t("p",[t("strong",[_._v("使用注意事项")]),_._v("：")]),_._v(" "),t("p",[_._v("在Java语言中，要重载（Overload）一个方法，除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名，特征签名就是一个方法中各个参数在常量池中的字段符号引用的集合，也就是因为返回值不会包含在特征签名之中，因此Java语言里无法仅仅依靠返回值的不同来对一个已有方法进行重载。但在class文件格式中，特征签名的范围更大一些，只要描述符不是完全一致的两个方法就可以共存。也就是说，如果两个方法有相同的名称和特征签名，但返回值不同，那么也是可以合法共存于同一个class文件中。")]),_._v(" "),t("p",[_._v("也就是说，尽管Java语法规范并不允许在一个类或者接口中声明多个方法签名相同的方法，但是和Java语法规范相反，字节码文件中却恰恰允许存放多个方法签名相同的方法，唯一的条件就是这些方法之间的返回值不能相同。")]),_._v(" "),t("h3",{attrs:{id:"方法计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法计数器"}},[_._v("#")]),_._v(" 方法计数器")]),_._v(" "),t("p",[_._v("methods_count，方法计数器：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("methods_count")]),_._v("的值表示当前class文件methods表的成员个数，使用两个字节来表示。")]),_._v(" "),t("li",[t("code",[_._v("methods")]),_._v("表中每个成员都是一个"),t("code",[_._v("method_info")]),_._v("结构。")])]),_._v(" "),t("h3",{attrs:{id:"方法表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法表"}},[_._v("#")]),_._v(" 方法表")]),_._v(" "),t("p",[_._v("methods[]，方法表：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("methods")]),_._v("表中的每个成员都必须是一个"),t("code",[_._v("method_info")]),_._v("结构，用于表示当前类或接口中某个方法的完整描述。如果某个"),t("code",[_._v("method_info")]),_._v("结构的"),t("code",[_._v("access_flags")]),_._v("项既没有设置"),t("code",[_._v("ACC_NATIVE")]),_._v("标志也没有设置"),t("code",[_._v("ACC_ABSTRACT")]),_._v("标志，那么该结构中也应包含实现这个方法所用的Java虚拟机指令。")]),_._v(" "),t("li",[t("code",[_._v("method_info")]),_._v("结构可以表示类和接口中定义的所有方法，包括实例方法、类方法、实例初始化方法和类或接口初始化方法。")])]),_._v(" "),t("p",[_._v("方法表的结构实际跟字段表是一样的，方法表结构如下：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标志名称")]),_._v(" "),t("th",[_._v("标志值")]),_._v(" "),t("th",[_._v("含义")]),_._v(" "),t("th",[_._v("数量")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("access_flags")]),_._v(" "),t("td",[_._v("访问标志")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("name_index")]),_._v(" "),t("td",[_._v("方法名索引")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("descriptor_index")]),_._v(" "),t("td",[_._v("描述符索引")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("attributes_count")]),_._v(" "),t("td",[_._v("属性计数器")]),_._v(" "),t("td",[_._v("1")])]),_._v(" "),t("tr",[t("td",[_._v("attribute_info")]),_._v(" "),t("td",[_._v("attributes")]),_._v(" "),t("td",[_._v("属性集合")]),_._v(" "),t("td",[_._v("attributes_count")])])])]),_._v(" "),t("h4",{attrs:{id:"方法表访问标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法表访问标志"}},[_._v("#")]),_._v(" 方法表访问标志")]),_._v(" "),t("p",[_._v("跟字段表一样，方法表也有访问标志，而且他们的标志有部分相同，部分则不同，方法表的具体访问标志如下：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("标志名称")]),_._v(" "),t("th",[_._v("标志值")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("ACC_PUBLIC")]),_._v(" "),t("td",[_._v("0x0001")]),_._v(" "),t("td",[_._v("public，方法可以从包外访问")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_PRIVATE")]),_._v(" "),t("td",[_._v("0x0002")]),_._v(" "),t("td",[_._v("private，方法只能本类访问")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_PROTECTED")]),_._v(" "),t("td",[_._v("0x0004")]),_._v(" "),t("td",[_._v("protected，方法在自身和子类可以访问")])]),_._v(" "),t("tr",[t("td",[_._v("ACC_STATIC")]),_._v(" "),t("td",[_._v("0x0008")]),_._v(" "),t("td",[_._v("static，静态方法")])])])]),_._v(" "),t("h2",{attrs:{id:"属性表集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性表集合"}},[_._v("#")]),_._v(" 属性表集合")]),_._v(" "),t("p",[_._v("方法表集合之后的属性表集合，"),t("strong",[_._v("指的是class文件所携带的辅助信息")]),_._v("**，比如该class文件的源文件的名称以及任何带有"),t("code",[_._v("RetentionPolicy.CLASS")]),_._v("或者"),t("code",[_._v("RetentionPolicy.RUNTIME")]),_._v("的注解。这类信息通常被用于Java虚拟机的验证和运行，以及Java程序的调试，一般无须深入了解。")]),_._v(" "),t("p",[_._v("此外，"),t("strong",[_._v("字段表、方法表都可以有自己的属性表，用于描述某些场景专有的信息")]),_._v("。")]),_._v(" "),t("p",[_._v("属性表集合的限制没有那么严格，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息，但Java虚拟机运行时会忽略掉它不认识的属性。")]),_._v(" "),t("h3",{attrs:{id:"属性计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性计数器"}},[_._v("#")]),_._v(" 属性计数器")]),_._v(" "),t("p",[_._v("attributes_count，属性计数器：")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("attributes_count")]),_._v("的值表示当前class文件属性表的成员个数。")]),_._v(" "),t("li",[_._v("属性表中每一项都是一个"),t("code",[_._v("attribute_info")]),_._v("结构。")])]),_._v(" "),t("h3",{attrs:{id:"属性表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性表"}},[_._v("#")]),_._v(" 属性表")]),_._v(" "),t("p",[_._v("attributes[]，属性表：")]),_._v(" "),t("ul",[t("li",[_._v("属性表的每个项的值必须是"),t("code",[_._v("attribute_info")]),_._v("结构。")]),_._v(" "),t("li",[_._v("属性表的结构比较灵活，各种不同的属性只要满足以下结构即可。")])]),_._v(" "),t("h4",{attrs:{id:"属性的通用格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性的通用格式"}},[_._v("#")]),_._v(" 属性的通用格式")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("类型")]),_._v(" "),t("th",[_._v("名称")]),_._v(" "),t("th",[_._v("数量")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("attribute_name_index")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("属性名索引")])]),_._v(" "),t("tr",[t("td",[_._v("u4")]),_._v(" "),t("td",[_._v("attribute_length")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("属性长度")])]),_._v(" "),t("tr",[t("td",[_._v("u1")]),_._v(" "),t("td",[_._v("info")]),_._v(" "),t("td",[_._v("attribute_length")]),_._v(" "),t("td",[_._v("属性表")])])])]),_._v(" "),t("p",[_._v("即，只需说明属性的名称以及占用位数的长度即可，属性表具体的结构可以去定义。")]),_._v(" "),t("h4",{attrs:{id:"属性类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性类型"}},[_._v("#")]),_._v(" 属性类型")]),_._v(" "),t("p",[_._v("属性表实际上可以有很多类型，上面看到的Code属性只是其中一种，Java 8里面定义了23种属性，下面这些是虚拟机中预定义的属性或者查看官网：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("属性名称")]),_._v(" "),t("th",[_._v("使用位置")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("Code")]),_._v(" "),t("td",[_._v("方法表")]),_._v(" "),t("td",[_._v("Java代码编译成的字节码指令")])]),_._v(" "),t("tr",[t("td",[_._v("ConstantValue")]),_._v(" "),t("td",[_._v("字段表")]),_._v(" "),t("td",[_._v("final关键字定义的常量池")])]),_._v(" "),t("tr",[t("td",[_._v("Deprecated")]),_._v(" "),t("td",[_._v("类，方法，字段表")]),_._v(" "),t("td",[_._v("被声明为deprecated的方法和字段")])]),_._v(" "),t("tr",[t("td",[_._v("Exceptions")]),_._v(" "),t("td",[_._v("方法表")]),_._v(" "),t("td",[_._v("方法抛出的异常")])]),_._v(" "),t("tr",[t("td",[_._v("EnclosingMethod")]),_._v(" "),t("td",[_._v("类文件")]),_._v(" "),t("td",[_._v("仅当一个类为局部类或者匿名类时才能拥有这个属性，这个属性用于标识这个类所在的外围方法")])]),_._v(" "),t("tr",[t("td",[_._v("InnerClass")]),_._v(" "),t("td",[_._v("类文件")]),_._v(" "),t("td",[_._v("内部类列表")])]),_._v(" "),t("tr",[t("td",[_._v("LineNumberTable")]),_._v(" "),t("td",[_._v("Code属性")]),_._v(" "),t("td",[_._v("Java源码的行号与字节码指令的对应关系")])]),_._v(" "),t("tr",[t("td",[_._v("LocalVariableTable")]),_._v(" "),t("td",[_._v("Code属性")]),_._v(" "),t("td",[_._v("方法的局部变量描述")])]),_._v(" "),t("tr",[t("td",[_._v("StackMapTable")]),_._v(" "),t("td",[_._v("Code属性")]),_._v(" "),t("td",[_._v("JDK1.6中新增的属性，供新的类型检查检验器和处理目标方法的局部变量和操作数有所需要的类是否匹配")])]),_._v(" "),t("tr",[t("td",[_._v("Signature")]),_._v(" "),t("td",[_._v("类，方法表，字段表")]),_._v(" "),t("td",[_._v("用于支持泛型情况下的方法签名")])]),_._v(" "),t("tr",[t("td",[_._v("SourceFile")]),_._v(" "),t("td",[_._v("类文件")]),_._v(" "),t("td",[_._v("记录源文件名称")])]),_._v(" "),t("tr",[t("td",[_._v("SourceDebugExtension")]),_._v(" "),t("td",[_._v("类文件")]),_._v(" "),t("td",[_._v("用于存储额外的调试信息")])]),_._v(" "),t("tr",[t("td",[_._v("Synthetic")]),_._v(" "),t("td",[_._v("类，方法表，字段表")]),_._v(" "),t("td",[_._v("标志方法或字段为编译器自动生成的")])]),_._v(" "),t("tr",[t("td",[_._v("LocalVariableTypeTable")]),_._v(" "),t("td",[_._v("类")]),_._v(" "),t("td",[_._v("是哟很难过特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加")])]),_._v(" "),t("tr",[t("td",[_._v("RuntimeVisibleAnnotations")]),_._v(" "),t("td",[_._v("类，方法表，字段表")]),_._v(" "),t("td",[_._v("为动态注解提供支持")])]),_._v(" "),t("tr",[t("td",[_._v("RuntimeInvisibleAnnotations")]),_._v(" "),t("td",[_._v("类，方法表，字段表")]),_._v(" "),t("td",[_._v("用于指明哪些注解是运行时不可见的")])]),_._v(" "),t("tr",[t("td",[_._v("RuntimeVisibleParameterAnnotation")]),_._v(" "),t("td",[_._v("方法表")]),_._v(" "),t("td",[_._v("作用与RuntimeVisibleAnnotations属性类似，只不过作用对象或方法")])]),_._v(" "),t("tr",[t("td",[_._v("RuntimeInvisibleParameterAnnotation")]),_._v(" "),t("td",[_._v("方法表")]),_._v(" "),t("td",[_._v("作用与RuntimeInvisibleAnnotations属性类似，只不过作用对象或方法")])]),_._v(" "),t("tr",[t("td",[_._v("AnnotationDefault")]),_._v(" "),t("td",[_._v("方法表")]),_._v(" "),t("td",[_._v("用于记录注解类元素的默认值")])]),_._v(" "),t("tr",[t("td",[_._v("BootstrapMethods")]),_._v(" "),t("td",[_._v("类文件")]),_._v(" "),t("td",[_._v("用于保存invokeddynamic指令引用的引导方法限定符")])])])]),_._v(" "),t("h4",{attrs:{id:"部分属性详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部分属性详解"}},[_._v("#")]),_._v(" 部分属性详解")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("ConstantValue属性："),t("code",[_._v("ConstantValue")]),_._v("属性表示一个常量字段的值，位于"),t("code",[_._v("field_info")]),_._v("结构的属性表中。")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("ConstantValue_attribute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n\tu2 attribute_name_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n\tu4 attribute_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n\tu2 constantvalue_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[_._v("// 字段值在常量池中的索引，常量池在该索引处的项给出该属性表示的常量值。（例如，值是1ong型的，在常量池中便是CONSTANT_Long）")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])])]),_._v(" "),t("li",[t("p",[_._v("Deprecated 属性：Deprecated 属性是在JDK 1.1为了支持注释中的关键词"),t("code",[_._v("@deprecated")]),_._v("而引入的。")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("Deprecated_attribute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n\tu2 attribute_name_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n\tu4 attribute_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])])]),_._v(" "),t("li",[t("p",[_._v("Code属性：Code属性就是存放方法体里面的代码。但是，并非所有方法表都有Code属性，像接口或者抽象方法，他们没有具体的方法体，因此也就不会有Code属性了。Code属性表的结构，如下图：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("类型")]),_._v(" "),t("th",[_._v("名称")]),_._v(" "),t("th",[_._v("数量")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("attribute_name_index")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("属性名索引")])]),_._v(" "),t("tr",[t("td",[_._v("u4")]),_._v(" "),t("td",[_._v("attribute_length")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("属性长度")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("max_stack")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("操作数栈深度的最大值")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("max_locals")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("局部变量表所需的存续空间")])]),_._v(" "),t("tr",[t("td",[_._v("u4")]),_._v(" "),t("td",[_._v("code_length")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("字节码指令的长度")])]),_._v(" "),t("tr",[t("td",[_._v("u1")]),_._v(" "),t("td",[_._v("code")]),_._v(" "),t("td",[_._v("code_lenth")]),_._v(" "),t("td",[_._v("存储字节码指令")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("exception_table_length")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("异常表长度")])]),_._v(" "),t("tr",[t("td",[_._v("exception_info")]),_._v(" "),t("td",[_._v("exception_table")]),_._v(" "),t("td",[_._v("exception_length")]),_._v(" "),t("td",[_._v("异常表")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("attributes_count")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("属性集合计数器")])]),_._v(" "),t("tr",[t("td",[_._v("attribute_info")]),_._v(" "),t("td",[_._v("attributes")]),_._v(" "),t("td",[_._v("attributes_count")]),_._v(" "),t("td",[_._v("属性集合")])])])]),_._v(" "),t("p",[_._v("可以看到：Code属性表的前两项跟属性表是一致的，即Code属性表遵循属性表的结构，后面那些则是他自定义的结构。")])]),_._v(" "),t("li",[t("p",[_._v("InnerClasses 属性：为了方便说明特别定义一个表示类或接口的Class格式为C。如果C的常量池中包含某个"),t("code",[_._v("CONSTANT_Class_info")]),_._v("成员，且这个成员所表示的类或接口不属于任何一个包，那么C的ClassFile结构的属性表中就必须含有对应的"),t("code",[_._v("InnerClasses")]),_._v("属性。"),t("code",[_._v("InnerClasses")]),_._v("属性是在JDK 1.1中为了支持内部类和内部接口而引入的，位于ClassFile结构的属性表。")])]),_._v(" "),t("li",[t("p",[_._v("LineNumberTable属性：可选变长属性，位于Code结构的属性表。用来"),t("strong",[_._v("描述Java源码行号与字节码行号之间的对应关系")]),_._v("。这个属性可以用来在调试的时候定位代码执行的行数。")]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("start_pc")]),_._v("：即字节码行号；")])]),_._v(" "),t("li",[t("p",[t("code",[_._v("line_number")]),_._v("：即Java源代码行号。")])])]),_._v(" "),t("p",[_._v("在Code属性的属性表中，"),t("code",[_._v("LineNumberTable")]),_._v("属性可以按照任意顺序出现，此外，多个"),t("code",[_._v("LineNumberTable")]),_._v("属性可以共同表示一个行号在源文件中表示的内容，即"),t("code",[_._v("LineNumberTable")]),_._v("属性不需要与源文件的行一一对应。 "),t("code",[_._v("LineNumberTable")]),_._v("属性表结构：")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("LineNumberTable_attribute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    u2 attribute_name_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    u4 attribute_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    u2 line_number_table_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n        u2 start_pc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n        u2 line_number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v(" line_number_table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),_._v("line_number_table_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])])]),_._v(" "),t("li",[t("p",[_._v("LocalVariableTable属性：可选变长属性，位于Code属性的属性表中。它被调试器"),t("strong",[_._v("用于确定方法在执行过程中局部变量的信息")]),_._v("。在Code属性的属性表中，"),t("code",[_._v("LocalVariableTable")]),_._v("属性可以按照任意顺序出现。Code属性中的每个局部变量最多只能有一个"),t("code",[_._v("LocalVariableTable")]),_._v("属性。")]),_._v(" "),t("ul",[t("li",[_._v("start pc + length 表示这个变量在字节码中的生命周期起始和结束的偏移位置（this生命周期从头e到结尾10）")]),_._v(" "),t("li",[_._v("index就是这个变量在局部变量表中的槽位（槽位可复用）")]),_._v(" "),t("li",[_._v("name就是变量名")]),_._v(" "),t("li",[_._v("Descriptor表示局部变量类型描述")])]),_._v(" "),t("p",[t("code",[_._v("LocalVariableTable")]),_._v("属性表结构：")]),_._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[_._v("LocalVariableTable_attribute")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    u2 attribute_name_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    u4 attribute_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    u2 local_variable_table_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n        u2 start_pc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n        u2 length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n        u2 name_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n        u2 descriptor_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n        u2 index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v(" local_variable_table"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),_._v("local_variable_table_length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")])])])]),_._v(" "),t("li",[t("p",[_._v("Signature属性：可选的定长属性，位于ClassFile，field_info或method_info结构的属性表中。在Java语言中，任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量（Type Variables）或参数化类型（Parameterized Types），则"),t("code",[_._v("Signature")]),_._v("属性会为它记录泛型签名信息。")])]),_._v(" "),t("li",[t("p",[_._v("SourceFile属性：其长度总是固定的8个字节。SourceFile属性表结构：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("类型")]),_._v(" "),t("th",[_._v("名称")]),_._v(" "),t("th",[_._v("数量")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("attribute_name_index")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("属性名索引")])]),_._v(" "),t("tr",[t("td",[_._v("u4")]),_._v(" "),t("td",[_._v("attribute_length")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("属性长度")])]),_._v(" "),t("tr",[t("td",[_._v("u2")]),_._v(" "),t("td",[_._v("sourcefile index")]),_._v(" "),t("td",[_._v("1")]),_._v(" "),t("td",[_._v("源码文件素引")])])])])]),_._v(" "),t("li",[t("p",[_._v("其他属性：Java虚拟机中预定义的属性有20多个，这里就不一一介绍了，通过上面几个属性的介绍，只要领会其精髓，其他属性的解读也是易如反掌。")])])]),_._v(" "),t("h2",{attrs:{id:"总结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("p",[_._v("随着Java平台的不断发展，在将来，Class文件的内容也一定会进一步扩充，但是基本格式和结构不会做重大调整。")]),_._v(" "),t("p",[_._v("从Java虚拟机角度看，通过class文件，可以让更多的计算机语言支持Java虚拟机平台。因此，class文件结构不仅仅是Java虚拟机的执行入口，更是Java生态圈的基础和核心。")])])}),[],!1,null,null,null);v.default=s.exports}}]);