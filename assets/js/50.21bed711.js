(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{1002:function(t,a,s){"use strict";s.r(a);var n=s(58),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"zipkin架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zipkin架构"}},[t._v("#")]),t._v(" ZipKin架构")]),t._v(" "),n("p",[t._v("本文主要是翻译官方的"),n("a",{attrs:{href:"https://zipkin.io/pages/architecture.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ZipKin Architecture"),n("OutboundLink")],1),t._v("，以及加上一些自己的理解。")]),t._v(" "),n("h3",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),n("p",[t._v("跟踪程序（Tracer）存在于应用程序中，并记录有关所发生操作的时间和元数据。 他们经常作为仪器库（ instrument libraries），因此它们的使用对用户是透明的。 例如，一个被检测的 Web 服务器会记录它何时收到请求以及何时发送响应。 收集的跟踪数据称为跨度（Span）。")]),t._v(" "),n("p",[t._v("仪器（Instrumentation）的编写是为了在生产中安全，并有很少的开销。因此，他们只在踪链带内（in-band）传播ID（traceId），告诉接收方正在进行跟踪。完成的跨度会向带外（out-of-band）的Zipkin报告，类似于应用程序异步报告指标的方式。例如，当一个操作被跟踪并且需要发出一个 http 请求时，会添加一些标头（heards）来传播ID。标头不用于发送操作名称等详细信息。")]),t._v(" "),n("p",[t._v("在一个被检测的应用程序中，向Zipkin发送数据的组件被称为Reporter。Reporter通过多种传输方式之一将跟踪数据发送给Zipkin收集器（Collector），收集器将跟踪数据保存到存储器(Storage)中。最后，API查询存储以向UI提供数据。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(355),alt:"zipkin-architecture-1"}})]),t._v(" "),n("p",[n("code",[t._v("ZipKin")]),t._v(" 总体采用的是C/S架构。客户端采集数据后异步发送给服务端用来展示数据。在每个Instrumented的客户端，写入了TraceId，然后统一收集数据在服务端存储。这里Instrumented翻译为仪器化，代表一个接入了ZipKin的客户端（ZipKin 提供了追踪仪，接入了ZipKin的客户端相当于绑了一个追踪仪器）。")]),t._v(" "),n("h2",{attrs:{id:"流程例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程例子"}},[t._v("#")]),t._v(" 流程例子")]),t._v(" "),n("p",[t._v("如概述中所述，标识符（traceId、spanId）在踪链带内发送，详细信息在踪链带外发送到 Zipkin。 在这两种情况下，跟踪仪器负责创建有效的跟踪并正确呈现它们。 例如，跟踪器确保它在踪链带内（下游）和踪链带外（异步到 Zipkin）发送的数据之间的奇偶校验。")]),t._v(" "),n("p",[t._v("这是 http 跟踪的示例序列，其中用户代码调用资源"),n("code",[t._v("/foo")]),t._v("。这将导致在用户代码接收到http响应后Reporter异步发送给Zipkin的单个span。")]),t._v(" "),n("div",{staticClass:"language-xml extra-class"},[n("pre",{pre:!0,attrs:{class:"language-xml"}},[n("code",[t._v('┌─────────────┐ ┌───────────────────────┐  ┌─────────────┐  ┌──────────────────┐\n│ User Code   │ │ Trace Instrumentation │  │ Http Client │  │ Zipkin Collector │\n└─────────────┘ └───────────────────────┘  └─────────────┘  └──────────────────┘\n       │                 │                         │                 │\n           ┌─────────┐\n       │ ──┤GET /foo ├─▶ │ ────┐                   │                 │\n           └─────────┘         │ record tags\n       │                 │ ◀───┘                   │                 │\n                           ────┐\n       │                 │     │ add trace headers │                 │\n                           ◀───┘\n       │                 │ ────┐                   │                 │\n                               │ record timestamp\n       │                 │ ◀───┘                   │                 │\n                             ┌─────────────────┐\n       │                 │ ──┤GET /foo         ├─▶ │                 │\n                             │X-B3-TraceId: aa │     ────┐\n       │                 │   │X-B3-SpanId: 6b  │   │     │           │\n                             └─────────────────┘         │ invoke\n       │                 │                         │     │ request   │\n                                                         │\n       │                 │                         │     │           │\n                                 ┌────────┐          ◀───┘\n       │                 │ ◀─────┤200 OK  ├─────── │                 │\n                           ────┐ └────────┘\n       │                 │     │ record duration   │                 │\n            ┌────────┐     ◀───┘\n       │ ◀──┤200 OK  ├── │                         │                 │\n            └────────┘       ┌────────────────────────────────┐\n       │                 │ ──┤ asynchronously report span     ├────▶ │\n                             │                                │\n                             │{                               │\n                             │  "traceId": "aa",              │\n                             │  "id": "6b",                   │\n                             │  "name": "get",                │\n                             │  "timestamp": 1483945573944000,│\n                             │  "duration": 386000,           │\n                             │  "annotations": [              │\n                             │--snip--                        │\n                             └────────────────────────────────┘\n')])])]),n("p",[t._v("跟踪检测报告（Reporter）异步地扩展，是为了防止与跟踪系统相关的延迟或故障延迟或破坏用户代码。由追踪仪（Trace Instrumentation ）发送的跨度（Span）必须从被跟踪的服务传输到Zipkin收集者。有三个主要的传输方式（Transport）:HTTP，Kafka和Scribe。")]),t._v(" "),n("h2",{attrs:{id:"组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),n("p",[t._v("ZipKin主要由4个核心组件构成：")]),t._v(" "),n("h3",{attrs:{id:"collector"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#collector"}},[t._v("#")]),t._v(" Collector")]),t._v(" "),n("p",[t._v("收集器组件，它主要用于验证和处理从外部系统发送过来的跟踪信息，将这些信息转换为Zipkin内部处理的Span格式，以支持后续的存储、分析、检索展示等功能。")]),t._v(" "),n("h3",{attrs:{id:"storage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#storage"}},[t._v("#")]),t._v(" Storage")]),t._v(" "),n("p",[t._v("存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中，我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到 数据库或es 中。Zipkin 最初是为了在 Cassandra 上存储数据而构建的，因为 Cassandra 是可扩展的，具有灵活的架构，并且在 Twitter 中被大量使用。 除了 Cassandra，原生支持 ElasticSearch 和 MySQL，其他存储方式可能作为第三方扩展提供。")]),t._v(" "),n("h3",{attrs:{id:"search-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#search-api"}},[t._v("#")]),t._v(" Search-API")]),t._v(" "),n("p",[t._v("RESTful API组件。一旦数据被存储和索引，我们需要一种方法来提取它， 查询守护进程提供了一个简单的 JSON API 来查找和检索跟踪。 此 API 的主要使用者是 Web UI。它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接系统访问以实现监控等。")]),t._v(" "),n("h3",{attrs:{id:"web-ui"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web-ui"}},[t._v("#")]),t._v(" Web UI")]),t._v(" "),n("p",[t._v("Web UI组件，基于API组件实现的上层应用。它提供了一个用于查看跟踪的漂亮界面，通过UI组件用户可以方便而有直观地查询和分析跟踪信息。 注意：UI 中没有内置身份验证！")]),t._v(" "),n("h2",{attrs:{id:"相关概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),n("h3",{attrs:{id:"trace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#trace"}},[t._v("#")]),t._v(" Trace")]),t._v(" "),n("p",[t._v("一系列 Spans 组成的一个树状结构。Zipkin使用Trace结构表示对一次请求的跟踪，一次请求可能由后台的若干服务负责处理，每个服务的处理是一个Span，Span之间有依赖关系，Trace就是树结构的Span集合，Trace以一个64 位 ID 表示。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(356),alt:"zipkin-architecture-2"}})]),t._v(" "),n("h3",{attrs:{id:"span"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#span"}},[t._v("#")]),t._v(" Span")]),t._v(" "),n("p",[t._v("Zipkin基本工作单元。每个服务的处理跟踪是一个Span，包含了一些描述信息：id，parentId，name，timestamp，duration，annotations等。例如：")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"traceId"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bd7a977555f6b982"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" #标记一次请求的跟踪，相关的Spans都有相同的traceId；\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get-traces"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" #span的名称，一般是接口方法的名称\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ebf33e1a81dc6f71"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" #span id\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"parentId"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bd7a977555f6b982"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   # 可选的id，当前Span的父Span id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Spans之间依赖关系的字段\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"timestamp"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1458702548478000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" # Span创建时的时间戳，使用的单位是微秒\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"duration"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("354374")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" # 持续时间，使用的单位是微秒（避免主机间的时间偏差）\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"annotations"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"endpoint"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"serviceName"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zipkin-query"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ipv4"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.1.2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"port"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9411")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"timestamp"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1458702548786000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cs"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"binaryAnnotations"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"key"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JDBCSpanStore"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"endpoint"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"serviceName"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"zipkin-query"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ipv4"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"192.168.1.2"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"port"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9411")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"annotation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#annotation"}},[t._v("#")]),t._v(" Annotation：")]),t._v(" "),n("p",[t._v("用来及时记录一个事件的存在，一些核心 Annotations 用来定义一个请求的开始和结束")]),t._v(" "),n("ul",[n("li",[t._v("cs：Client Sent，客户端发起一个请求，这个 Annotation 描述了这个 Span 的开始")]),t._v(" "),n("li",[t._v("sr：Server Received，服务端获得请求并准备开始处理它，"),n("strong",[t._v("如果将其 sr 减去 cs 时间戳便可得到网络延迟")])]),t._v(" "),n("li",[t._v("ss：Server Sent 表明请求处理的完成(当请求返回客户端)，"),n("strong",[t._v("如果 ss 减去 sr 时间戳便可得到服务端需要的处理请求时间")])]),t._v(" "),n("li",[t._v("cr：Client Received 表明 Span 的结束，客户端成功接收到服务端的回复，"),n("strong",[t._v("如果 cr 减去 cs 时间戳便可得到客户端从服务端获取回复的所有所需时间")])])])])}),[],!1,null,null,null);a.default=r.exports},355:function(t,a,s){t.exports=s.p+"assets/img/zipkin-architecture-1.24fd8065.png"},356:function(t,a,s){t.exports=s.p+"assets/img/zipkin-architecture-2.a7226fb8.png"}}]);