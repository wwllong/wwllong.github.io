(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{711:function(t,a,e){"use strict";e.r(a);var s=e(58),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"gitlab-持续集成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-持续集成"}},[t._v("#")]),t._v(" GitLab 持续集成")]),t._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),e("p",[t._v("从 GitLab 8.0 开始，GitLab CI 就已经集成在 GitLab 中，我们只要在项目中添加一个 "),e("code",[t._v(".gitlab-ci.yml")]),t._v(" 文件，然后再添加一个 "),e("code",[t._v("Runner")]),t._v("，即可进行持续集成。 而且随着 GitLab 的升级，GitLab CI 变得越来越强大。")]),t._v(" "),e("h2",{attrs:{id:"gitlab-ci-相关概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-ci-相关概念"}},[t._v("#")]),t._v(" GitLab CI 相关概念")]),t._v(" "),e("h3",{attrs:{id:"pipeline"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pipeline"}},[t._v("#")]),t._v(" Pipeline")]),t._v(" "),e("p",[t._v("一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。")]),t._v(" "),e("p",[t._v("任何提交"),e("code",[t._v("commit")]),t._v("或者 "),e("code",[t._v("Merge Request")]),t._v(" 的合并都可以触发 Pipeline，如下图所示：")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("+------------------+           +----------------+\n|                  |  trigger  |                |\n|   Commit / MR    +----------\x3e+    Pipeline    |\n|                  |           |                |\n+------------------+           +----------------+\n")])])]),e("h3",{attrs:{id:"stages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stages"}},[t._v("#")]),t._v(" Stages")]),t._v(" "),e("p",[t._v("Stages 表示构建阶段，说白了就是上面提到的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：")]),t._v(" "),e("ul",[e("li",[t._v("所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始")]),t._v(" "),e("li",[t._v("只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功")]),t._v(" "),e("li",[t._v("如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败")])]),t._v(" "),e("p",[t._v("因此，Stages 和 Pipeline 的关系就是：")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("+--------------------------------------------------------+\n|                                                        |\n|  Pipeline                                              |\n|                                                        |\n|  +-----------+     +------------+      +------------+  |\n|  |  Stage 1  |----\x3e|   Stage 2  |-----\x3e|   Stage 3  |  |\n|  +-----------+     +------------+      +------------+  |\n|                                                        |\n+--------------------------------------------------------+\n")])])]),e("h3",{attrs:{id:"jobs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jobs"}},[t._v("#")]),t._v(" Jobs")]),t._v(" "),e("p",[t._v("Jobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：")]),t._v(" "),e("ul",[e("li",[t._v("相同 Stage 中的 Jobs 会并行执行")]),t._v(" "),e("li",[t._v("相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功")]),t._v(" "),e("li",[t._v("如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败")])]),t._v(" "),e("p",[t._v("所以，Jobs 和 Stage 的关系图就是：")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("+------------------------------------------+\n|                                          |\n|  Stage 1                                 |\n|                                          |\n|  +---------+  +---------+  +---------+   |\n|  |  Job 1  |  |  Job 2  |  |  Job 3  |   |\n|  +---------+  +---------+  +---------+   |\n|                                          |\n+------------------------------------------+\n")])])]),e("p",[e("RouterLink",{attrs:{to:"/ci-cd/gitlab-runner.html"}},[t._v("GitLab Runner")]),t._v(" 负责执行上述的构建任务。")],1)])}),[],!1,null,null,null);a.default=i.exports}}]);